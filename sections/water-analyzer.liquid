<!-- Analyseur Eau Potable - Version Compl√®te avec Personnalisation -->
<div class="water-analyzer" data-section-id="{{ section.id }}" style="
  --primary-color: {{ section.settings.primary_color | default: '#2563eb' }};
  --secondary-color: {{ section.settings.secondary_color | default: '#1e40af' }};
  --accent-color: {{ section.settings.accent_color | default: '#3b82f6' }};
  --success-color: {{ section.settings.success_color | default: '#10b981' }};
  --warning-color: {{ section.settings.warning_color | default: '#f59e0b' }};
  --error-color: {{ section.settings.error_color | default: '#ef4444' }};
  --text-color: {{ section.settings.text_color | default: '#1f2937' }};
  --background-color: {{ section.settings.background_color | default: '#ffffff' }};
  --border-radius: {{ section.settings.border_radius | default: 16 }}px;
  --section-padding: {{ section.settings.section_padding | default: 2 }}rem;
  --shadow-color: {{ section.settings.shadow_color | default: 'rgba(0, 0, 0, 0.1)' }};
">
  <!-- Header -->
  <header class="water-analyzer__header">
    <h2 class="water-analyzer__title">
      <span class="water-analyzer__icon">{{ section.settings.header_icon | default: 'üåä' }}</span>
      {{ section.settings.title | default: 'Analyseur Qualite Eau' }}
    </h2>
    <p class="water-analyzer__subtitle">
      {{ section.settings.subtitle | default: 'Decouvrez la qualite de l eau a votre adresse' }}
    </p>
  </header>

  <!-- Main Content -->
  <div class="water-analyzer__content">
    
    <!-- Search Section -->
    <section class="water-analyzer__search">
      <h3 class="water-analyzer__search-title">
        <span class="water-analyzer__icon">{{ section.settings.search_icon | default: 'üè†' }}</span>
        {{ section.settings.search_title | default: 'Analysez votre eau' }}
      </h3>
      <p class="water-analyzer__search-description">
        {{ section.settings.search_description | default: 'Saisissez votre adresse pour obtenir un rapport de qualite detaille' }}
      </p>
      
      <form class="water-analyzer__form" data-water-form>
        <div class="water-analyzer__input-group">
          <input 
            type="text" 
            id="water-input-{{ section.id }}" 
            class="water-analyzer__input"
            placeholder="{{ section.settings.placeholder | default: '01000 Bourg-en-Bresse' }}"
            autocomplete="address-line1"
            required
            aria-label="Adresse a analyser"
          >
          <button 
            type="submit"
            class="water-analyzer__button"
            data-water-button
            aria-label="Lancer l analyse"
          >
            <span class="water-analyzer__button-icon">{{ section.settings.button_icon | default: 'üîç' }}</span>
            <span class="water-analyzer__button-text">{{ section.settings.button_text | default: 'Analyser' }}</span>
          </button>
        </div>

        <!-- Examples -->
        {% if section.settings.show_examples %}
        <div class="water-analyzer__examples">
          <span class="water-analyzer__examples-label">üí° Exemples :</span>
          {% assign examples = section.settings.examples | default: '01000,Gex,Bourg-en-Bresse' | split: ',' %}
          {% for example in examples %}
            <button 
              type="button" 
              class="water-analyzer__example"
              data-example="{{ example | strip }}"
            >
              {{ example | strip }}
            </button>
          {% endfor %}
        </div>
        {% endif %}
      </form>
    </section>

    <!-- Debug Info (hidden by default) -->
    {% if section.settings.debug_mode %}
    <div class="water-analyzer__debug" data-debug-info style="display: none;">
      <strong>Debug :</strong> 
      <span data-debug-text>En attente...</span>
    </div>
    {% endif %}

    <!-- Loading State with Multiple Animation Options -->
    <div class="water-analyzer__loading" data-loading style="display: none;">
      
      <!-- Glass Filling Animation (Default) -->
      {% if section.settings.loading_animation == 'glass' or section.settings.loading_animation == blank %}
      <div class="loading-glass" data-loading-glass>
        <div class="glass-container">
          <div class="glass">
            <div class="water-fill" data-water-fill></div>
            <div class="bubbles">
              <div class="bubble bubble-1"></div>
              <div class="bubble bubble-2"></div>
              <div class="bubble bubble-3"></div>
            </div>
          </div>
          <div class="glass-base"></div>
        </div>
        <div class="progress-text">
          <span class="progress-percentage" data-progress-percentage>0%</span>
          <p class="progress-label">Analyse en cours...</p>
        </div>
      </div>
      {% endif %}

      <!-- Progress Bar Animation -->
      {% if section.settings.loading_animation == 'progress' %}
      <div class="loading-progress" data-loading-progress>
        <div class="progress-container">
          <div class="progress-bar">
            <div class="progress-fill" data-progress-fill></div>
            <div class="progress-shine"></div>
          </div>
          <div class="progress-text">
            <span class="progress-percentage" data-progress-percentage>0%</span>
          </div>
        </div>
        <p class="progress-label">Analyse en cours...</p>
      </div>
      {% endif %}

      <!-- Ripple Animation -->
      {% if section.settings.loading_animation == 'ripple' %}
      <div class="loading-ripple" data-loading-ripple>
        <div class="ripple-container">
          <div class="ripple-circle ripple-1"></div>
          <div class="ripple-circle ripple-2"></div>
          <div class="ripple-circle ripple-3"></div>
          <div class="ripple-center">üíß</div>
        </div>
        <div class="progress-text">
          <span class="progress-percentage" data-progress-percentage>0%</span>
          <p class="progress-label">Analyse en cours...</p>
        </div>
      </div>
      {% endif %}

      <!-- Dots Animation -->
      {% if section.settings.loading_animation == 'dots' %}
      <div class="loading-dots" data-loading-dots>
        <div class="dots-container">
          <div class="dot dot-1"></div>
          <div class="dot dot-2"></div>
          <div class="dot dot-3"></div>
          <div class="dot dot-4"></div>
          <div class="dot dot-5"></div>
        </div>
        <div class="progress-text">
          <span class="progress-percentage" data-progress-percentage>0%</span>
          <p class="progress-label">Analyse en cours...</p>
        </div>
      </div>
      {% endif %}

      <p class="water-analyzer__loading-text" data-loading-text>
        Etape 1: Localisation de l adresse...
      </p>
    </div>

    <!-- Results -->
    <div class="water-analyzer__results" data-results style="display: none;" role="region" aria-live="polite">
      <!-- Results will be populated by JavaScript -->
    </div>
  </div>
</div>

<style>
  .water-analyzer {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
    background: var(--background-color);
    border: 1px solid #e5e7eb;
    border-radius: var(--border-radius);
    overflow: hidden;
    box-shadow: 0 10px 25px var(--shadow-color);
    margin: var(--section-padding) 0;
    color: var(--text-color);
    max-width: 100%;
    position: relative;
  }

  .water-analyzer__header {
    background: var(--primary-color);
    color: white;
    padding: calc(var(--section-padding) * 1.5) var(--section-padding);
    text-align: center;
    position: relative;
    overflow: hidden;
  }

  .water-analyzer__header::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(45deg, transparent 30%, rgba(255,255,255,0.1) 50%, transparent 70%);
    animation: header-shine 3s ease-in-out infinite;
  }

  .water-analyzer__title {
    font-size: clamp(1.5rem, 4vw, 2.2rem);
    margin: 0 0 0.5rem 0;
    font-weight: 700;
    line-height: 1.2;
    position: relative;
    z-index: 1;
  }

  .water-analyzer__subtitle {
    margin: 0;
    opacity: 0.95;
    font-size: clamp(0.9rem, 2.5vw, 1.1rem);
    font-weight: 400;
    position: relative;
    z-index: 1;
  }

  .water-analyzer__icon {
    display: inline-block;
    margin-right: 0.5rem;
    font-size: 1.1em;
  }

  .water-analyzer__content {
    background: var(--background-color);
    padding: var(--section-padding);
  }

  .water-analyzer__search {
    background: #f8fafc;
    border: 1px solid #e2e8f0;
    padding: var(--section-padding);
    border-radius: calc(var(--border-radius) * 0.75);
    margin-bottom: var(--section-padding);
  }

  .water-analyzer__search-title {
    margin: 0 0 1rem 0;
    font-size: 1.4rem;
    font-weight: 600;
    color: var(--text-color);
  }

  .water-analyzer__search-description {
    margin: 0 0 1.5rem 0;
    color: #64748b;
    line-height: 1.6;
  }

  .water-analyzer__form {
    width: 100%;
  }

  .water-analyzer__input-group {
    display: flex;
    gap: 0.75rem;
    align-items: stretch;
    flex-wrap: wrap;
    margin-bottom: 1rem;
  }

  .water-analyzer__input {
    flex: 1;
    min-width: 250px;
    padding: 1rem 1.25rem;
    border: 2px solid #e2e8f0;
    border-radius: calc(var(--border-radius) * 0.5);
    font-size: 1rem;
    background: white;
    outline: none;
    transition: all 0.3s ease;
    color: var(--text-color);
  }

  .water-analyzer__input:focus {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
  }

  .water-analyzer__button {
    padding: 1rem 1.5rem;
    background: var(--primary-color);
    color: white;
    border: none;
    border-radius: calc(var(--border-radius) * 0.5);
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    white-space: nowrap;
    position: relative;
    overflow: hidden;
  }

  .water-analyzer__button::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
    transition: left 0.5s ease;
  }

  .water-analyzer__button:hover:not(:disabled) {
    background: var(--secondary-color);
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(37, 99, 235, 0.3);
  }

  .water-analyzer__button:hover:not(:disabled)::before {
    left: 100%;
  }

  .water-analyzer__button:disabled {
    opacity: 0.7;
    cursor: not-allowed;
    transform: none;
  }

  .water-analyzer__examples {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.9rem;
  }

  .water-analyzer__examples-label {
    font-weight: 600;
    margin-right: 0.5rem;
    color: var(--text-color);
  }

  .water-analyzer__example {
    background: white;
    color: var(--primary-color);
    border: 1px solid var(--primary-color);
    padding: 0.375rem 0.75rem;
    border-radius: calc(var(--border-radius) * 0.25);
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 0.85rem;
    font-weight: 500;
  }

  .water-analyzer__example:hover {
    background: var(--primary-color);
    color: white;
    transform: translateY(-1px);
  }

  .water-analyzer__debug {
    background: #eff6ff;
    border: 1px solid #bfdbfe;
    padding: 1rem;
    border-radius: calc(var(--border-radius) * 0.5);
    margin-bottom: 1.5rem;
    font-family: 'Courier New', monospace;
    font-size: 0.8rem;
    color: #1e40af;
  }

  .water-analyzer__loading {
    text-align: center;
    padding: 3rem 1rem;
    background: #f8fafc;
    border-radius: calc(var(--border-radius) * 0.75);
    margin: 1rem 0;
  }

  .water-analyzer__loading-text {
    margin: 1rem 0 0 0;
    color: #64748b;
    font-weight: 500;
  }

  /* Glass Filling Animation */
  .loading-glass {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1.5rem;
  }

  .glass-container {
    position: relative;
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .glass {
    width: 80px;
    height: 120px;
    border: 3px solid var(--primary-color);
    border-bottom: none;
    border-radius: 0 0 8px 8px;
    position: relative;
    overflow: hidden;
    background: rgba(255, 255, 255, 0.1);
  }

  .water-fill {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: linear-gradient(to top, var(--primary-color), var(--accent-color));
    height: 0%;
    transition: height 0.3s ease;
    border-radius: 0 0 5px 5px;
  }

  .water-fill::before {
    content: '';
    position: absolute;
    top: -2px;
    left: 0;
    right: 0;
    height: 4px;
    background: rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    animation: wave 2s ease-in-out infinite;
  }

  .glass-base {
    width: 90px;
    height: 8px;
    background: var(--primary-color);
    border-radius: 4px;
    margin-top: -1px;
  }

  .bubbles {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 100%;
    pointer-events: none;
  }

  .bubble {
    position: absolute;
    background: rgba(255, 255, 255, 0.6);
    border-radius: 50%;
    animation: bubble-rise 2s ease-in-out infinite;
  }

  .bubble-1 {
    width: 6px;
    height: 6px;
    left: 20%;
    animation-delay: 0s;
  }

  .bubble-2 {
    width: 4px;
    height: 4px;
    left: 50%;
    animation-delay: 0.7s;
  }

  .bubble-3 {
    width: 5px;
    height: 5px;
    left: 75%;
    animation-delay: 1.4s;
  }

  /* Progress Bar Animation */
  .loading-progress {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
  }

  .progress-container {
    width: 100%;
    max-width: 300px;
  }

  .progress-bar {
    width: 100%;
    height: 8px;
    background: #e2e8f0;
    border-radius: 4px;
    overflow: hidden;
    position: relative;
  }

  .progress-fill {
    height: 100%;
    background: linear-gradient(90deg, var(--primary-color), var(--accent-color));
    width: 0%;
    transition: width 0.3s ease;
    position: relative;
  }

  .progress-shine {
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
    animation: progress-shine 2s ease-in-out infinite;
  }

  /* Ripple Animation */
  .loading-ripple {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1.5rem;
  }

  .ripple-container {
    position: relative;
    width: 100px;
    height: 100px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .ripple-circle {
    position: absolute;
    border: 2px solid var(--primary-color);
    border-radius: 50%;
    opacity: 0;
    animation: ripple 2s ease-out infinite;
  }

  .ripple-1 {
    animation-delay: 0s;
  }

  .ripple-2 {
    animation-delay: 0.7s;
  }

  .ripple-3 {
    animation-delay: 1.4s;
  }

  .ripple-center {
    font-size: 2rem;
    z-index: 1;
  }

  /* Dots Animation */
  .loading-dots {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1.5rem;
  }

  .dots-container {
    display: flex;
    gap: 0.5rem;
    align-items: center;
  }

  .dot {
    width: 12px;
    height: 12px;
    background: var(--primary-color);
    border-radius: 50%;
    animation: dot-bounce 1.4s ease-in-out infinite both;
  }

  .dot-1 { animation-delay: 0s; }
  .dot-2 { animation-delay: 0.16s; }
  .dot-3 { animation-delay: 0.32s; }
  .dot-4 { animation-delay: 0.48s; }
  .dot-5 { animation-delay: 0.64s; }

  .progress-text {
    text-align: center;
  }

  .progress-percentage {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--primary-color);
  }

  .progress-label {
    margin: 0.5rem 0 0 0;
    color: #64748b;
    font-weight: 500;
  }

  .water-analyzer__results {
    animation: fade-in 0.5s ease-out;
  }

  /* Result Styles */
  .water-result {
    border-radius: calc(var(--border-radius) * 0.6);
    padding: 1.5rem;
    margin: 1rem 0;
    border: 1px solid #e5e7eb;
    background: white;
  }

  .water-result--location {
    border-left: 4px solid var(--primary-color);
    background: #f8fafc;
  }

  .water-result--quality {
    border-left: 4px solid var(--success-color);
    background: #f0fdf4;
  }

  .water-result--conformity {
    border-left: 4px solid var(--success-color);
    background: linear-gradient(135deg, #ecfdf5 0%, #f0fdf4 100%);
  }

  .water-result--recommendations {
    border-left: 4px solid var(--warning-color);
    background: linear-gradient(135deg, #fffbeb 0%, #fef3c7 100%);
  }

  .water-result--warning {
    background: #fffbeb;
    color: #92400e;
    border-left: 4px solid var(--warning-color);
  }

  .water-result--error {
    background: #fef2f2;
    color: #991b1b;
    border-left: 4px solid var(--error-color);
  }

  .water-result--nearby {
    border-left: 4px solid var(--accent-color);
    background: #f0f9ff;
  }

  .water-result__title {
    margin: 0 0 1rem 0;
    font-size: 1.2rem;
    font-weight: 600;
  }

  .water-result__content p {
    margin: 0.5rem 0;
    line-height: 1.6;
  }

  .water-result__content p:first-child {
    margin-top: 0;
  }

  .water-result__content p:last-child {
    margin-bottom: 0;
  }

  .distance-badge {
    display: inline-block;
    background: var(--accent-color);
    color: white;
    padding: 0.25rem 0.5rem;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: 600;
    margin-left: 0.5rem;
  }

  /* Animations */
  @keyframes header-shine {
    0%, 100% { transform: translateX(-100%); }
    50% { transform: translateX(100%); }
  }

  @keyframes wave {
    0%, 100% { transform: translateX(0); }
    50% { transform: translateX(10px); }
  }

  @keyframes bubble-rise {
    0% {
      bottom: 0;
      opacity: 0;
    }
    10% {
      opacity: 1;
    }
    90% {
      opacity: 1;
    }
    100% {
      bottom: 100%;
      opacity: 0;
    }
  }

  @keyframes progress-shine {
    0% { left: -100%; }
    100% { left: 100%; }
  }

  @keyframes ripple {
    0% {
      width: 0;
      height: 0;
      opacity: 1;
    }
    100% {
      width: 100px;
      height: 100px;
      opacity: 0;
    }
  }

  @keyframes dot-bounce {
    0%, 80%, 100% {
      transform: scale(0.8);
      opacity: 0.5;
    }
    40% {
      transform: scale(1.2);
      opacity: 1;
    }
  }

  @keyframes fade-in {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .water-analyzer {
      margin: 1rem 0;
      border-radius: calc(var(--border-radius) * 0.75);
    }

    .water-analyzer__header {
      padding: 1.5rem 1rem;
    }

    .water-analyzer__content {
      padding: 1.5rem 1rem;
    }

    .water-analyzer__search {
      padding: 1.5rem;
    }

    .water-analyzer__input-group {
      flex-direction: column;
    }

    .water-analyzer__input {
      min-width: auto;
    }

    .water-analyzer__examples {
      justify-content: center;
    }

    .glass {
      width: 60px;
      height: 90px;
    }

    .glass-base {
      width: 70px;
    }
  }

  @media (max-width: 480px) {
    .water-analyzer__examples {
      flex-direction: column;
      align-items: flex-start;
    }

    .water-analyzer__examples-label {
      margin-bottom: 0.5rem;
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .water-analyzer {
      border: 2px solid #000;
    }

    .water-analyzer__button {
      border: 2px solid #000;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .water-analyzer__button:hover {
      transform: none;
    }

    .water-analyzer__example:hover {
      transform: none;
    }

    .bubble,
    .progress-shine,
    .ripple-circle,
    .dot {
      animation: none;
    }

    .water-analyzer__results {
      animation: none;
    }
  }
</style>

<script>
(function() {
  'use strict';
  
  // Configuration avec systeme de fallback CORS ameliore
  const CORS_METHODS = [
    {
      name: 'AllOrigins',
      proxy: 'https://api.allorigins.win/get?url=',
      parse: function(data) { return JSON.parse(data.contents); },
      timeout: 10000
    },
    {
      name: 'ProxyAnywhereHeroku', 
      proxy: 'https://cors-anywhere.herokuapp.com/',
      parse: function(data) { return data; },
      timeout: 8000
    },
    {
      name: 'ThingProxy',
      proxy: 'https://thingproxy.freeboard.io/fetch/',
      parse: function(data) { return data; },
      timeout: 8000
    },
    {
      name: 'ProxyCors',
      proxy: 'https://proxy.cors.sh/',
      parse: function(data) { return data; },
      timeout: 8000
    },
    {
      name: 'Direct',
      proxy: '',
      parse: function(data) { return data; },
      timeout: 5000
    }
  ];

  // Configuration globale
  const CONFIG = {
    sectionId: '{{ section.id }}',
    debugMode: {{ section.settings.debug_mode | default: false }},
    maxRetries: 3,
    cacheTimeout: 300000, // 5 minutes
    dateRangeYears: 2,
    proximityRadius: {{ section.settings.proximity_radius | default: 50 }}, // km
    maxNearbyCommunes: {{ section.settings.max_nearby_communes | default: 5 }},
    loadingAnimation: '{{ section.settings.loading_animation | default: "glass" }}'
  };

  // Variables globales
  let currentProgress = 0;
  let progressInterval = null;

  // Cache simple pour eviter les requetes repetees
  const cache = new Map();

  // Selecteurs DOM
  const selectors = {
    form: '[data-water-form]',
    input: '#water-input-' + CONFIG.sectionId,
    button: '[data-water-button]',
    loading: '[data-loading]',
    loadingText: '[data-loading-text]',
    results: '[data-results]',
    debugInfo: '[data-debug-info]',
    debugText: '[data-debug-text]',
    examples: '[data-example]',
    progressPercentage: '[data-progress-percentage]',
    progressFill: '[data-progress-fill]',
    waterFill: '[data-water-fill]'
  };

  // Utilitaires
  const utils = {
    debounce: function(func, wait) {
      let timeout;
      return function executedFunction() {
        const args = arguments;
        const later = function() {
          clearTimeout(timeout);
          func.apply(this, args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    },

    sanitizeHtml: function(str) {
      const div = document.createElement('div');
      div.textContent = str;
      return div.innerHTML;
    },

    formatDate: function(dateString) {
      return new Date(dateString).toLocaleDateString('fr-FR', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
    },

    getCacheKey: function(address) {
      return 'water_analysis_' + address.toLowerCase().replace(/\s+/g, '_');
    },

    calculateDistance: function(lat1, lon1, lat2, lon2) {
      const R = 6371; // Rayon de la Terre en km
      const dLat = (lat2 - lat1) * Math.PI / 180;
      const dLon = (lon2 - lon1) * Math.PI / 180;
      const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
                Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                Math.sin(dLon/2) * Math.sin(dLon/2);
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
      return R * c;
    }
  };

  // Fonction de debug amelioree
  function debug(message, type) {
    type = type || 'info';
    const timestamp = new Date().toLocaleTimeString('fr-FR');
    const logMessage = '[' + timestamp + '] üåä Water Analyzer: ' + message;
    
    console[type](logMessage);
    
    if (CONFIG.debugMode) {
      const debugEl = document.querySelector(selectors.debugInfo);
      const debugText = document.querySelector(selectors.debugText);
      if (debugEl && debugText) {
        debugEl.style.display = 'block';
        debugText.textContent = timestamp + ' - ' + message;
      }
    }
  }

  // Gestion des animations de progression
  const progressManager = {
    start: function() {
      currentProgress = 0;
      this.updateProgress(0);
      
      // Animation progressive automatique
      progressInterval = setInterval(function() {
        if (currentProgress < 90) {
          currentProgress += Math.random() * 15;
          if (currentProgress > 90) currentProgress = 90;
          progressManager.updateProgress(currentProgress);
        }
      }, 300);
    },

    updateProgress: function(percentage) {
      percentage = Math.min(100, Math.max(0, percentage));
      
      const percentageElements = document.querySelectorAll(selectors.progressPercentage);
      const progressFills = document.querySelectorAll(selectors.progressFill);
      const waterFills = document.querySelectorAll(selectors.waterFill);
      
      // Mettre a jour le pourcentage affiche
      for (let i = 0; i < percentageElements.length; i++) {
        percentageElements[i].textContent = Math.round(percentage) + '%';
      }
      
      // Mettre a jour les barres de progression
      for (let i = 0; i < progressFills.length; i++) {
        progressFills[i].style.width = percentage + '%';
      }
      
      // Mettre a jour le remplissage du verre
      for (let i = 0; i < waterFills.length; i++) {
        waterFills[i].style.height = percentage + '%';
      }
    },

    complete: function() {
      if (progressInterval) {
        clearInterval(progressInterval);
        progressInterval = null;
      }
      this.updateProgress(100);
      
      // Petit delai pour voir le 100%
      setTimeout(function() {
        progressManager.reset();
      }, 500);
    },

    reset: function() {
      currentProgress = 0;
      this.updateProgress(0);
    }
  };

  // Gestion des etats de l interface
  const ui = {
    showLoading: function(step) {
      step = step || 'Initialisation...';
      const loading = document.querySelector(selectors.loading);
      const results = document.querySelector(selectors.results);
      const loadingText = document.querySelector(selectors.loadingText);
      
      if (results) results.style.display = 'none';
      if (loading) loading.style.display = 'block';
      if (loadingText) loadingText.textContent = step;
      
      // Demarrer l animation de progression
      progressManager.start();
    },

    hideLoading: function() {
      const loading = document.querySelector(selectors.loading);
      if (loading) loading.style.display = 'none';
      
      // Completer l animation
      progressManager.complete();
    },

    toggleButton: function(disabled, text) {
      disabled = disabled || false;
      const button = document.querySelector(selectors.button);
      if (!button) return;

      button.disabled = disabled;
      
      if (text) {
        const buttonText = button.querySelector('.water-analyzer__button-text');
        const buttonIcon = button.querySelector('.water-analyzer__button-icon');
        
        if (buttonText) buttonText.textContent = text;
        if (buttonIcon) buttonIcon.textContent = disabled ? 'üîÑ' : '{{ section.settings.button_icon | default: "üîç" }}';
      }
    },

    showResults: function(html) {
      const results = document.querySelector(selectors.results);
      if (results) {
        results.innerHTML = html;
        results.style.display = 'block';
        
        // Scroll fluide vers les resultats
        setTimeout(function() {
          results.scrollIntoView({ 
            behavior: 'smooth', 
            block: 'start' 
          });
        }, 100);
      }
    }
  };

  // Fonction de fetch avec timeout et retry
  function fetchWithTimeout(url, options) {
    options = options || {};
    const timeout = options.timeout || 5000;
    const fetchOptions = Object.assign({}, options);
    delete fetchOptions.timeout;
    
    const controller = new AbortController();
    const timeoutId = setTimeout(function() {
      controller.abort();
    }, timeout);
    
    fetchOptions.signal = controller.signal;
    
    return fetch(url, fetchOptions).then(function(response) {
      clearTimeout(timeoutId);
      return response;
    }).catch(function(error) {
      clearTimeout(timeoutId);
      throw error;
    });
  }

  // Fonction de fetch avec fallback amelioree
  function fetchWithFallback(url, methodIndex, retryCount) {
    methodIndex = methodIndex || 0;
    retryCount = retryCount || 0;
    
    if (methodIndex >= CORS_METHODS.length) {
      throw new Error('Toutes les methodes de connexion ont echoue. Verifiez votre connexion internet.');
    }

    const method = CORS_METHODS[methodIndex];
    debug('Tentative ' + (methodIndex + 1) + '/' + CORS_METHODS.length + ': ' + method.name + ' (retry: ' + retryCount + ')');

    const proxyUrl = method.proxy ? method.proxy + encodeURIComponent(url) : url;
    
    return fetchWithTimeout(proxyUrl, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'User-Agent': 'WaterAnalyzer/1.0'
      },
      mode: 'cors',
      timeout: method.timeout
    }).then(function(response) {
      if (!response.ok) {
        throw new Error('HTTP ' + response.status + ': ' + response.statusText);
      }
      return response.json();
    }).then(function(data) {
      const parsedData = method.parse(data);
      debug('Succes avec ' + method.name);
      return parsedData;
    }).catch(function(error) {
      debug('Methode ' + method.name + ' echouee: ' + error.message, 'warn');
      
      // Retry avec la meme methode si pas encore fait
      if (retryCount < CONFIG.maxRetries) {
        return new Promise(function(resolve) {
          setTimeout(resolve, 1000 * (retryCount + 1));
        }).then(function() {
          return fetchWithFallback(url, methodIndex, retryCount + 1);
        });
      }
      
      // Essayer la methode suivante
      return fetchWithFallback(url, methodIndex + 1, 0);
    });
  }

  // Recherche de communes proches
  function findNearbyCommunes(lat, lon) {
    debug('Recherche de communes proches...');
    progressManager.updateProgress(60);
    
    const url = 'https://geo.api.gouv.fr/communes?lat=' + lat + '&lon=' + lon + '&fields=nom,code,codesPostaux,centre&format=json&geometry=centre';
    
    return fetchWithFallback(url).then(function(communes) {
      if (!communes || !Array.isArray(communes)) {
        return [];
      }
      
      // Calculer les distances et trier
      const communesWithDistance = communes.map(function(commune) {
        const distance = utils.calculateDistance(
          lat, lon,
          commune.centre.coordinates[1],
          commune.centre.coordinates[0]
        );
        return Object.assign({}, commune, { distance: distance });
      }).filter(function(commune) {
        return commune.distance <= CONFIG.proximityRadius;
      }).sort(function(a, b) {
        return a.distance - b.distance;
      }).slice(0, CONFIG.maxNearbyCommunes);
      
      debug('Trouv√© ' + communesWithDistance.length + ' communes proches');
      return communesWithDistance;
    });
  }

  // Analyse des communes proches
  function analyzeNearbyCommunes(nearbyCommunes) {
    debug('Analyse des communes proches...');
    progressManager.updateProgress(80);
    
    const promises = nearbyCommunes.map(function(commune) {
      const dateLimit = new Date();
      dateLimit.setFullYear(dateLimit.getFullYear() - CONFIG.dateRangeYears);
      const dateLimitStr = dateLimit.toISOString().split('T')[0];

      const waterUrl = 'https://hubeau.eaufrance.fr/api/v1/qualite_eau_potable/resultats_dis?code_commune=' + commune.code + '&date_min_prelevement=' + dateLimitStr + '&size=50&format=json&sort=desc';
      
      return fetchWithFallback(waterUrl).then(function(qualityData) {
        return {
          commune: commune,
          qualityData: qualityData
        };
      }).catch(function() {
        return {
          commune: commune,
          qualityData: null
        };
      });
    });
    
    return Promise.all(promises);
  }

  // Fonction principale d analyse
  function analyzeWater(address) {
    if (!address || !address.trim()) {
      throw new Error('Veuillez saisir une adresse valide');
    }

    const cacheKey = utils.getCacheKey(address);
    
    // Verifier le cache
    if (cache.has(cacheKey)) {
      const cached = cache.get(cacheKey);
      if (Date.now() - cached.timestamp < CONFIG.cacheTimeout) {
        debug('Utilisation des donnees en cache');
        return Promise.resolve(cached.data);
      }
    }

    debug('Demarrage de l analyse pour: ' + address);

    // Etape 1: Geocodage
    ui.showLoading('Etape 1: Localisation de l adresse...');
    debug('Geocodage en cours...');
    progressManager.updateProgress(20);
    
    const addressUrl = 'https://api-adresse.data.gouv.fr/search/?q=' + encodeURIComponent(address) + '&limit=5';
    
    return fetchWithFallback(addressUrl).then(function(locationData) {
      if (!locationData || !locationData.features || !locationData.features.length) {
        throw new Error('Adresse non trouvee. Essayez avec le code postal ou le nom de la ville.');
      }

      const location = locationData.features[0];
      const cityCode = location.properties.citycode;
      const cityName = location.properties.city;
      const coordinates = location.geometry.coordinates; // [lon, lat]
      
      debug('Adresse trouvee: ' + cityName + ' (' + cityCode + ')');
      progressManager.updateProgress(40);

      // Etape 2: Recuperation des donnees de qualite
      ui.showLoading('Etape 2: Recuperation des analyses d eau...');
      
      const dateLimit = new Date();
      dateLimit.setFullYear(dateLimit.getFullYear() - CONFIG.dateRangeYears);
      const dateLimitStr = dateLimit.toISOString().split('T')[0];

      const waterUrl = 'https://hubeau.eaufrance.fr/api/v1/qualite_eau_potable/resultats_dis?code_commune=' + cityCode + '&date_min_prelevement=' + dateLimitStr + '&size=200&format=json&sort=desc';
      
      debug('Recuperation des donnees qualite...');
      return fetchWithFallback(waterUrl).then(function(qualityData) {
        progressManager.updateProgress(50);
        
        // Si pas de donnees, chercher dans les communes proches
        if (!qualityData || !qualityData.data || qualityData.data.length === 0) {
          ui.showLoading('Etape 3: Recherche dans les communes proches...');
          
          return findNearbyCommunes(coordinates[1], coordinates[0]).then(function(nearbyCommunes) {
            if (nearbyCommunes.length === 0) {
              return {
                location: location,
                qualityData: qualityData,
                nearbyData: [],
                timestamp: Date.now()
              };
            }
            
            return analyzeNearbyCommunes(nearbyCommunes).then(function(nearbyResults) {
              // Filtrer les resultats avec des donnees
              const validResults = nearbyResults.filter(function(result) {
                return result.qualityData && result.qualityData.data && result.qualityData.data.length > 0;
              });
              
              return {
                location: location,
                qualityData: qualityData,
                nearbyData: validResults,
                timestamp: Date.now()
              };
            });
          });
        } else {
          ui.showLoading('Etape 3: Analyse des donnees...');
          progressManager.updateProgress(90);
          
          const result = {
            location: location,
            qualityData: qualityData,
            nearbyData: [],
            timestamp: Date.now()
          };

          // Mise en cache
          cache.set(cacheKey, {
            data: result,
            timestamp: Date.now()
          });

          return result;
        }
      });
    }).then(function(result) {
      debug('Analyse terminee avec succes');
      progressManager.updateProgress(100);
      return result;
    }).catch(function(error) {
      debug('Erreur lors de l analyse: ' + error.message, 'error');
      throw error;
    });
  }

  // Generation du HTML des resultats
  function generateResultsHtml(location, qualityResponse, nearbyData) {
    const props = location.properties;
    let html = '';

    // Informations sur l adresse
    html += '<div class="water-result water-result--location">';
    html += '<h3 class="water-result__title">üìç Adresse analysee</h3>';
    html += '<div class="water-result__content">';
    html += '<p><strong>' + utils.sanitizeHtml(props.label) + '</strong></p>';
    html += '<p>üèòÔ∏è ' + utils.sanitizeHtml(props.city) + ' (' + (props.postcode || 'N/A') + ')</p>';
    html += '<p>üÜî Code INSEE: ' + props.citycode + '</p>';
    if (props.context) {
      html += '<p>üìç ' + utils.sanitizeHtml(props.context) + '</p>';
    }
    html += '</div></div>';

    // Donnees principales
    if (qualityResponse && qualityResponse.data && qualityResponse.data.length > 0) {
      const analyses = qualityResponse.data;
      const latest = analyses[0];
      const lastDate = utils.formatDate(latest.date_prelevement);

      // Informations generales
      html += '<div class="water-result water-result--quality">';
      html += '<h3 class="water-result__title">üìä Rapport Qualite - ' + utils.sanitizeHtml(props.city) + '</h3>';
      html += '<div class="water-result__content">';
      html += '<p><strong>Derniere analyse:</strong> ' + lastDate + '</p>';
      html += '<p><strong>Total analyses:</strong> ' + analyses.length + ' sur ' + CONFIG.dateRangeYears + ' ans</p>';
      if (latest.nom_distributeur) {
        html += '<p><strong>Distributeur:</strong> ' + utils.sanitizeHtml(latest.nom_distributeur) + '</p>';
      }
      if (latest.nom_installation) {
        html += '<p><strong>Installation:</strong> ' + utils.sanitizeHtml(latest.nom_installation) + '</p>';
      }
      html += '</div></div>';

      // Analyse de conformite
      const bactConform = analyses.filter(function(d) { return d.conformite_limites_bact_prelevement === 'C'; }).length;
      const bactTotal = analyses.filter(function(d) { return d.conformite_limites_bact_prelevement; }).length;
      
      const physConform = analyses.filter(function(d) { return d.conformite_limites_pc_prelevement === 'C'; }).length;
      const physTotal = analyses.filter(function(d) { return d.conformite_limites_pc_prelevement; }).length;

      if (bactTotal > 0 || physTotal > 0) {
        html += '<div class="water-result water-result--conformity">';
        html += '<h4 class="water-result__title">‚úÖ Conformite Reglementaire</h4>';
        html += '<div class="water-result__content">';

        if (bactTotal > 0) {
          const bactPercent = (bactConform / bactTotal) * 100;
          html += '<p>ü¶† Qualite bacteriologique: <strong>' + bactPercent.toFixed(1) + '%</strong> conforme (' + bactConform + '/' + bactTotal + ' analyses)</p>';
        }

        if (physTotal > 0) {
          const physPercent = (physConform / physTotal) * 100;
          html += '<p>‚öóÔ∏è Parametres physico-chimiques: <strong>' + physPercent.toFixed(1) + '%</strong> conforme (' + physConform + '/' + physTotal + ' analyses)</p>';
        }

        html += '</div></div>';
      }

    } else if (nearbyData && nearbyData.length > 0) {
      // Afficher les donnees des communes proches
      html += '<div class="water-result water-result--warning">';
      html += '<h4 class="water-result__title">‚ö†Ô∏è Aucune analyse directe disponible</h4>';
      html += '<div class="water-result__content">';
      html += '<p>Aucune donnee d analyse trouvee pour <strong>' + utils.sanitizeHtml(props.city) + '</strong>.</p>';
      html += '<p>Voici les analyses des communes les plus proches :</p>';
      html += '</div></div>';

      // Afficher les donnees des communes proches
      for (let i = 0; i < nearbyData.length; i++) {
        const nearbyResult = nearbyData[i];
        const commune = nearbyResult.commune;
        const qualityData = nearbyResult.qualityData;
        
        if (qualityData && qualityData.data && qualityData.data.length > 0) {
          const analyses = qualityData.data;
          const latest = analyses[0];
          const lastDate = utils.formatDate(latest.date_prelevement);
          
          html += '<div class="water-result water-result--nearby">';
          html += '<h4 class="water-result__title">üìç ' + utils.sanitizeHtml(commune.nom);
          html += '<span class="distance-badge">' + commune.distance.toFixed(1) + ' km</span></h4>';
          html += '<div class="water-result__content">';
          html += '<p><strong>Derniere analyse:</strong> ' + lastDate + '</p>';
          html += '<p><strong>Total analyses:</strong> ' + analyses.length + ' sur ' + CONFIG.dateRangeYears + ' ans</p>';
          
          if (latest.nom_distributeur) {
            html += '<p><strong>Distributeur:</strong> ' + utils.sanitizeHtml(latest.nom_distributeur) + '</p>';
          }
          
          // Conformite
          const bactConform = analyses.filter(function(d) { return d.conformite_limites_bact_prelevement === 'C'; }).length;
          const bactTotal = analyses.filter(function(d) { return d.conformite_limites_bact_prelevement; }).length;
          
          if (bactTotal > 0) {
            const bactPercent = (bactConform / bactTotal) * 100;
            html += '<p>ü¶† Qualite bacteriologique: <strong>' + bactPercent.toFixed(1) + '%</strong> conforme</p>';
          }
          
          html += '</div></div>';
        }
      }
    } else {
      html += '<div class="water-result water-result--warning">';
      html += '<h4 class="water-result__title">‚ö†Ô∏è Aucune analyse disponible</h4>';
      html += '<div class="water-result__content">';
      html += '<p>Aucune donnee d analyse trouvee pour <strong>' + utils.sanitizeHtml(props.city) + '</strong> ni dans les communes proches.</p>';
      html += '<p>Cette zone peut etre desservie par un reseau intercommunal ou les donnees peuvent ne pas etre encore disponibles.</p>';
      html += '<p>üí° Contactez votre mairie ou votre distributeur d eau pour plus d informations.</p>';
      html += '</div></div>';
    }

    // Recommandations
    html += '<div class="water-result water-result--recommendations">';
    html += '<h4 class="water-result__title">üí° Recommandations</h4>';
    html += '<div class="water-result__content">';
    html += '<p>‚Ä¢ üî¨ Analyses conformes aux normes francaises en vigueur</p>';
    html += '<p>‚Ä¢ üìû En cas de doute, contactez votre distributeur d eau</p>';
    html += '<p>‚Ä¢ üíß Consommez 1,5 a 2L d eau par jour selon vos besoins</p>';
    html += '<p>‚Ä¢ üå°Ô∏è Conservez l eau du robinet au frais et consommez-la rapidement</p>';
    html += '</div></div>';

    return html;
  }

  // Affichage d erreur
  function showError(message) {
    const html = '<div class="water-result water-result--error">' +
      '<h4 class="water-result__title">‚ùå Erreur</h4>' +
      '<div class="water-result__content">' +
      '<p>' + utils.sanitizeHtml(message) + '</p>' +
      '<p>üí° <strong>Suggestions :</strong></p>' +
      '<p>‚Ä¢ Essayez avec un code postal (ex: 01000)</p>' +
      '<p>‚Ä¢ Verifiez l orthographe de votre adresse</p>' +
      '<p>‚Ä¢ Verifiez votre connexion internet</p>' +
      '</div></div>';
    ui.showResults(html);
  }

  // Gestionnaire principal du formulaire
  function handleFormSubmit(event) {
    event.preventDefault();
    
    const input = document.querySelector(selectors.input);
    const address = input ? input.value.trim() : '';
    
    if (!address) {
      showError('Veuillez saisir une adresse');
      return;
    }

    ui.toggleButton(true, 'Analyse...');

    analyzeWater(address).then(function(result) {
      const html = generateResultsHtml(result.location, result.qualityData, result.nearbyData);
      ui.showResults(html);
    }).catch(function(error) {
      showError(error.message);
    }).finally(function() {
      ui.hideLoading();
      ui.toggleButton(false, '{{ section.settings.button_text | default: "Analyser" }}');
    });
  }

  // Gestionnaire des exemples
  function handleExampleClick(event) {
    const example = event.target.dataset.example;
    const input = document.querySelector(selectors.input);
    
    if (input && example) {
      input.value = example;
      input.focus();
      
      // Animation de feedback
      event.target.style.transform = 'scale(0.95)';
      setTimeout(function() {
        event.target.style.transform = '';
      }, 150);
    }
  }

  // Initialisation
  function init() {
    debug('Initialisation de l analyseur d eau');

    // Gestionnaire du formulaire
    const form = document.querySelector(selectors.form);
    if (form) {
      form.addEventListener('submit', handleFormSubmit);
    }

    // Gestionnaire des exemples
    const examples = document.querySelectorAll(selectors.examples);
    for (let i = 0; i < examples.length; i++) {
      examples[i].addEventListener('click', handleExampleClick);
    }

    // Gestionnaire Enter sur l input
    const input = document.querySelector(selectors.input);
    if (input) {
      input.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
          e.preventDefault();
          handleFormSubmit(e);
        }
      });
    }

    debug('Analyseur initialise et pret');
  }

  // Demarrage quand le DOM est pret
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }

})();
</script>

{% schema %}
{
  "name": "Analyseur Eau",
  "settings": [
    {
      "type": "header",
      "content": "Configuration generale"
    },
    {
      "type": "text",
      "id": "title",
      "label": "Titre principal",
      "default": "Analyseur Qualite Eau",
      "info": "Le titre affiche en haut de la section"
    },
    {
      "type": "text",
      "id": "subtitle",
      "label": "Sous-titre",
      "default": "Decouvrez la qualite de l eau a votre adresse",
      "info": "Description affichee sous le titre"
    },
    {
      "type": "text",
      "id": "search_title",
      "label": "Titre de la section recherche",
      "default": "Analysez votre eau",
      "info": "Titre de la zone de recherche"
    },
    {
      "type": "textarea",
      "id": "search_description",
      "label": "Description de la recherche",
      "default": "Saisissez votre adresse pour obtenir un rapport de qualite detaille",
      "info": "Texte explicatif pour la recherche"
    },
    {
      "type": "text",
      "id": "placeholder",
      "label": "Placeholder du champ adresse",
      "default": "01000 Bourg-en-Bresse",
      "info": "Texte d exemple dans le champ de saisie"
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "Texte du bouton",
      "default": "Analyser",
      "info": "Texte affiche sur le bouton d analyse"
    },
    {
      "type": "header",
      "content": "Icones et emojis"
    },
    {
      "type": "text",
      "id": "header_icon",
      "label": "Icone du header",
      "default": "üåä",
      "info": "Emoji affiche dans le titre principal"
    },
    {
      "type": "text",
      "id": "search_icon",
      "label": "Icone de recherche",
      "default": "üè†",
      "info": "Emoji affiche dans le titre de recherche"
    },
    {
      "type": "text",
      "id": "button_icon",
      "label": "Icone du bouton",
      "default": "üîç",
      "info": "Emoji affiche dans le bouton"
    },
    {
      "type": "header",
      "content": "Couleurs et design"
    },
    {
      "type": "color",
      "id": "primary_color",
      "label": "Couleur primaire",
      "default": "#2563eb",
      "info": "Couleur principale (header, boutons)"
    },
    {
      "type": "color",
      "id": "secondary_color",
      "label": "Couleur secondaire",
      "default": "#1e40af",
      "info": "Couleur secondaire (hover, accents)"
    },
    {
      "type": "color",
      "id": "accent_color",
      "label": "Couleur d accent",
      "default": "#3b82f6",
      "info": "Couleur d accent (elements speciaux)"
    },
    {
      "type": "color",
      "id": "success_color",
      "label": "Couleur de succes",
      "default": "#10b981",
      "info": "Couleur pour les resultats positifs"
    },
    {
      "type": "color",
      "id": "warning_color",
      "label": "Couleur d avertissement",
      "default": "#f59e0b",
      "info": "Couleur pour les avertissements"
    },
    {
      "type": "color",
      "id": "error_color",
      "label": "Couleur d erreur",
      "default": "#ef4444",
      "info": "Couleur pour les erreurs"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Couleur du texte",
      "default": "#1f2937",
      "info": "Couleur du texte principal"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Couleur de fond",
      "default": "#ffffff",
      "info": "Couleur de fond de la section"
    },
    {
      "type": "text",
      "id": "shadow_color",
      "label": "Couleur de l ombre",
      "default": "rgba(0, 0, 0, 0.1)",
      "info": "Couleur de l ombre (format rgba)"
    },
    {
      "type": "range",
      "id": "border_radius",
      "label": "Arrondi des bords",
      "min": 0,
      "max": 50,
      "step": 2,
      "default": 16,
      "unit": "px",
      "info": "Arrondi des coins de la section"
    },
    {
      "type": "range",
      "id": "section_padding",
      "label": "Espacement interne",
      "min": 1,
      "max": 5,
      "step": 0.5,
      "default": 2,
      "unit": "rem",
      "info": "Espacement interne de la section"
    },
    {
      "type": "header",
      "content": "Animation de chargement"
    },
    {
      "type": "select",
      "id": "loading_animation",
      "label": "Type d animation",
      "options": [
        {
          "value": "glass",
          "label": "Verre qui se remplit"
        },
        {
          "value": "progress",
          "label": "Barre de progression"
        },
        {
          "value": "ripple",
          "label": "Ondulations (Ripple)"
        },
        {
          "value": "dots",
          "label": "Points animes"
        }
      ],
      "default": "glass",
      "info": "Choisissez le style d animation pendant le chargement"
    },
    {
      "type": "header",
      "content": "Fonctionnalites"
    },
    {
      "type": "checkbox",
      "id": "show_examples",
      "label": "Afficher les exemples",
      "default": true,
      "info": "Affiche les boutons d exemples d adresses"
    },
    {
      "type": "text",
      "id": "examples",
      "label": "Exemples d adresses",
      "default": "01000,Gex,Bourg-en-Bresse",
      "info": "Liste d exemples separes par des virgules"
    },
    {
      "type": "range",
      "id": "proximity_radius",
      "label": "Rayon de recherche proximite",
      "min": 10,
      "max": 100,
      "step": 10,
      "default": 50,
      "unit": "km",
      "info": "Distance max pour chercher des communes proches"
    },
    {
      "type": "range",
      "id": "max_nearby_communes",
      "label": "Nombre max de communes proches",
      "min": 3,
      "max": 10,
      "step": 1,
      "default": 5,
      "info": "Nombre maximum de communes proches a analyser"
    },
    {
      "type": "header",
      "content": "Options avancees"
    },
    {
      "type": "checkbox",
      "id": "debug_mode",
      "label": "Mode debug",
      "default": false,
      "info": "Affiche les informations de debug (pour le developpement)"
    }
  ],
  "presets": [
    {
      "name": "Analyseur Eau"
    }
  ]
}
{% endschema %}