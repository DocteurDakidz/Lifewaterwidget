<!-- Analyseur Eau Potable - Version Am√©lior√©e avec Email et Design -->
<div class="water-analyzer" data-section-id="{{ section.id }}" style="
  --primary-color: {{ section.settings.primary_color | default: '#2563eb' }};
  --secondary-color: {{ section.settings.secondary_color | default: '#1e40af' }};
  --accent-color: {{ section.settings.accent_color | default: '#3b82f6' }};
  --success-color: {{ section.settings.success_color | default: '#10b981' }};
  --warning-color: {{ section.settings.warning_color | default: '#f59e0b' }};
  --error-color: {{ section.settings.error_color | default: '#ef4444' }};
  --text-color: {{ section.settings.text_color | default: '#1f2937' }};
  --text-light: {{ section.settings.text_light_color | default: '#6b7280' }};
  --background-color: {{ section.settings.background_color | default: '#ffffff' }};
  --surface-color: {{ section.settings.surface_color | default: '#f8fafc' }};
  --border-color: {{ section.settings.border_color | default: '#e2e8f0' }};
  --border-radius: {{ section.settings.border_radius | default: 16 }}px;
  --section-padding: {{ section.settings.section_padding | default: 2 }}rem;
  --shadow-color: {{ section.settings.shadow_color | default: 'rgba(0, 0, 0, 0.1)' }};
">
  
  {% if section.settings.show_header %}
  <!-- Header -->
  <header class="water-analyzer__header" style="
    background: {{ section.settings.header_background | default: 'var(--primary-color)' }};
    color: {{ section.settings.header_text_color | default: '#ffffff' }};
  ">
    <h2 class="water-analyzer__title">
      {% if section.settings.show_header_icon %}
        <span class="water-analyzer__icon">{{ section.settings.header_icon | default: 'üåä' }}</span>
      {% endif %}
      {{ section.settings.title | default: 'Analyseur Qualite Eau Potable' }}
    </h2>
    {% if section.settings.show_subtitle %}
      <p class="water-analyzer__subtitle">
        {{ section.settings.subtitle | default: 'Decouvrez la qualite de l eau a votre adresse' }}
      </p>
    {% endif %}
  </header>
  {% endif %}

  <!-- Main Content -->
  <div class="water-analyzer__content">
    
    <!-- Email Collection Form -->
    <section class="water-analyzer__email-section" data-email-section>
      <div class="water-analyzer__email-card">
        <h3 class="water-analyzer__email-title">
          <span class="water-analyzer__icon">üìß</span>
          {{ section.settings.email_title | default: 'Recevez votre rapport par email' }}
        </h3>
        <p class="water-analyzer__email-description">
          {{ section.settings.email_description | default: 'Saisissez votre email pour recevoir le rapport detaille de qualite de l eau' }}
        </p>
        
        <form class="water-analyzer__email-form" data-email-form>
          <div class="water-analyzer__email-group">
            <input 
              type="email" 
              id="email-input-{{ section.id }}" 
              class="water-analyzer__email-input"
              placeholder="{{ section.settings.email_placeholder | default: 'votre@email.com' }}"
              required
              aria-label="Adresse email"
            >
            <button 
              type="submit"
              class="water-analyzer__email-button"
              data-email-button
            >
              <span class="water-analyzer__button-icon">‚úâÔ∏è</span>
              <span class="water-analyzer__button-text">{{ section.settings.email_button_text | default: 'Continuer' }}</span>
            </button>
          </div>
          
          {% if section.settings.show_privacy_notice %}
          <p class="water-analyzer__privacy-notice">
            üîí {{ section.settings.privacy_text | default: 'Vos donnees sont protegees et ne seront jamais partagees' }}
          </p>
          {% endif %}
        </form>
      </div>
    </section>

    <!-- Search Section (hidden initially) -->
    <section class="water-analyzer__search" data-search-section style="display: none;">
      <h3 class="water-analyzer__search-title">
        {% if section.settings.show_search_icon %}
          <span class="water-analyzer__icon">{{ section.settings.search_icon | default: 'üè†' }}</span>
        {% endif %}
        {{ section.settings.search_title | default: 'Analysez votre eau' }}
      </h3>
      <p class="water-analyzer__search-description">
        {{ section.settings.search_description | default: 'Saisissez votre adresse pour obtenir un rapport de qualite detaille' }}
      </p>
      
      <!-- Map Toggle -->
      {% if section.settings.enable_map %}
      <div class="water-analyzer__map-toggle">
        <button type="button" class="water-analyzer__map-btn" data-map-toggle>
          <span class="water-analyzer__map-icon">üó∫Ô∏è</span>
          <span class="water-analyzer__map-text">{{ section.settings.map_button_text | default: 'Utiliser la carte' }}</span>
        </button>
      </div>
      {% endif %}

      <!-- Interactive Map -->
      {% if section.settings.enable_map %}
      <div class="water-analyzer__map-container" data-map-container style="display: none;">
        <div class="water-analyzer__map-header">
          <h4>üó∫Ô∏è {{ section.settings.map_instruction | default: 'Cliquez sur la carte pour selectionner votre adresse' }}</h4>
          <button type="button" class="water-analyzer__map-close" data-map-close>‚úï</button>
        </div>
        <div id="water-map-{{ section.id }}" class="water-analyzer__map" data-map></div>
        <div class="water-analyzer__map-info" data-map-info style="display: none;">
          <p><strong>Adresse selectionnee:</strong> <span data-selected-address></span></p>
          <button type="button" class="water-analyzer__map-confirm" data-map-confirm>
            {{ section.settings.map_confirm_text | default: 'Analyser cette adresse' }}
          </button>
        </div>
      </div>
      {% endif %}
      
      <form class="water-analyzer__form" data-water-form>
        <div class="water-analyzer__input-group">
          <input 
            type="text" 
            id="water-input-{{ section.id }}" 
            class="water-analyzer__input"
            placeholder="{{ section.settings.placeholder | default: '01000 Bourg-en-Bresse' }}"
            autocomplete="address-line1"
            required
            aria-label="Adresse a analyser"
          >
          <button 
            type="submit"
            class="water-analyzer__button"
            data-water-button
            aria-label="Lancer l analyse"
          >
            <span class="water-analyzer__button-icon">{{ section.settings.button_icon | default: 'üîç' }}</span>
            <span class="water-analyzer__button-text">{{ section.settings.button_text | default: 'Analyser' }}</span>
          </button>
        </div>

        <!-- Examples -->
        {% if section.settings.show_examples %}
        <div class="water-analyzer__examples">
          <span class="water-analyzer__examples-label">üí° Exemples :</span>
          {% assign examples = section.settings.examples | default: '01000,Gex,Bourg-en-Bresse' | split: ',' %}
          {% for example in examples %}
            <button 
              type="button" 
              class="water-analyzer__example"
              data-example="{{ example | strip }}"
            >
              {{ example | strip }}
            </button>
          {% endfor %}
        </div>
        {% endif %}
      </form>
    </section>

    <!-- Debug Info (hidden by default) -->
    {% if section.settings.debug_mode %}
    <div class="water-analyzer__debug" data-debug-info style="display: none;">
      <strong>Debug :</strong> 
      <span data-debug-text>En attente...</span>
    </div>
    {% endif %}

    <!-- Loading State with Animation -->
    <div class="water-analyzer__loading" data-loading style="display: none;">
      <div class="water-analyzer__loading-animation" data-loading-animation>
        <!-- Animation will be inserted here by JavaScript -->
      </div>
      <h4 class="water-analyzer__loading-title">{{ section.settings.loading_icon | default: 'üîç' }} Analyse en cours...</h4>
      <p class="water-analyzer__loading-text" data-loading-text>
        Initialisation...
      </p>
      <div class="water-analyzer__progress-bar" data-progress-bar>
        <div class="water-analyzer__progress-fill" data-progress-fill></div>
        <span class="water-analyzer__progress-text" data-progress-text>0%</span>
      </div>
    </div>

    <!-- Results -->
    <div class="water-analyzer__results" data-results style="display: none;" role="region" aria-live="polite">
      <!-- Results will be populated by JavaScript -->
    </div>
  </div>
</div>

<style>
  .water-analyzer {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
    background: var(--background-color);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
    overflow: hidden;
    box-shadow: 0 10px 25px var(--shadow-color);
    margin: var(--section-padding) 0;
    color: var(--text-color);
    max-width: 100%;
    position: relative;
  }

  .water-analyzer__header {
    padding: calc(var(--section-padding) * 1.5) var(--section-padding);
    text-align: center;
    border-bottom: 1px solid var(--border-color);
  }

  .water-analyzer__title {
    font-size: clamp(1.5rem, 4vw, 2.25rem);
    margin: 0 0 0.75rem 0;
    font-weight: 700;
    line-height: 1.2;
  }

  .water-analyzer__subtitle {
    margin: 0;
    opacity: 0.9;
    font-size: clamp(0.9rem, 2.5vw, 1.1rem);
    font-weight: 400;
  }

  .water-analyzer__icon {
    display: inline-block;
    margin-right: 0.5rem;
  }

  .water-analyzer__content {
    padding: var(--section-padding);
  }

  /* Email Collection Section */
  .water-analyzer__email-section {
    margin-bottom: var(--section-padding);
  }

  .water-analyzer__email-card {
    background: var(--surface-color);
    border: 1px solid var(--border-color);
    border-radius: calc(var(--border-radius) * 0.75);
    padding: calc(var(--section-padding) * 1.5);
    text-align: center;
  }

  .water-analyzer__email-title {
    margin: 0 0 1rem 0;
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--text-color);
  }

  .water-analyzer__email-description {
    margin: 0 0 2rem 0;
    color: var(--text-light);
    font-size: 1rem;
    line-height: 1.5;
  }

  .water-analyzer__email-form {
    max-width: 400px;
    margin: 0 auto;
  }

  .water-analyzer__email-group {
    display: flex;
    gap: 0.75rem;
    margin-bottom: 1rem;
    flex-wrap: wrap;
  }

  .water-analyzer__email-input {
    flex: 1;
    min-width: 200px;
    padding: 1rem 1.25rem;
    border: 2px solid var(--border-color);
    border-radius: calc(var(--border-radius) * 0.5);
    font-size: 1rem;
    background: var(--background-color);
    color: var(--text-color);
    outline: none;
    transition: all 0.3s ease;
  }

  .water-analyzer__email-input:focus {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
  }

  .water-analyzer__email-button {
    padding: 1rem 2rem;
    background: var(--primary-color);
    color: white;
    border: none;
    border-radius: calc(var(--border-radius) * 0.5);
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    white-space: nowrap;
  }

  .water-analyzer__email-button:hover:not(:disabled) {
    background: var(--secondary-color);
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(37, 99, 235, 0.3);
  }

  .water-analyzer__privacy-notice {
    margin: 0;
    font-size: 0.875rem;
    color: var(--text-light);
    text-align: center;
  }

  /* Search Section */
  .water-analyzer__search {
    background: var(--surface-color);
    border: 1px solid var(--border-color);
    padding: var(--section-padding);
    border-radius: calc(var(--border-radius) * 0.75);
    margin-bottom: var(--section-padding);
  }

  .water-analyzer__search-title {
    margin: 0 0 1rem 0;
    font-size: 1.3rem;
    font-weight: 600;
    color: var(--text-color);
  }

  .water-analyzer__search-description {
    margin: 0 0 1.5rem 0;
    color: var(--text-light);
  }

  /* Map Toggle Button */
  .water-analyzer__map-toggle {
    margin-bottom: 1.5rem;
    text-align: center;
  }

  .water-analyzer__map-btn {
    background: var(--accent-color);
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: calc(var(--border-radius) * 0.5);
    cursor: pointer;
    transition: all 0.3s ease;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    font-weight: 600;
  }

  .water-analyzer__map-btn:hover {
    background: var(--primary-color);
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(59, 130, 246, 0.3);
  }

  /* Map Container */
  .water-analyzer__map-container {
    background: var(--background-color);
    border: 1px solid var(--border-color);
    border-radius: calc(var(--border-radius) * 0.75);
    margin-bottom: 1.5rem;
    overflow: hidden;
    box-shadow: 0 4px 12px var(--shadow-color);
  }

  .water-analyzer__map-header {
    background: var(--surface-color);
    border-bottom: 1px solid var(--border-color);
    padding: 1rem 1.5rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .water-analyzer__map-header h4 {
    margin: 0;
    font-size: 1rem;
    color: var(--text-color);
  }

  .water-analyzer__map-close {
    background: none;
    border: none;
    color: var(--text-light);
    font-size: 1.5rem;
    cursor: pointer;
    padding: 0;
    width: 30px;
    height: 30px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
  }

  .water-analyzer__map-close:hover {
    background: var(--error-color);
    color: white;
  }

  .water-analyzer__map {
    height: 400px;
    width: 100%;
    background: var(--surface-color);
    position: relative;
  }

  .water-analyzer__map-info {
    padding: 1rem 1.5rem;
    background: var(--surface-color);
    border-top: 1px solid var(--border-color);
  }

  .water-analyzer__map-info p {
    margin: 0 0 1rem 0;
    color: var(--text-color);
  }

  .water-analyzer__map-confirm {
    background: var(--success-color);
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: calc(var(--border-radius) * 0.5);
    cursor: pointer;
    font-weight: 600;
    transition: all 0.3s ease;
  }

  .water-analyzer__map-confirm:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(16, 185, 129, 0.3);
  }

  .water-analyzer__form {
    width: 100%;
  }

  .water-analyzer__input-group {
    display: flex;
    gap: 0.75rem;
    align-items: stretch;
    flex-wrap: wrap;
    margin-bottom: 1rem;
  }

  .water-analyzer__input {
    flex: 1;
    min-width: 250px;
    padding: 1rem 1.25rem;
    border: 2px solid var(--border-color);
    border-radius: calc(var(--border-radius) * 0.5);
    font-size: 1rem;
    background: var(--background-color);
    color: var(--text-color);
    outline: none;
    transition: all 0.3s ease;
  }

  .water-analyzer__input:focus {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
  }

  .water-analyzer__button {
    padding: 1rem 1.5rem;
    background: var(--primary-color);
    color: white;
    border: none;
    border-radius: calc(var(--border-radius) * 0.5);
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    white-space: nowrap;
  }

  .water-analyzer__button:hover:not(:disabled) {
    background: var(--secondary-color);
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(37, 99, 235, 0.3);
  }

  .water-analyzer__button:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
  }

  .water-analyzer__examples {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.9rem;
  }

  .water-analyzer__examples-label {
    font-weight: 600;
    margin-right: 0.5rem;
    color: var(--text-color);
  }

  .water-analyzer__example {
    background: var(--background-color);
    color: var(--text-color);
    border: 1px solid var(--border-color);
    padding: 0.375rem 0.75rem;
    border-radius: calc(var(--border-radius) * 0.25);
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 0.85rem;
  }

  .water-analyzer__example:hover {
    background: var(--accent-color);
    color: white;
    border-color: var(--accent-color);
    transform: translateY(-1px);
  }

  .water-analyzer__debug {
    background: var(--surface-color);
    border: 1px solid var(--border-color);
    border-left: 4px solid var(--accent-color);
    padding: 1rem;
    border-radius: calc(var(--border-radius) * 0.5);
    margin-bottom: 1.5rem;
    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
    font-size: 0.8rem;
  }

  /* Loading State */
  .water-analyzer__loading {
    text-align: center;
    padding: 3rem 1rem;
    background: var(--surface-color);
    border: 1px solid var(--border-color);
    border-radius: calc(var(--border-radius) * 0.75);
  }

  .water-analyzer__loading-animation {
    margin: 0 auto 2rem;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .water-analyzer__loading-title {
    margin: 0 0 1rem 0;
    color: var(--text-color);
    font-size: 1.2rem;
    font-weight: 600;
  }

  .water-analyzer__loading-text {
    margin: 0 0 1.5rem 0;
    color: var(--text-light);
  }

  /* Progress Bar */
  .water-analyzer__progress-bar {
    position: relative;
    width: 100%;
    max-width: 300px;
    height: 8px;
    background: var(--border-color);
    border-radius: 4px;
    margin: 0 auto;
    overflow: hidden;
  }

  .water-analyzer__progress-fill {
    height: 100%;
    background: linear-gradient(90deg, var(--primary-color), var(--accent-color));
    border-radius: 4px;
    width: 0%;
    transition: width 0.3s ease;
    position: relative;
  }

  .water-analyzer__progress-fill::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
    animation: progress-shine 2s infinite;
  }

  .water-analyzer__progress-text {
    position: absolute;
    top: -25px;
    left: 50%;
    transform: translateX(-50%);
    font-size: 0.875rem;
    font-weight: 600;
    color: var(--text-color);
  }

  /* Loading Animations */
  .loading-glass {
    width: 60px;
    height: 80px;
    position: relative;
    border: 3px solid var(--primary-color);
    border-radius: 0 0 30px 30px;
    background: linear-gradient(to top, var(--accent-color) 0%, transparent 100%);
    overflow: hidden;
  }

  .loading-glass::before {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: var(--primary-color);
    height: 0%;
    animation: fill-glass 3s ease-in-out infinite;
    border-radius: 0 0 27px 27px;
  }

  .loading-glass::after {
    content: '';
    position: absolute;
    top: 10px;
    left: 10px;
    width: 8px;
    height: 8px;
    background: rgba(255,255,255,0.6);
    border-radius: 50%;
    animation: bubble 2s ease-in-out infinite;
  }

  .loading-ripple {
    width: 60px;
    height: 60px;
    position: relative;
  }

  .loading-ripple div {
    position: absolute;
    border: 2px solid var(--primary-color);
    border-radius: 50%;
    animation: ripple 1.5s ease-out infinite;
  }

  .loading-ripple div:nth-child(2) {
    animation-delay: 0.5s;
  }

  .loading-ripple div:nth-child(3) {
    animation-delay: 1s;
  }

  .loading-dots {
    display: flex;
    gap: 8px;
  }

  .loading-dots div {
    width: 12px;
    height: 12px;
    background: var(--primary-color);
    border-radius: 50%;
    animation: bounce-dots 1.4s ease-in-out infinite both;
  }

  .loading-dots div:nth-child(1) { animation-delay: -0.32s; }
  .loading-dots div:nth-child(2) { animation-delay: -0.16s; }
  .loading-dots div:nth-child(3) { animation-delay: 0s; }
  .loading-dots div:nth-child(4) { animation-delay: 0.16s; }
  .loading-dots div:nth-child(5) { animation-delay: 0.32s; }

  /* Results */
  .water-analyzer__results {
    animation: fade-in 0.5s ease-out;
  }

  .water-result {
    border-radius: calc(var(--border-radius) * 0.6);
    padding: 1.5rem;
    margin: 1rem 0;
    border: 1px solid var(--border-color);
  }

  .water-result--location {
    background: var(--surface-color);
    border-left: 4px solid var(--primary-color);
  }

  .water-result--quality {
    background: var(--surface-color);
    border-left: 4px solid var(--success-color);
  }

  .water-result--conformity {
    background: rgba(16, 185, 129, 0.1);
    border-left: 4px solid var(--success-color);
  }

  .water-result--recommendations {
    background: rgba(245, 158, 11, 0.1);
    border-left: 4px solid var(--warning-color);
  }

  .water-result--warning {
    background: rgba(245, 158, 11, 0.1);
    color: var(--text-color);
    border-left: 4px solid var(--warning-color);
  }

  .water-result--error {
    background: rgba(239, 68, 68, 0.1);
    color: var(--text-color);
    border-left: 4px solid var(--error-color);
  }

  .water-result--proximity {
    background: rgba(59, 130, 246, 0.1);
    border-left: 4px solid var(--accent-color);
  }

  .water-result__title {
    margin: 0 0 1rem 0;
    font-size: 1.2rem;
    font-weight: 600;
    color: var(--text-color);
  }

  .water-result__content p {
    margin: 0.5rem 0;
    color: var(--text-color);
  }

  .water-result__content p:first-child {
    margin-top: 0;
  }

  .water-result__content p:last-child {
    margin-bottom: 0;
  }

  .proximity-badge {
    display: inline-block;
    background: var(--accent-color);
    color: white;
    padding: 0.25rem 0.75rem;
    border-radius: calc(var(--border-radius) * 0.25);
    font-size: 0.8rem;
    font-weight: 600;
    margin-left: 0.5rem;
  }

  /* Animations */
  @keyframes fill-glass {
    0%, 100% { height: 20%; }
    50% { height: 80%; }
  }

  @keyframes bubble {
    0%, 100% { transform: translateY(0) scale(1); opacity: 0.7; }
    50% { transform: translateY(-20px) scale(1.2); opacity: 1; }
  }

  @keyframes ripple {
    0% {
      top: 28px;
      left: 28px;
      width: 0;
      height: 0;
      opacity: 1;
    }
    100% {
      top: 0;
      left: 0;
      width: 56px;
      height: 56px;
      opacity: 0;
    }
  }

  @keyframes bounce-dots {
    0%, 80%, 100% {
      transform: scale(0);
    }
    40% {
      transform: scale(1);
    }
  }

  @keyframes progress-shine {
    0% { transform: translateX(-100%); }
    100% { transform: translateX(100%); }
  }

  @keyframes fade-in {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .water-analyzer {
      margin: 1rem 0;
      border-radius: calc(var(--border-radius) * 0.75);
    }

    .water-analyzer__header {
      padding: 1.5rem 1rem;
    }

    .water-analyzer__content {
      padding: 1.5rem 1rem;
    }

    .water-analyzer__search {
      padding: 1.5rem;
    }

    .water-analyzer__input-group,
    .water-analyzer__email-group {
      flex-direction: column;
    }

    .water-analyzer__input,
    .water-analyzer__email-input {
      min-width: auto;
    }

    .water-analyzer__examples {
      justify-content: center;
    }

    .water-analyzer__map {
      height: 300px;
    }
  }

  @media (max-width: 480px) {
    .water-analyzer__examples {
      flex-direction: column;
      align-items: flex-start;
    }

    .water-analyzer__examples-label {
      margin-bottom: 0.5rem;
    }

    .water-analyzer__map-header {
      flex-direction: column;
      gap: 0.5rem;
      text-align: center;
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .water-analyzer {
      border: 2px solid var(--text-color);
    }

    .water-analyzer__button,
    .water-analyzer__email-button {
      border: 2px solid var(--text-color);
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .water-analyzer__button:hover,
    .water-analyzer__email-button:hover,
    .water-analyzer__example:hover {
      transform: none;
    }

    .loading-glass::before,
    .loading-glass::after,
    .loading-ripple div,
    .loading-dots div {
      animation: none;
    }

    .water-analyzer__results {
      animation: none;
    }
  }
</style>

<!-- Leaflet CSS pour la carte -->
{% if section.settings.enable_map %}
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" 
      integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" 
      crossorigin="" />
{% endif %}

<script>
(function() {
  'use strict';
  
  // Configuration avec systeme de fallback CORS ameliore
  const CORS_METHODS = [
    {
      name: 'AllOrigins',
      proxy: 'https://api.allorigins.win/get?url=',
      parse: function(data) { return JSON.parse(data.contents); },
      timeout: 10000
    },
    {
      name: 'ProxyAnywhereHeroku', 
      proxy: 'https://cors-anywhere.herokuapp.com/',
      parse: function(data) { return data; },
      timeout: 8000
    },
    {
      name: 'ThingProxy',
      proxy: 'https://thingproxy.freeboard.io/fetch/',
      parse: function(data) { return data; },
      timeout: 8000
    },
    {
      name: 'ProxyCors',
      proxy: 'https://proxy.cors.sh/',
      parse: function(data) { return data; },
      timeout: 8000
    },
    {
      name: 'Direct',
      proxy: '',
      parse: function(data) { return data; },
      timeout: 5000
    }
  ];

  // Configuration globale
  const CONFIG = {
    sectionId: '{{ section.id }}',
    debugMode: {{ section.settings.debug_mode | default: false }},
    enableMap: {{ section.settings.enable_map | default: false }},
    loadingAnimation: '{{ section.settings.loading_animation | default: "glass" }}',
    proximityRadius: {{ section.settings.proximity_radius | default: 25 }},
    maxRetries: 3,
    cacheTimeout: 300000, // 5 minutes
    dateRangeYears: 2
  };

  // Variables globales
  let map = null;
  let marker = null;
  let selectedAddress = null;
  let userEmail = null;
  let currentProgress = 0;

  // Cache simple pour eviter les requetes repetees
  const cache = new Map();

  // Selecteurs DOM
  const selectors = {
    emailSection: '[data-email-section]',
    emailForm: '[data-email-form]',
    emailInput: '#email-input-' + CONFIG.sectionId,
    emailButton: '[data-email-button]',
    searchSection: '[data-search-section]',
    form: '[data-water-form]',
    input: '#water-input-' + CONFIG.sectionId,
    button: '[data-water-button]',
    loading: '[data-loading]',
    loadingAnimation: '[data-loading-animation]',
    loadingText: '[data-loading-text]',
    progressBar: '[data-progress-bar]',
    progressFill: '[data-progress-fill]',
    progressText: '[data-progress-text]',
    results: '[data-results]',
    debugInfo: '[data-debug-info]',
    debugText: '[data-debug-text]',
    examples: '[data-example]',
    mapToggle: '[data-map-toggle]',
    mapContainer: '[data-map-container]',
    mapElement: '[data-map]',
    mapClose: '[data-map-close]',
    mapInfo: '[data-map-info]',
    mapConfirm: '[data-map-confirm]',
    selectedAddress: '[data-selected-address]'
  };

  // Utilitaires
  const utils = {
    debounce: function(func, wait) {
      let timeout;
      return function executedFunction() {
        const args = arguments;
        const later = function() {
          clearTimeout(timeout);
          func.apply(this, args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    },

    sanitizeHtml: function(str) {
      const div = document.createElement('div');
      div.textContent = str;
      return div.innerHTML;
    },

    formatDate: function(dateString) {
      return new Date(dateString).toLocaleDateString('fr-FR', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
    },

    getCacheKey: function(address) {
      return 'water_analysis_' + address.toLowerCase().replace(/\s+/g, '_');
    },

    validateEmail: function(email) {
      const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return re.test(email);
    },

    calculateDistance: function(lat1, lon1, lat2, lon2) {
      const R = 6371; // Rayon de la Terre en km
      const dLat = (lat2 - lat1) * Math.PI / 180;
      const dLon = (lon2 - lon1) * Math.PI / 180;
      const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
                Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                Math.sin(dLon/2) * Math.sin(dLon/2);
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
      return R * c;
    }
  };

  // Fonction de debug amelioree
  function debug(message, type) {
    type = type || 'info';
    const timestamp = new Date().toLocaleTimeString('fr-FR');
    const logMessage = '[' + timestamp + '] üåä Water Analyzer: ' + message;
    
    console[type](logMessage);
    
    if (CONFIG.debugMode) {
      const debugEl = document.querySelector(selectors.debugInfo);
      const debugText = document.querySelector(selectors.debugText);
      if (debugEl && debugText) {
        debugEl.style.display = 'block';
        debugText.textContent = timestamp + ' - ' + message;
      }
    }
  }

  // Gestionnaire des animations de chargement
  const loadingAnimations = {
    glass: function() {
      return '<div class="loading-glass"></div>';
    },
    
    progress: function() {
      return '<div style="width: 60px; height: 8px; background: var(--border-color); border-radius: 4px; overflow: hidden;"><div style="height: 100%; background: var(--primary-color); width: 0%; transition: width 0.3s ease;" data-simple-progress></div></div>';
    },
    
    ripple: function() {
      return '<div class="loading-ripple"><div></div><div></div><div></div></div>';
    },
    
    dots: function() {
      return '<div class="loading-dots"><div></div><div></div><div></div><div></div><div></div></div>';
    }
  };

  // Gestion de la progression
  const progressManager = {
    steps: [
      { progress: 20, text: 'Validation de l adresse...' },
      { progress: 40, text: 'Recherche des donnees...' },
      { progress: 60, text: 'Analyse de la qualite...' },
      { progress: 80, text: 'Preparation du rapport...' },
      { progress: 100, text: 'Finalisation...' }
    ],
    
    currentStep: 0,
    
    start: function() {
      this.currentStep = 0;
      this.update(0, 'Initialisation...');
    },
    
    next: function() {
      if (this.currentStep < this.steps.length) {
        const step = this.steps[this.currentStep];
        this.update(step.progress, step.text);
        this.currentStep++;
      }
    },
    
    update: function(progress, text) {
      const progressFill = document.querySelector(selectors.progressFill);
      const progressText = document.querySelector(selectors.progressText);
      const loadingText = document.querySelector(selectors.loadingText);
      
      if (progressFill) {
        progressFill.style.width = progress + '%';
      }
      
      if (progressText) {
        progressText.textContent = progress + '%';
      }
      
      if (loadingText && text) {
        loadingText.textContent = text;
      }
      
      // Animation simple pour la barre de progression alternative
      const simpleProgress = document.querySelector('[data-simple-progress]');
      if (simpleProgress) {
        simpleProgress.style.width = progress + '%';
      }
    },
    
    complete: function() {
      this.update(100, 'Termine !');
    }
  };

  // Gestion de la carte interactive
  const mapManager = {
    init: function() {
      if (!CONFIG.enableMap) return;
      
      debug('Initialisation de la carte interactive');
      
      // Charger Leaflet si pas deja charge
      if (typeof L === 'undefined') {
        const script = document.createElement('script');
        script.src = 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.js';
        script.integrity = 'sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=';
        script.crossOrigin = '';
        script.onload = function() {
          mapManager.setupMap();
        };
        script.onerror = function() {
          debug('Erreur lors du chargement de Leaflet', 'error');
        };
        document.head.appendChild(script);
      } else {
        mapManager.setupMap();
      }
    },

    setupMap: function() {
      const mapElement = document.querySelector(selectors.mapElement);
      if (!mapElement) {
        debug('Element de carte non trouve', 'error');
        return;
      }

      try {
        // Initialiser la carte centree sur la France
        map = L.map(mapElement.id).setView([46.603354, 1.888334], 6);
        
        // Ajouter les tuiles OpenStreetMap
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
          attribution: '¬© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
          maxZoom: 19
        }).addTo(map);

        // Gestionnaire de clic sur la carte
        map.on('click', mapManager.onMapClick);
        
        debug('Carte initialisee avec succes');
      } catch (error) {
        debug('Erreur lors de l initialisation de la carte: ' + error.message, 'error');
      }
    },

    onMapClick: function(e) {
      const lat = e.latlng.lat;
      const lng = e.latlng.lng;
      
      debug('Clic sur la carte: ' + lat + ', ' + lng);
      
      // Supprimer le marqueur precedent
      if (marker) {
        map.removeLayer(marker);
      }
      
      // Ajouter un nouveau marqueur
      marker = L.marker([lat, lng]).addTo(map);
      
      // Geocodage inverse pour obtenir l'adresse
      mapManager.reverseGeocode(lat, lng);
    },

    reverseGeocode: function(lat, lng) {
      const url = 'https://api-adresse.data.gouv.fr/reverse/?lon=' + lng + '&lat=' + lat;
      
      fetchWithFallback(url).then(function(data) {
        if (data && data.features && data.features.length > 0) {
          const address = data.features[0].properties.label;
          selectedAddress = address;
          
          // Afficher l'adresse selectionnee
          const addressEl = document.querySelector(selectors.selectedAddress);
          const mapInfo = document.querySelector(selectors.mapInfo);
          
          if (addressEl && mapInfo) {
            addressEl.textContent = address;
            mapInfo.style.display = 'block';
          }
          
          debug('Adresse trouvee: ' + address);
        } else {
          debug('Aucune adresse trouvee pour ces coordonnees', 'warn');
        }
      }).catch(function(error) {
        debug('Erreur lors du geocodage inverse: ' + error.message, 'error');
      });
    },

    show: function() {
      const container = document.querySelector(selectors.mapContainer);
      if (container) {
        container.style.display = 'block';
        
        // Redimensionner la carte apres affichage
        setTimeout(function() {
          if (map) {
            map.invalidateSize();
          }
        }, 100);
      }
    },

    hide: function() {
      const container = document.querySelector(selectors.mapContainer);
      if (container) {
        container.style.display = 'none';
      }
      
      // Reset
      selectedAddress = null;
      const mapInfo = document.querySelector(selectors.mapInfo);
      if (mapInfo) {
        mapInfo.style.display = 'none';
      }
    },

    confirmAddress: function() {
      if (selectedAddress) {
        const input = document.querySelector(selectors.input);
        if (input) {
          input.value = selectedAddress;
        }
        mapManager.hide();
        
        // Lancer automatiquement l'analyse
        setTimeout(function() {
          handleFormSubmit({ preventDefault: function() {} });
        }, 300);
      }
    }
  };

  // Gestion des etats de l interface
  const ui = {
    showEmailSection: function() {
      const emailSection = document.querySelector(selectors.emailSection);
      const searchSection = document.querySelector(selectors.searchSection);
      
      if (emailSection) emailSection.style.display = 'block';
      if (searchSection) searchSection.style.display = 'none';
    },

    showSearchSection: function() {
      const emailSection = document.querySelector(selectors.emailSection);
      const searchSection = document.querySelector(selectors.searchSection);
      
      if (emailSection) emailSection.style.display = 'none';
      if (searchSection) searchSection.style.display = 'block';
    },

    showLoading: function() {
      const loading = document.querySelector(selectors.loading);
      const results = document.querySelector(selectors.results);
      const loadingAnimation = document.querySelector(selectors.loadingAnimation);
      
      if (results) results.style.display = 'none';
      if (loading) loading.style.display = 'block';
      
      // Initialiser l'animation de chargement
      if (loadingAnimation && loadingAnimations[CONFIG.loadingAnimation]) {
        loadingAnimation.innerHTML = loadingAnimations[CONFIG.loadingAnimation]();
      }
      
      progressManager.start();
    },

    hideLoading: function() {
      const loading = document.querySelector(selectors.loading);
      if (loading) loading.style.display = 'none';
    },

    toggleButton: function(selector, disabled, text) {
      disabled = disabled || false;
      const button = document.querySelector(selector);
      if (!button) return;

      button.disabled = disabled;
      
      if (text) {
        const buttonText = button.querySelector('.water-analyzer__button-text');
        const buttonIcon = button.querySelector('.water-analyzer__button-icon');
        
        if (buttonText) buttonText.textContent = text;
        if (buttonIcon && disabled) buttonIcon.textContent = 'üîÑ';
      }
    },

    showResults: function(html) {
      const results = document.querySelector(selectors.results);
      if (results) {
        results.innerHTML = html;
        results.style.display = 'block';
        
        // Scroll fluide vers les resultats
        setTimeout(function() {
          results.scrollIntoView({ 
            behavior: 'smooth', 
            block: 'start' 
          });
        }, 100);
      }
    }
  };

  // Fonction de fetch avec timeout et retry
  function fetchWithTimeout(url, options) {
    options = options || {};
    const timeout = options.timeout || 5000;
    const fetchOptions = Object.assign({}, options);
    delete fetchOptions.timeout;
    
    const controller = new AbortController();
    const timeoutId = setTimeout(function() {
      controller.abort();
    }, timeout);
    
    fetchOptions.signal = controller.signal;
    
    return fetch(url, fetchOptions).then(function(response) {
      clearTimeout(timeoutId);
      return response;
    }).catch(function(error) {
      clearTimeout(timeoutId);
      throw error;
    });
  }

  // Fonction de fetch avec fallback amelioree
  function fetchWithFallback(url, methodIndex, retryCount) {
    methodIndex = methodIndex || 0;
    retryCount = retryCount || 0;
    
    if (methodIndex >= CORS_METHODS.length) {
      throw new Error('Toutes les methodes de connexion ont echoue. Verifiez votre connexion internet.');
    }

    const method = CORS_METHODS[methodIndex];
    debug('Tentative ' + (methodIndex + 1) + '/' + CORS_METHODS.length + ': ' + method.name + ' (retry: ' + retryCount + ')');

    const proxyUrl = method.proxy ? method.proxy + encodeURIComponent(url) : url;
    
    return fetchWithTimeout(proxyUrl, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'User-Agent': 'WaterAnalyzer/1.0'
      },
      mode: 'cors',
      timeout: method.timeout
    }).then(function(response) {
      if (!response.ok) {
        throw new Error('HTTP ' + response.status + ': ' + response.statusText);
      }
      return response.json();
    }).then(function(data) {
      const parsedData = method.parse(data);
      debug('Succes avec ' + method.name);
      return parsedData;
    }).catch(function(error) {
      debug('Methode ' + method.name + ' echouee: ' + error.message, 'warn');
      
      // Retry avec la meme methode si pas encore fait
      if (retryCount < CONFIG.maxRetries) {
        return new Promise(function(resolve) {
          setTimeout(resolve, 1000 * (retryCount + 1));
        }).then(function() {
          return fetchWithFallback(url, methodIndex, retryCount + 1);
        });
      }
      
      // Essayer la methode suivante
      return fetchWithFallback(url, methodIndex + 1, 0);
    });
  }

  // Recherche de proximite
  function findNearbyCommunes(targetLat, targetLon, radius) {
    radius = radius || CONFIG.proximityRadius;
    
    // URL pour rechercher les communes dans un rayon
    const url = 'https://geo.api.gouv.fr/communes?lat=' + targetLat + '&lon=' + targetLon + '&distance=' + (radius * 1000) + '&fields=nom,code,codesPostaux,centre&format=json&geometry=centre';
    
    return fetchWithFallback(url).then(function(communes) {
      if (!communes || !Array.isArray(communes)) {
        return [];
      }
      
      // Trier par distance
      return communes.map(function(commune) {
        const distance = utils.calculateDistance(
          targetLat, targetLon,
          commune.centre.coordinates[1], commune.centre.coordinates[0]
        );
        return Object.assign(commune, { distance: distance });
      }).sort(function(a, b) {
        return a.distance - b.distance;
      });
    });
  }

  // Fonction principale d analyse avec recherche de proximite
  function analyzeWater(address) {
    if (!address || !address.trim()) {
      throw new Error('Veuillez saisir une adresse valide');
    }

    const cacheKey = utils.getCacheKey(address);
    
    // Verifier le cache
    if (cache.has(cacheKey)) {
      const cached = cache.get(cacheKey);
      if (Date.now() - cached.timestamp < CONFIG.cacheTimeout) {
        debug('Utilisation des donnees en cache');
        return Promise.resolve(cached.data);
      }
    }

    debug('Demarrage de l analyse pour: ' + address);

    // Etape 1: Geocodage
    progressManager.next();
    debug('Geocodage en cours...');
    
    const addressUrl = 'https://api-adresse.data.gouv.fr/search/?q=' + encodeURIComponent(address) + '&limit=5';
    
    return fetchWithFallback(addressUrl).then(function(locationData) {
      if (!locationData || !locationData.features || !locationData.features.length) {
        throw new Error('Adresse non trouvee. Essayez avec le code postal ou le nom de la ville.');
      }

      const location = locationData.features[0];
      const cityCode = location.properties.citycode;
      const cityName = location.properties.city;
      const coordinates = location.geometry.coordinates; // [lon, lat]
      
      debug('Adresse trouvee: ' + cityName + ' (' + cityCode + ')');

      // Etape 2: Recuperation des donnees de qualite
      progressManager.next();
      
      const dateLimit = new Date();
      dateLimit.setFullYear(dateLimit.getFullYear() - CONFIG.dateRangeYears);
      const dateLimitStr = dateLimit.toISOString().split('T')[0];

      const waterUrl = 'https://hubeau.eaufrance.fr/api/v1/qualite_eau_potable/resultats_dis?code_commune=' + cityCode + '&date_min_prelevement=' + dateLimitStr + '&size=200&format=json&sort=desc';
      
      debug('Recuperation des donnees qualite...');
      return fetchWithFallback(waterUrl).then(function(qualityData) {
        progressManager.next();

        // Si pas de donnees, chercher dans les communes proches
        if (!qualityData || !qualityData.data || qualityData.data.length === 0) {
          debug('Aucune donnee trouvee, recherche dans les communes proches...');
          
          return findNearbyCommunes(coordinates[1], coordinates[0], CONFIG.proximityRadius).then(function(nearbyCommunes) {
            if (!nearbyCommunes || nearbyCommunes.length === 0) {
              return { location: location, qualityData: null, proximityData: null };
            }

            // Essayer les communes proches une par une
            let proximityPromise = Promise.resolve(null);
            
            for (let i = 0; i < Math.min(nearbyCommunes.length, 5); i++) {
              const commune = nearbyCommunes[i];
              proximityPromise = proximityPromise.then(function(result) {
                if (result && result.data && result.data.length > 0) {
                  return result; // On a deja trouve des donnees
                }
                
                const nearbyWaterUrl = 'https://hubeau.eaufrance.fr/api/v1/qualite_eau_potable/resultats_dis?code_commune=' + commune.code + '&date_min_prelevement=' + dateLimitStr + '&size=50&format=json&sort=desc';
                
                return fetchWithFallback(nearbyWaterUrl).then(function(nearbyQualityData) {
                  if (nearbyQualityData && nearbyQualityData.data && nearbyQualityData.data.length > 0) {
                    debug('Donnees trouvees pour ' + commune.nom + ' (distance: ' + commune.distance.toFixed(1) + 'km)');
                    return {
                      data: nearbyQualityData.data,
                      commune: commune,
                      distance: commune.distance
                    };
                  }
                  return null;
                }).catch(function() {
                  return null; // Ignorer les erreurs et continuer
                });
              });
            }
            
            return proximityPromise.then(function(proximityResult) {
              return {
                location: location,
                qualityData: qualityData,
                proximityData: proximityResult
              };
            });
          });
        }

        return {
          location: location,
          qualityData: qualityData,
          proximityData: null
        };
      });
    }).then(function(result) {
      progressManager.next();

      // Mise en cache
      cache.set(cacheKey, {
        data: result,
        timestamp: Date.now()
      });

      progressManager.complete();
      debug('Analyse terminee avec succes');
      return result;
    }).catch(function(error) {
      debug('Erreur lors de l analyse: ' + error.message, 'error');
      throw error;
    });
  }

  // Generation du HTML des resultats avec donnees de proximite
  function generateResultsHtml(location, qualityResponse, proximityData) {
    const props = location.properties;
    let html = '';

    // Informations sur l adresse
    html += '<div class="water-result water-result--location">';
    html += '<h3 class="water-result__title">üìç Adresse analysee</h3>';
    html += '<div class="water-result__content">';
    html += '<p><strong>' + utils.sanitizeHtml(props.label) + '</strong></p>';
    html += '<p>üèòÔ∏è ' + utils.sanitizeHtml(props.city) + ' (' + (props.postcode || 'N/A') + ')</p>';
    html += '<p>üÜî Code INSEE: ' + props.citycode + '</p>';
    if (props.context) {
      html += '<p>üìç ' + utils.sanitizeHtml(props.context) + '</p>';
    }
    html += '</div></div>';

    // Donnees directes ou de proximite
    let dataToUse = null;
    let isProximityData = false;

    if (qualityResponse && qualityResponse.data && qualityResponse.data.length > 0) {
      dataToUse = qualityResponse.data;
      isProximityData = false;
    } else if (proximityData && proximityData.data && proximityData.data.length > 0) {
      dataToUse = proximityData.data;
      isProximityData = true;
    }

    if (dataToUse) {
      const analyses = dataToUse;
      const latest = analyses[0];
      const lastDate = utils.formatDate(latest.date_prelevement);

      // Informations generales avec badge de proximite
      const resultClass = isProximityData ? 'water-result--proximity' : 'water-result--quality';
      html += '<div class="water-result ' + resultClass + '">';
      
      let titleText = 'üìä Rapport Qualite - ' + utils.sanitizeHtml(props.city);
      if (isProximityData) {
        titleText += '<span class="proximity-badge">üìç ' + proximityData.distance.toFixed(1) + 'km</span>';
      }
      
      html += '<h3 class="water-result__title">' + titleText + '</h3>';
      html += '<div class="water-result__content">';
      
      if (isProximityData) {
        html += '<p><strong>‚ö†Ô∏è Donnees de proximite:</strong> ' + utils.sanitizeHtml(proximityData.commune.nom) + ' (commune la plus proche avec des analyses)</p>';
        html += '<p><strong>üìè Distance:</strong> ' + proximityData.distance.toFixed(1) + ' km de votre adresse</p>';
      }
      
      html += '<p><strong>Derniere analyse:</strong> ' + lastDate + '</p>';
      html += '<p><strong>Total analyses:</strong> ' + analyses.length + ' sur ' + CONFIG.dateRangeYears + ' ans</p>';
      if (latest.nom_distributeur) {
        html += '<p><strong>Distributeur:</strong> ' + utils.sanitizeHtml(latest.nom_distributeur) + '</p>';
      }
      if (latest.nom_installation) {
        html += '<p><strong>Installation:</strong> ' + utils.sanitizeHtml(latest.nom_installation) + '</p>';
      }
      html += '</div></div>';

      // Analyse de conformite
      const bactConform = analyses.filter(function(d) { return d.conformite_limites_bact_prelevement === 'C'; }).length;
      const bactTotal = analyses.filter(function(d) { return d.conformite_limites_bact_prelevement; }).length;
      
      const physConform = analyses.filter(function(d) { return d.conformite_limites_pc_prelevement === 'C'; }).length;
      const physTotal = analyses.filter(function(d) { return d.conformite_limites_pc_prelevement; }).length;

      if (bactTotal > 0 || physTotal > 0) {
        html += '<div class="water-result water-result--conformity">';
        html += '<h4 class="water-result__title">‚úÖ Conformite Reglementaire</h4>';
        html += '<div class="water-result__content">';

        if (bactTotal > 0) {
          const bactPercent = (bactConform / bactTotal) * 100;
          html += '<p>ü¶† Qualite bacteriologique: <strong>' + bactPercent.toFixed(1) + '%</strong> conforme (' + bactConform + '/' + bactTotal + ' analyses)</p>';
        }

        if (physTotal > 0) {
          const physPercent = (physConform / physTotal) * 100;
          html += '<p>‚öóÔ∏è Parametres physico-chimiques: <strong>' + physPercent.toFixed(1) + '%</strong> conforme (' + physConform + '/' + physTotal + ' analyses)</p>';
        }

        if (isProximityData) {
          html += '<p><em>üí° Ces donnees proviennent de la commune la plus proche disposant d analyses recentes.</em></p>';
        }

        html += '</div></div>';
      }

      // Recommandations adaptees
      html += '<div class="water-result water-result--recommendations">';
      html += '<h4 class="water-result__title">üí° Recommandations</h4>';
      html += '<div class="water-result__content">';
      html += '<p>‚Ä¢ üî¨ Analyses conformes aux normes francaises en vigueur</p>';
      
      if (isProximityData) {
        html += '<p>‚Ä¢ üìû Contactez votre mairie pour connaitre votre distributeur exact</p>';
        html += '<p>‚Ä¢ üåê Votre commune peut etre desservie par le meme reseau que ' + utils.sanitizeHtml(proximityData.commune.nom) + '</p>';
      } else {
        html += '<p>‚Ä¢ üìû En cas de doute, contactez votre distributeur d eau</p>';
      }
      
      html += '<p>‚Ä¢ üíß Consommez 1,5 a 2L d eau par jour selon vos besoins</p>';
      html += '<p>‚Ä¢ üå°Ô∏è Conservez l eau du robinet au frais et consommez-la rapidement</p>';
      
      if (userEmail) {
        html += '<p>‚Ä¢ üìß Un rapport detaille a ete envoye a <strong>' + utils.sanitizeHtml(userEmail) + '</strong></p>';
      }
      
      html += '</div></div>';

    } else {
      html += '<div class="water-result water-result--warning">';
      html += '<h4 class="water-result__title">‚ö†Ô∏è Aucune analyse disponible</h4>';
      html += '<div class="water-result__content">';
      html += '<p>Aucune donnee d analyse trouvee pour <strong>' + utils.sanitizeHtml(props.city) + '</strong> ni dans les communes environnantes (rayon de ' + CONFIG.proximityRadius + 'km).</p>';
      html += '<p>Cette zone peut etre desservie par un reseau intercommunal eloigne ou les donnees peuvent ne pas etre encore disponibles dans la base nationale.</p>';
      html += '<p>üí° <strong>Que faire ?</strong></p>';
      html += '<p>‚Ä¢ Contactez votre mairie pour connaitre votre distributeur</p>';
      html += '<p>‚Ä¢ Demandez les derniers rapports de qualite a votre distributeur</p>';
      html += '<p>‚Ä¢ Consultez votre facture d eau pour identifier le gestionnaire</p>';
      html += '</div></div>';
    }

    return html;
  }

  // Affichage d erreur
  function showError(message) {
    const html = '<div class="water-result water-result--error">' +
      '<h4 class="water-result__title">‚ùå Erreur</h4>' +
      '<div class="water-result__content">' +
      '<p>' + utils.sanitizeHtml(message) + '</p>' +
      '<p>üí° <strong>Suggestions :</strong></p>' +
      '<p>‚Ä¢ Essayez avec un code postal (ex: 01000)</p>' +
      '<p>‚Ä¢ Verifiez l orthographe de votre adresse</p>' +
      '<p>‚Ä¢ Verifiez votre connexion internet</p>' +
      '</div></div>';
    ui.showResults(html);
  }

  // Gestionnaire du formulaire email
  function handleEmailSubmit(event) {
    event.preventDefault();
    
    const emailInput = document.querySelector(selectors.emailInput);
    const email = emailInput ? emailInput.value.trim() : '';
    
    if (!email) {
      alert('Veuillez saisir votre adresse email');
      return;
    }
    
    if (!utils.validateEmail(email)) {
      alert('Veuillez saisir une adresse email valide');
      return;
    }

    userEmail = email;
    debug('Email collecte: ' + email);
    
    // Transition vers la section de recherche
    ui.toggleButton(selectors.emailButton, true, 'Validation...');
    
    setTimeout(function() {
      ui.showSearchSection();
      ui.toggleButton(selectors.emailButton, false, '{{ section.settings.email_button_text | default: "Continuer" }}');
      
      // Focus sur le champ adresse
      const addressInput = document.querySelector(selectors.input);
      if (addressInput) {
        addressInput.focus();
      }
    }, 500);
  }

  // Gestionnaire principal du formulaire d analyse
  function handleFormSubmit(event) {
    event.preventDefault();
    
    const input = document.querySelector(selectors.input);
    const address = input ? input.value.trim() : '';
    
    if (!address) {
      showError('Veuillez saisir une adresse');
      return;
    }

    ui.toggleButton(selectors.button, true, 'Analyse...');
    ui.showLoading();

    analyzeWater(address).then(function(result) {
      const html = generateResultsHtml(result.location, result.qualityData, result.proximityData);
      ui.showResults(html);
      
      // Simuler l'envoi d'email (en realite, cela devrait etre gere cote serveur)
      if (userEmail) {
        debug('Rapport envoye par email a: ' + userEmail);
      }
    }).catch(function(error) {
      showError(error.message);
    }).finally(function() {
      ui.hideLoading();
      ui.toggleButton(selectors.button, false, '{{ section.settings.button_text | default: "Analyser" }}');
    });
  }

  // Gestionnaire des exemples
  function handleExampleClick(event) {
    const example = event.target.dataset.example;
    const input = document.querySelector(selectors.input);
    
    if (input && example) {
      input.value = example;
      input.focus();
      
      // Animation de feedback
      event.target.style.transform = 'scale(0.95)';
      setTimeout(function() {
        event.target.style.transform = '';
      }, 150);
    }
  }

  // Initialisation
  function init() {
    debug('Initialisation de l analyseur d eau');

    // Gestionnaire du formulaire email
    const emailForm = document.querySelector(selectors.emailForm);
    if (emailForm) {
      emailForm.addEventListener('submit', handleEmailSubmit);
    }

    // Gestionnaire du formulaire d analyse
    const form = document.querySelector(selectors.form);
    if (form) {
      form.addEventListener('submit', handleFormSubmit);
    }

    // Gestionnaire des exemples
    const examples = document.querySelectorAll(selectors.examples);
    for (let i = 0; i < examples.length; i++) {
      examples[i].addEventListener('click', handleExampleClick);
    }

    // Gestionnaire Enter sur les inputs
    const emailInput = document.querySelector(selectors.emailInput);
    if (emailInput) {
      emailInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
          e.preventDefault();
          handleEmailSubmit(e);
        }
      });
    }

    const addressInput = document.querySelector(selectors.input);
    if (addressInput) {
      addressInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
          e.preventDefault();
          handleFormSubmit(e);
        }
      });
    }

    // Gestionnaires de la carte
    if (CONFIG.enableMap) {
      const mapToggle = document.querySelector(selectors.mapToggle);
      const mapClose = document.querySelector(selectors.mapClose);
      const mapConfirm = document.querySelector(selectors.mapConfirm);

      if (mapToggle) {
        mapToggle.addEventListener('click', function() {
          mapManager.show();
          if (!map) {
            mapManager.init();
          }
        });
      }

      if (mapClose) {
        mapClose.addEventListener('click', mapManager.hide);
      }

      if (mapConfirm) {
        mapConfirm.addEventListener('click', mapManager.confirmAddress);
      }
    }

    // Afficher la section email par defaut
    ui.showEmailSection();

    debug('Analyseur initialise et pret');
  }

  // Demarrage quand le DOM est pret
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }

})();
</script>

{% schema %}
{
  "name": "Analyseur Eau",
  "settings": [
    {
      "type": "header",
      "content": "Configuration generale"
    },
    {
      "type": "checkbox",
      "id": "show_header",
      "label": "Afficher l en-tete",
      "default": true
    },
    {
      "type": "text",
      "id": "title",
      "label": "Titre principal",
      "default": "Analyseur Qualite Eau Potable",
      "info": "Le titre affiche en haut de la section"
    },
    {
      "type": "checkbox",
      "id": "show_subtitle",
      "label": "Afficher le sous-titre",
      "default": true
    },
    {
      "type": "text",
      "id": "subtitle",
      "label": "Sous-titre",
      "default": "Decouvrez la qualite de l eau a votre adresse",
      "info": "Description affichee sous le titre"
    },
    {
      "type": "checkbox",
      "id": "show_header_icon",
      "label": "Afficher l icone du header",
      "default": true
    },
    {
      "type": "text",
      "id": "header_icon",
      "label": "Icone du header",
      "default": "üåä",
      "info": "Emoji affiche dans le titre principal"
    },
    {
      "type": "header",
      "content": "Collection d email"
    },
    {
      "type": "text",
      "id": "email_title",
      "label": "Titre de la section email",
      "default": "Recevez votre rapport par email"
    },
    {
      "type": "textarea",
      "id": "email_description",
      "label": "Description email",
      "default": "Saisissez votre email pour recevoir le rapport detaille de qualite de l eau"
    },
    {
      "type": "text",
      "id": "email_placeholder",
      "label": "Placeholder email",
      "default": "votre@email.com"
    },
    {
      "type": "text",
      "id": "email_button_text",
      "label": "Texte bouton email",
      "default": "Continuer"
    },
    {
      "type": "checkbox",
      "id": "show_privacy_notice",
      "label": "Afficher notice de confidentialite",
      "default": true
    },
    {
      "type": "text",
      "id": "privacy_text",
      "label": "Texte de confidentialite",
      "default": "Vos donnees sont protegees et ne seront jamais partagees"
    },
    {
      "type": "header",
      "content": "Section recherche"
    },
    {
      "type": "text",
      "id": "search_title",
      "label": "Titre de la section recherche",
      "default": "Analysez votre eau",
      "info": "Titre de la zone de recherche"
    },
    {
      "type": "textarea",
      "id": "search_description",
      "label": "Description de la recherche",
      "default": "Saisissez votre adresse pour obtenir un rapport de qualite detaille",
      "info": "Texte explicatif pour la recherche"
    },
    {
      "type": "text",
      "id": "placeholder",
      "label": "Placeholder du champ adresse",
      "default": "01000 Bourg-en-Bresse",
      "info": "Texte d exemple dans le champ de saisie"
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "Texte du bouton",
      "default": "Analyser",
      "info": "Texte affiche sur le bouton d analyse"
    },
    {
      "type": "checkbox",
      "id": "show_search_icon",
      "label": "Afficher l icone de recherche",
      "default": true
    },
    {
      "type": "text",
      "id": "search_icon",
      "label": "Icone de recherche",
      "default": "üè†",
      "info": "Emoji affiche dans le titre de recherche"
    },
    {
      "type": "text",
      "id": "button_icon",
      "label": "Icone du bouton",
      "default": "üîç",
      "info": "Emoji affiche dans le bouton"
    },
    {
      "type": "text",
      "id": "loading_icon",
      "label": "Icone de chargement",
      "default": "üîç",
      "info": "Emoji affiche pendant le chargement"
    },
    {
      "type": "header",
      "content": "Couleurs principales"
    },
    {
      "type": "color",
      "id": "primary_color",
      "label": "Couleur primaire",
      "default": "#2563eb",
      "info": "Couleur principale des boutons et elements actifs"
    },
    {
      "type": "color",
      "id": "secondary_color",
      "label": "Couleur secondaire",
      "default": "#1e40af",
      "info": "Couleur pour les etats hover et focus"
    },
    {
      "type": "color",
      "id": "accent_color",
      "label": "Couleur d accent",
      "default": "#3b82f6",
      "info": "Couleur pour les elements decoratifs"
    },
    {
      "type": "color",
      "id": "success_color",
      "label": "Couleur de succes",
      "default": "#10b981",
      "info": "Couleur pour les messages positifs"
    },
    {
      "type": "color",
      "id": "warning_color",
      "label": "Couleur d avertissement",
      "default": "#f59e0b",
      "info": "Couleur pour les avertissements"
    },
    {
      "type": "color",
      "id": "error_color",
      "label": "Couleur d erreur",
      "default": "#ef4444",
      "info": "Couleur pour les messages d erreur"
    },
    {
      "type": "header",
      "content": "Couleurs de texte et fond"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Couleur du texte principal",
      "default": "#1f2937",
      "info": "Couleur du texte principal"
    },
    {
      "type": "color",
      "id": "text_light_color",
      "label": "Couleur du texte secondaire",
      "default": "#6b7280",
      "info": "Couleur du texte moins important"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Couleur de fond",
      "default": "#ffffff",
      "info": "Couleur de fond principale"
    },
    {
      "type": "color",
      "id": "surface_color",
      "label": "Couleur des surfaces",
      "default": "#f8fafc",
      "info": "Couleur de fond des cartes et sections"
    },
    {
      "type": "color",
      "id": "border_color",
      "label": "Couleur des bordures",
      "default": "#e2e8f0",
      "info": "Couleur des bordures et separateurs"
    },
    {
      "type": "color",
      "id": "header_background",
      "label": "Fond de l en-tete",
      "default": "#2563eb",
      "info": "Couleur de fond de l en-tete"
    },
    {
      "type": "color",
      "id": "header_text_color",
      "label": "Texte de l en-tete",
      "default": "#ffffff",
      "info": "Couleur du texte de l en-tete"
    },
    {
      "type": "text",
      "id": "shadow_color",
      "label": "Couleur des ombres",
      "default": "rgba(0, 0, 0, 0.1)",
      "info": "Couleur des ombres (format rgba)"
    },
    {
      "type": "header",
      "content": "Design et espacement"
    },
    {
      "type": "range",
      "id": "border_radius",
      "label": "Arrondi des bords",
      "min": 0,
      "max": 50,
      "step": 2,
      "default": 16,
      "unit": "px",
      "info": "Arrondi des coins de la section"
    },
    {
      "type": "range",
      "id": "section_padding",
      "label": "Espacement interne",
      "min": 1,
      "max": 5,
      "step": 0.5,
      "default": 2,
      "unit": "rem",
      "info": "Espacement interne de la section"
    },
    {
      "type": "header",
      "content": "Animation de chargement"
    },
    {
      "type": "select",
      "id": "loading_animation",
      "label": "Type d animation",
      "options": [
        {
          "value": "glass",
          "label": "Verre qui se remplit"
        },
        {
          "value": "progress",
          "label": "Barre de progression"
        },
        {
          "value": "ripple",
          "label": "Ondulations"
        },
        {
          "value": "dots",
          "label": "Points anim√©s"
        }
      ],
      "default": "glass",
      "info": "Animation affichee pendant le chargement"
    },
    {
      "type": "header",
      "content": "Fonctionnalites"
    },
    {
      "type": "checkbox",
      "id": "show_examples",
      "label": "Afficher les exemples",
      "default": true,
      "info": "Affiche les boutons d exemples d adresses"
    },
    {
      "type": "text",
      "id": "examples",
      "label": "Exemples d adresses",
      "default": "01000,Gex,Bourg-en-Bresse",
      "info": "Liste d exemples separes par des virgules"
    },
    {
      "type": "checkbox",
      "id": "enable_map",
      "label": "Activer la carte interactive",
      "default": false,
      "info": "Permet de selectionner une adresse sur une carte"
    },
    {
      "type": "text",
      "id": "map_button_text",
      "label": "Texte bouton carte",
      "default": "Utiliser la carte"
    },
    {
      "type": "text",
      "id": "map_instruction",
      "label": "Instruction carte",
      "default": "Cliquez sur la carte pour selectionner votre adresse"
    },
    {
      "type": "text",
      "id": "map_confirm_text",
      "label": "Texte confirmation carte",
      "default": "Analyser cette adresse"
    },
    {
      "type": "range",
      "id": "proximity_radius",
      "label": "Rayon de recherche proximite",
      "min": 10,
      "max": 100,
      "step": 5,
      "default": 25,
      "unit": "km",
      "info": "Distance de recherche pour les communes proches"
    },
    {
      "type": "header",
      "content": "Options avancees"
    },
    {
      "type": "checkbox",
      "id": "debug_mode",
      "label": "Mode debug",
      "default": false,
      "info": "Affiche les informations de debug (pour le developpement)"
    }
  ],
  "presets": [
    {
      "name": "Analyseur Eau"
    }
  ]
}
{% endschema %}