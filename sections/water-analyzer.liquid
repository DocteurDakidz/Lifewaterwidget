<!-- Analyseur Eau Potable - Version Am√©lior√©e -->
<div class="water-analyzer" data-section-id="{{ section.id }}">
  <!-- Header -->
  <header class="water-analyzer__header">
    <h2 class="water-analyzer__title">
      <span class="water-analyzer__icon">üåä</span>
      {{ section.settings.title | default: 'Analyseur Qualit√© Eau Potable' }}
    </h2>
    <p class="water-analyzer__subtitle">
      {{ section.settings.subtitle | default: 'D√©couvrez la qualit√© de l\'eau √† votre adresse' }}
    </p>
  </header>

  <!-- Main Content -->
  <div class="water-analyzer__content">
    
    <!-- Search Section -->
    <section class="water-analyzer__search">
      <h3 class="water-analyzer__search-title">
        <span class="water-analyzer__icon">üè†</span>
        Analysez votre eau
      </h3>
      <p class="water-analyzer__search-description">
        Saisissez votre adresse pour obtenir un rapport de qualit√© d√©taill√©
      </p>
      
      <form class="water-analyzer__form" data-water-form>
        <div class="water-analyzer__input-group">
          <input 
            type="text" 
            id="water-input-{{ section.id }}" 
            class="water-analyzer__input"
            placeholder="{{ section.settings.placeholder | default: '01000 Bourg-en-Bresse' }}"
            autocomplete="address-line1"
            required
            aria-label="Adresse √† analyser"
          >
          <button 
            type="submit"
            class="water-analyzer__button"
            data-water-button
            aria-label="Lancer l'analyse"
          >
            <span class="water-analyzer__button-icon">üîç</span>
            <span class="water-analyzer__button-text">Analyser</span>
          </button>
        </div>

        <!-- Examples -->
        <div class="water-analyzer__examples">
          <span class="water-analyzer__examples-label">üí° Exemples :</span>
          {% assign examples = section.settings.examples | default: '01000,Gex,Bourg-en-Bresse' | split: ',' %}
          {% for example in examples %}
            <button 
              type="button" 
              class="water-analyzer__example"
              data-example="{{ example | strip }}"
            >
              {{ example | strip }}
            </button>
          {% endfor %}
        </div>
      </form>
    </section>

    <!-- Debug Info (hidden by default) -->
    {% if section.settings.debug_mode %}
    <div class="water-analyzer__debug" data-debug-info style="display: none;">
      <strong>Debug :</strong> 
      <span data-debug-text>En attente...</span>
    </div>
    {% endif %}

    <!-- Loading State -->
    <div class="water-analyzer__loading" data-loading style="display: none;">
      <div class="water-analyzer__spinner" aria-hidden="true"></div>
      <h4 class="water-analyzer__loading-title">üîç Analyse en cours...</h4>
      <p class="water-analyzer__loading-text" data-loading-text>
        √âtape 1: Localisation de l'adresse...
      </p>
    </div>

    <!-- Results -->
    <div class="water-analyzer__results" data-results style="display: none;" role="region" aria-live="polite">
      <!-- Results will be populated by JavaScript -->
    </div>
  </div>
</div>

<style>
  .water-analyzer {
    font-family: var(--font-body-family, 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif);
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 20px;
    overflow: hidden;
    box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15);
    margin: 2rem 0;
    color: #333;
    max-width: 100%;
  }

  .water-analyzer__header {
    background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
    color: white;
    padding: 2rem 1.5rem;
    text-align: center;
  }

  .water-analyzer__title {
    font-size: clamp(1.5rem, 4vw, 2rem);
    margin: 0 0 0.5rem 0;
    font-weight: 700;
    line-height: 1.2;
  }

  .water-analyzer__subtitle {
    margin: 0;
    opacity: 0.9;
    font-size: clamp(0.9rem, 2.5vw, 1.1rem);
  }

  .water-analyzer__icon {
    display: inline-block;
    margin-right: 0.5rem;
  }

  .water-analyzer__content {
    background: white;
    padding: 2rem 1.5rem;
  }

  .water-analyzer__search {
    background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
    padding: 2rem;
    border-radius: 15px;
    margin-bottom: 2rem;
    color: white;
  }

  .water-analyzer__search-title {
    margin: 0 0 1rem 0;
    font-size: 1.3rem;
    font-weight: 600;
  }

  .water-analyzer__search-description {
    margin: 0 0 1.5rem 0;
    opacity: 0.95;
  }

  .water-analyzer__form {
    width: 100%;
  }

  .water-analyzer__input-group {
    display: flex;
    gap: 0.75rem;
    align-items: stretch;
    flex-wrap: wrap;
    margin-bottom: 1rem;
  }

  .water-analyzer__input {
    flex: 1;
    min-width: 250px;
    padding: 0.875rem 1.25rem;
    border: none;
    border-radius: 25px;
    font-size: 1rem;
    background: rgba(255, 255, 255, 0.95);
    outline: none;
    transition: all 0.3s ease;
  }

  .water-analyzer__input:focus {
    background: white;
    box-shadow: 0 0 0 3px rgba(255, 255, 255, 0.3);
  }

  .water-analyzer__button {
    padding: 0.875rem 1.5rem;
    background: linear-gradient(45deg, #ff6b6b, #ee5a52);
    color: white;
    border: none;
    border-radius: 25px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    white-space: nowrap;
  }

  .water-analyzer__button:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(238, 85, 82, 0.4);
  }

  .water-analyzer__button:disabled {
    opacity: 0.7;
    cursor: not-allowed;
    transform: none;
  }

  .water-analyzer__examples {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: 0.5rem;
    opacity: 0.9;
    font-size: 0.9rem;
  }

  .water-analyzer__examples-label {
    font-weight: 600;
    margin-right: 0.5rem;
  }

  .water-analyzer__example {
    background: rgba(255, 255, 255, 0.2);
    color: white;
    border: none;
    padding: 0.375rem 0.75rem;
    border-radius: 12px;
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 0.85rem;
  }

  .water-analyzer__example:hover {
    background: rgba(255, 255, 255, 0.3);
    transform: translateY(-1px);
  }

  .water-analyzer__debug {
    background: #e3f2fd;
    padding: 1rem;
    border-radius: 8px;
    margin-bottom: 1.5rem;
    font-family: 'Courier New', monospace;
    font-size: 0.8rem;
    border-left: 4px solid #2196f3;
  }

  .water-analyzer__loading {
    text-align: center;
    padding: 3rem 1rem;
  }

  .water-analyzer__spinner {
    width: 40px;
    height: 40px;
    border: 3px solid #f3f3f3;
    border-top: 3px solid #3498db;
    border-radius: 50%;
    animation: water-spin 1s linear infinite;
    margin: 0 auto 1rem;
  }

  .water-analyzer__loading-title {
    margin: 0 0 0.5rem 0;
    color: #333;
    font-size: 1.2rem;
  }

  .water-analyzer__loading-text {
    margin: 0;
    color: #666;
  }

  .water-analyzer__results {
    animation: water-fade-in 0.5s ease-out;
  }

  /* Result Styles */
  .water-result {
    border-radius: 12px;
    padding: 1.5rem;
    margin: 1rem 0;
  }

  .water-result--location {
    background: #f8f9fa;
    border-left: 4px solid #00d2ff;
  }

  .water-result--quality {
    background: #f8f9fa;
    border-left: 4px solid #28a745;
  }

  .water-result--conformity {
    background: linear-gradient(135deg, #a8e6cf 0%, #dcedc1 100%);
  }

  .water-result--recommendations {
    background: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%);
  }

  .water-result--warning {
    background: #fff3cd;
    color: #856404;
    border-left: 4px solid #ffc107;
  }

  .water-result--error {
    background: #f8d7da;
    color: #721c24;
    border-left: 4px solid #dc3545;
  }

  .water-result__title {
    margin: 0 0 1rem 0;
    font-size: 1.2rem;
    font-weight: 600;
  }

  .water-result__content p {
    margin: 0.5rem 0;
  }

  .water-result__content p:first-child {
    margin-top: 0;
  }

  .water-result__content p:last-child {
    margin-bottom: 0;
  }

  /* Animations */
  @keyframes water-spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  @keyframes water-fade-in {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .water-analyzer {
      margin: 1rem 0;
      border-radius: 15px;
    }

    .water-analyzer__header {
      padding: 1.5rem 1rem;
    }

    .water-analyzer__content {
      padding: 1.5rem 1rem;
    }

    .water-analyzer__search {
      padding: 1.5rem;
    }

    .water-analyzer__input-group {
      flex-direction: column;
    }

    .water-analyzer__input {
      min-width: auto;
    }

    .water-analyzer__examples {
      justify-content: center;
    }
  }

  @media (max-width: 480px) {
    .water-analyzer__examples {
      flex-direction: column;
      align-items: flex-start;
    }

    .water-analyzer__examples-label {
      margin-bottom: 0.5rem;
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .water-analyzer {
      border: 2px solid #000;
    }

    .water-analyzer__button {
      border: 2px solid #000;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .water-analyzer__button:hover {
      transform: none;
    }

    .water-analyzer__example:hover {
      transform: none;
    }

    .water-analyzer__spinner {
      animation: none;
    }

    .water-analyzer__results {
      animation: none;
    }
  }
</style>

<script>
(function() {
  'use strict';
  
  // Configuration avec syst√®me de fallback CORS am√©lior√©
  const CORS_METHODS = [
    {
      name: 'AllOrigins',
      proxy: 'https://api.allorigins.win/get?url=',
      parse: (data) => JSON.parse(data.contents),
      timeout: 10000
    },
    {
      name: 'ProxyAnywhereHeroku', 
      proxy: 'https://cors-anywhere.herokuapp.com/',
      parse: (data) => data,
      timeout: 8000
    },
    {
      name: 'ThingProxy',
      proxy: 'https://thingproxy.freeboard.io/fetch/',
      parse: (data) => data,
      timeout: 8000
    },
    {
      name: 'ProxyCors',
      proxy: 'https://proxy.cors.sh/',
      parse: (data) => data,
      timeout: 8000
    },
    {
      name: 'Direct',
      proxy: '',
      parse: (data) => data,
      timeout: 5000
    }
  ];

  // Configuration globale
  const CONFIG = {
    sectionId: '{{ section.id }}',
    debugMode: {{ section.settings.debug_mode | default: false }},
    maxRetries: 3,
    cacheTimeout: 300000, // 5 minutes
    dateRangeYears: 2
  };

  // Cache simple pour √©viter les requ√™tes r√©p√©t√©es
  const cache = new Map();

  // S√©lecteurs DOM
  const selectors = {
    form: '[data-water-form]',
    input: `#water-input-${CONFIG.sectionId}`,
    button: '[data-water-button]',
    loading: '[data-loading]',
    loadingText: '[data-loading-text]',
    results: '[data-results]',
    debugInfo: '[data-debug-info]',
    debugText: '[data-debug-text]',
    examples: '[data-example]'
  };

  // Utilitaires
  const utils = {
    debounce(func, wait) {
      let timeout;
      return function executedFunction(...args) {
        const later = () => {
          clearTimeout(timeout);
          func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    },

    sanitizeHtml(str) {
      const div = document.createElement('div');
      div.textContent = str;
      return div.innerHTML;
    },

    formatDate(dateString) {
      return new Date(dateString).toLocaleDateString('fr-FR', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
    },

    getCacheKey(address) {
      return `water_analysis_${address.toLowerCase().replace(/\s+/g, '_')}`;
    }
  };

  // Fonction de debug am√©lior√©e
  function debug(message, type = 'info') {
    const timestamp = new Date().toLocaleTimeString('fr-FR');
    const logMessage = `[${timestamp}] üåä Water Analyzer: ${message}`;
    
    console[type](logMessage);
    
    if (CONFIG.debugMode) {
      const debugEl = document.querySelector(selectors.debugInfo);
      const debugText = document.querySelector(selectors.debugText);
      if (debugEl && debugText) {
        debugEl.style.display = 'block';
        debugText.textContent = `${timestamp} - ${message}`;
      }
    }
  }

  // Gestion des √©tats de l'interface
  const ui = {
    showLoading(step = 'Initialisation...') {
      const loading = document.querySelector(selectors.loading);
      const results = document.querySelector(selectors.results);
      const loadingText = document.querySelector(selectors.loadingText);
      
      if (results) results.style.display = 'none';
      if (loading) loading.style.display = 'block';
      if (loadingText) loadingText.textContent = step;
    },

    hideLoading() {
      const loading = document.querySelector(selectors.loading);
      if (loading) loading.style.display = 'none';
    },

    toggleButton(disabled = false, text = null) {
      const button = document.querySelector(selectors.button);
      if (!button) return;

      button.disabled = disabled;
      
      if (text) {
        const buttonText = button.querySelector('.water-analyzer__button-text');
        const buttonIcon = button.querySelector('.water-analyzer__button-icon');
        
        if (buttonText) buttonText.textContent = text;
        if (buttonIcon) buttonIcon.textContent = disabled ? 'üîÑ' : 'üîç';
      }
    },

    showResults(html) {
      const results = document.querySelector(selectors.results);
      if (results) {
        results.innerHTML = html;
        results.style.display = 'block';
        
        // Scroll fluide vers les r√©sultats
        setTimeout(() => {
          results.scrollIntoView({ 
            behavior: 'smooth', 
            block: 'start' 
          });
        }, 100);
      }
    }
  };

  // Fonction de fetch avec timeout et retry
  async function fetchWithTimeout(url, options = {}) {
    const { timeout = 5000, ...fetchOptions } = options;
    
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), timeout);
    
    try {
      const response = await fetch(url, {
        ...fetchOptions,
        signal: controller.signal
      });
      clearTimeout(timeoutId);
      return response;
    } catch (error) {
      clearTimeout(timeoutId);
      throw error;
    }
  }

  // Fonction de fetch avec fallback am√©lior√©e
  async function fetchWithFallback(url, methodIndex = 0, retryCount = 0) {
    if (methodIndex >= CORS_METHODS.length) {
      throw new Error('Toutes les m√©thodes de connexion ont √©chou√©. V√©rifiez votre connexion internet.');
    }

    const method = CORS_METHODS[methodIndex];
    debug(`Tentative ${methodIndex + 1}/${CORS_METHODS.length}: ${method.name} (retry: ${retryCount})`);

    try {
      const proxyUrl = method.proxy ? `${method.proxy}${encodeURIComponent(url)}` : url;
      
      const response = await fetchWithTimeout(proxyUrl, {
        method: 'GET',
        headers: {
          'Accept': 'application/json',
          'User-Agent': 'WaterAnalyzer/1.0'
        },
        mode: 'cors',
        timeout: method.timeout
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      const parsedData = method.parse(data);
      
      debug(`Succ√®s avec ${method.name}`);
      return parsedData;

    } catch (error) {
      debug(`M√©thode ${method.name} √©chou√©e: ${error.message}`, 'warn');
      
      // Retry avec la m√™me m√©thode si pas encore fait
      if (retryCount < CONFIG.maxRetries) {
        await new Promise(resolve => setTimeout(resolve, 1000 * (retryCount + 1)));
        return fetchWithFallback(url, methodIndex, retryCount + 1);
      }
      
      // Essayer la m√©thode suivante
      return fetchWithFallback(url, methodIndex + 1, 0);
    }
  }

  // Fonction principale d'analyse
  async function analyzeWater(address) {
    if (!address?.trim()) {
      throw new Error('Veuillez saisir une adresse valide');
    }

    const cacheKey = utils.getCacheKey(address);
    
    // V√©rifier le cache
    if (cache.has(cacheKey)) {
      const cached = cache.get(cacheKey);
      if (Date.now() - cached.timestamp < CONFIG.cacheTimeout) {
        debug('Utilisation des donn√©es en cache');
        return cached.data;
      }
    }

    debug(`D√©marrage de l'analyse pour: ${address}`);

    try {
      // √âtape 1: G√©ocodage
      ui.showLoading('√âtape 1: Localisation de l\'adresse...');
      debug('G√©ocodage en cours...');
      
      const addressUrl = `https://api-adresse.data.gouv.fr/search/?q=${encodeURIComponent(address)}&limit=5`;
      const locationData = await fetchWithFallback(addressUrl);
      
      if (!locationData?.features?.length) {
        throw new Error('Adresse non trouv√©e. Essayez avec le code postal ou le nom de la ville.');
      }

      const location = locationData.features[0];
      const cityCode = location.properties.citycode;
      const cityName = location.properties.city;
      
      debug(`Adresse trouv√©e: ${cityName} (${cityCode})`);

      // √âtape 2: R√©cup√©ration des donn√©es de qualit√©
      ui.showLoading('√âtape 2: R√©cup√©ration des analyses d\'eau...');
      
      const dateLimit = new Date();
      dateLimit.setFullYear(dateLimit.getFullYear() - CONFIG.dateRangeYears);
      const dateLimitStr = dateLimit.toISOString().split('T')[0];

      const waterUrl = `https://hubeau.eaufrance.fr/api/v1/qualite_eau_potable/resultats_dis?code_commune=${cityCode}&date_min_prelevement=${dateLimitStr}&size=200&format=json&sort=desc`;
      
      debug('R√©cup√©ration des donn√©es qualit√©...');
      const qualityData = await fetchWithFallback(waterUrl);

      ui.showLoading('√âtape 3: Analyse des donn√©es...');

      const result = {
        location,
        qualityData,
        timestamp: Date.now()
      };

      // Mise en cache
      cache.set(cacheKey, {
        data: result,
        timestamp: Date.now()
      });

      debug('Analyse termin√©e avec succ√®s');
      return result;

    } catch (error) {
      debug(`Erreur lors de l'analyse: ${error.message}`, 'error');
      throw error;
    }
  }

  // G√©n√©ration du HTML des r√©sultats
  function generateResultsHtml(location, qualityResponse) {
    const props = location.properties;
    let html = '';

    // Informations sur l'adresse
    html += `
      <div class="water-result water-result--location">
        <h3 class="water-result__title">üìç Adresse analys√©e</h3>
        <div class="water-result__content">
          <p><strong>${utils.sanitizeHtml(props.label)}</strong></p>
          <p>üèòÔ∏è ${utils.sanitizeHtml(props.city)} (${props.postcode || 'N/A'})</p>
          <p>üÜî Code INSEE: ${props.citycode}</p>
          ${props.context ? `<p>üìç ${utils.sanitizeHtml(props.context)}</p>` : ''}
        </div>
      </div>
    `;

    if (qualityResponse?.data?.length > 0) {
      const analyses = qualityResponse.data;
      const latest = analyses[0];
      const lastDate = utils.formatDate(latest.date_prelevement);

      // Informations g√©n√©rales
      html += `
        <div class="water-result water-result--quality">
          <h3 class="water-result__title">üìä Rapport Qualit√© - ${utils.sanitizeHtml(props.city)}</h3>
          <div class="water-result__content">
            <p><strong>Derni√®re analyse:</strong> ${lastDate}</p>
            <p><strong>Total analyses:</strong> ${analyses.length} sur ${CONFIG.dateRangeYears} ans</p>
            ${latest.nom_distributeur ? `<p><strong>Distributeur:</strong> ${utils.sanitizeHtml(latest.nom_distributeur)}</p>` : ''}
            ${latest.nom_installation ? `<p><strong>Installation:</strong> ${utils.sanitizeHtml(latest.nom_installation)}</p>` : ''}
          </div>
        </div>
      `;

      // Analyse de conformit√©
      const bactConform = analyses.filter(d => d.conformite_limites_bact_prelevement === 'C').length;
      const bactTotal = analyses.filter(d => d.conformite_limites_bact_prelevement).length;
      
      const physConform = analyses.filter(d => d.conformite_limites_pc_prelevement === 'C').length;
      const physTotal = analyses.filter(d => d.conformite_limites_pc_prelevement).length;

      if (bactTotal > 0 || physTotal > 0) {
        html += `
          <div class="water-result water-result--conformity">
            <h4 class="water-result__title">‚úÖ Conformit√© R√©glementaire</h4>
            <div class="water-result__content">
        `;

        if (bactTotal > 0) {
          const bactPercent = (bactConform / bactTotal) * 100;
          html += `<p>ü¶† Qualit√© bact√©riologique: <strong>${bactPercent.toFixed(1)}%</strong> conforme (${bactConform}/${bactTotal} analyses)</p>`;
        }

        if (physTotal > 0) {
          const physPercent = (physConform / physTotal) * 100;
          html += `<p>‚öóÔ∏è Param√®tres physico-chimiques: <strong>${physPercent.toFixed(1)}%</strong> conforme (${physConform}/${physTotal} analyses)</p>`;
        }

        html += `
            </div>
          </div>
        `;
      }

      // Recommandations
      html += `
        <div class="water-result water-result--recommendations">
          <h4 class="water-result__title">üí° Recommandations</h4>
          <div class="water-result__content">
            <p>‚Ä¢ üî¨ Analyses conformes aux normes fran√ßaises en vigueur</p>
            <p>‚Ä¢ üìû En cas de doute, contactez votre distributeur d'eau</p>
            <p>‚Ä¢ üíß Consommez 1,5 √† 2L d'eau par jour selon vos besoins</p>
            <p>‚Ä¢ üå°Ô∏è Conservez l'eau du robinet au frais et consommez-la rapidement</p>
          </div>
        </div>
      `;

    } else {
      html += `
        <div class="water-result water-result--warning">
          <h4 class="water-result__title">‚ö†Ô∏è Aucune analyse r√©cente disponible</h4>
          <div class="water-result__content">
            <p>Aucune donn√©e d'analyse trouv√©e pour <strong>${utils.sanitizeHtml(props.city)}</strong> sur les ${CONFIG.dateRangeYears} derni√®res ann√©es.</p>
            <p>Cette commune peut √™tre desservie par un r√©seau intercommunal ou les donn√©es peuvent ne pas √™tre encore disponibles dans la base nationale.</p>
            <p>üí° Contactez votre mairie ou votre distributeur d'eau pour plus d'informations.</p>
          </div>
        </div>
      `;
    }

    return html;
  }

  // Affichage d'erreur
  function showError(message) {
    const html = `
      <div class="water-result water-result--error">
        <h4 class="water-result__title">‚ùå Erreur</h4>
        <div class="water-result__content">
          <p>${utils.sanitizeHtml(message)}</p>
          <p>üí° <strong>Suggestions :</strong></p>
          <p>‚Ä¢ Essayez avec un code postal (ex: 01000)</p>
          <p>‚Ä¢ V√©rifiez l'orthographe de votre adresse</p>
          <p>‚Ä¢ V√©rifiez votre connexion internet</p>
        </div>
      </div>
    `;
    ui.showResults(html);
  }

  // Gestionnaire principal du formulaire
  async function handleFormSubmit(event) {
    event.preventDefault();
    
    const input = document.querySelector(selectors.input);
    const address = input?.value?.trim();
    
    if (!address) {
      showError('Veuillez saisir une adresse');
      return;
    }

    ui.toggleButton(true, 'Analyse...');

    try {
      const { location, qualityData } = await analyzeWater(address);
      const html = generateResultsHtml(location, qualityData);
      ui.showResults(html);
    } catch (error) {
      showError(error.message);
    } finally {
      ui.hideLoading();
      ui.toggleButton(false, 'Analyser');
    }
  }

  // Gestionnaire des exemples
  function handleExampleClick(event) {
    const example = event.target.dataset.example;
    const input = document.querySelector(selectors.input);
    
    if (input && example) {
      input.value = example;
      input.focus();
      
      // Animation de feedback
      event.target.style.transform = 'scale(0.95)';
      setTimeout(() => {
        event.target.style.transform = '';
      }, 150);
    }
  }

  // Initialisation
  function init() {
    debug('Initialisation de l\'analyseur d\'eau');

    // Gestionnaire du formulaire
    const form = document.querySelector(selectors.form);
    if (form) {
      form.addEventListener('submit', handleFormSubmit);
    }

    // Gestionnaire des exemples
    const examples = document.querySelectorAll(selectors.examples);
    examples.forEach(example => {
      example.addEventListener('click', handleExampleClick);
    });

    // Gestionnaire Enter sur l'input
    const input = document.querySelector(selectors.input);
    if (input) {
      input.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
          e.preventDefault();
          handleFormSubmit(e);
        }
      });
    }

    debug('Analyseur initialis√© et pr√™t');
  }

  // D√©marrage quand le DOM est pr√™t
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }

})();
</script>