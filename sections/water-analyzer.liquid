<!-- Analyseur Eau Potable - Version S√©curis√©e -->
<div class="water-analyzer" data-section-id="{{ section.id }}" style="
  --primary-color: {{ section.settings.primary_color | default: '#667eea' }};
  --secondary-color: {{ section.settings.secondary_color | default: '#764ba2' }};
  --accent-color: {{ section.settings.accent_color | default: '#f093fb' }};
  --button-color: {{ section.settings.button_color | default: '#ff6b6b' }};
  --text-color: {{ section.settings.text_color | default: '#333333' }};
  --background-color: {{ section.settings.background_color | default: '#ffffff' }};
  --header-bg-color: {{ section.settings.header_bg_color | default: '#4facfe' }};
  --border-radius: {{ section.settings.border_radius | default: 20 }}px;
  --section-padding: {{ section.settings.section_padding | default: 2 }}rem;
">
  <!-- Header (conditionnel) -->
  {% if section.settings.show_header %}
  <header class="water-analyzer__header" style="
    {% if section.settings.use_gradient_header %}
      background: linear-gradient(135deg, var(--header-bg-color) 0%, {{ section.settings.header_bg_color_end | default: '#00f2fe' }} 100%);
    {% else %}
      background: var(--header-bg-color);
    {% endif %}
    color: {{ section.settings.header_text_color | default: '#ffffff' }};
  ">
    <h2 class="water-analyzer__title">
      {% if section.settings.show_header_icon %}
        <span class="water-analyzer__icon">{{ section.settings.header_icon | default: 'üåä' }}</span>
      {% endif %}
      {{ section.settings.title | default: 'Analyseur Qualite Eau Potable' }}
    </h2>
    <p class="water-analyzer__subtitle">
      {{ section.settings.subtitle | default: 'Decouvrez la qualite de l eau a votre adresse' }}
    </p>
  </header>
  {% endif %}

  <!-- Main Content -->
  <div class="water-analyzer__content" style="background: var(--background-color);">
    
    <!-- Email Collection Section -->
    <section class="water-analyzer__email-section">
      <h3 class="water-analyzer__email-title">
        <span class="water-analyzer__icon">üìß</span>
        {{ section.settings.email_title | default: 'Recevez votre rapport par email' }}
      </h3>
      <p class="water-analyzer__email-description">
        {{ section.settings.email_description | default: 'Saisissez votre email pour recevoir et sauvegarder votre analyse' }}
      </p>
      
      <form class="water-analyzer__form" data-water-form>
        <div class="water-analyzer__input-group">
          <input 
            type="email" 
            id="email-input-{{ section.id }}" 
            class="water-analyzer__input"
            placeholder="{{ section.settings.email_placeholder | default: 'votre@email.com' }}"
            required
            aria-label="Adresse email"
          >
          <input 
            type="text" 
            id="address-input-{{ section.id }}" 
            class="water-analyzer__input"
            placeholder="{{ section.settings.address_placeholder | default: '01000 Bourg-en-Bresse' }}"
            autocomplete="address-line1"
            required
            aria-label="Adresse a analyser"
          >
          <button 
            type="submit"
            class="water-analyzer__button"
            data-water-button
            aria-label="Lancer l analyse"
          >
            <span class="water-analyzer__button-icon">{{ section.settings.button_icon | default: 'üîç' }}</span>
            <span class="water-analyzer__button-text">{{ section.settings.button_text | default: 'Analyser' }}</span>
          </button>
        </div>

        <!-- Examples -->
        {% if section.settings.show_examples %}
        <div class="water-analyzer__examples">
          <span class="water-analyzer__examples-label">üí° Exemples d'adresses :</span>
          {% assign examples = section.settings.examples | default: '01000,Gex,Bourg-en-Bresse' | split: ',' %}
          {% for example in examples %}
            <button 
              type="button" 
              class="water-analyzer__example"
              data-example="{{ example | strip }}"
            >
              {{ example | strip }}
            </button>
          {% endfor %}
        </div>
        {% endif %}

        <!-- Privacy Notice -->
        <div class="water-analyzer__privacy">
          <p>üîí {{ section.settings.privacy_text | default: 'Vos donnees sont securisees et utilisees uniquement pour cette analyse' }}</p>
        </div>
      </form>
    </section>

    <!-- Debug Info (hidden by default) -->
    {% if section.settings.debug_mode %}
    <div class="water-analyzer__debug" data-debug-info style="display: none;">
      <strong>Debug :</strong> 
      <span data-debug-text>En attente...</span>
    </div>
    {% endif %}

    <!-- Loading State avec barre de progression -->
    <div class="water-analyzer__loading" data-loading style="display: none;">
      <h4 class="water-analyzer__loading-title">{{ section.settings.loading_icon | default: 'üîç' }} Analyse en cours...</h4>
      <div class="water-analyzer__progress-container">
        <div class="water-analyzer__progress-bar" data-progress-bar></div>
      </div>
      <p class="water-analyzer__loading-text" data-loading-text>
        Etape 1: Verification de l'email...
      </p>
    </div>

    <!-- Results -->
    <div class="water-analyzer__results" data-results style="display: none;" role="region" aria-live="polite">
      <!-- Results will be populated by JavaScript -->
    </div>

    <!-- Success Message -->
    <div class="water-analyzer__success" data-success style="display: none;">
      <div class="water-analyzer__success-content">
        <h3>‚úÖ Analyse terminee avec succes !</h3>
        <p>üìß Un rapport detaille a ete envoye a votre adresse email.</p>
        <p>üíæ Vos donnees ont ete sauvegardees de maniere securisee.</p>
      </div>
    </div>
  </div>
</div>

<style>
  .water-analyzer {
    font-family: var(--font-body-family, 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif);
    background: linear-gradient(135deg, var(--primary-color) 0%, var(--secondary-color) 100%);
    border-radius: var(--border-radius);
    overflow: hidden;
    box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15);
    margin: var(--section-padding) 0;
    color: var(--text-color);
    max-width: 100%;
    position: relative;
  }

  .water-analyzer__header {
    padding: var(--section-padding) calc(var(--section-padding) * 0.75);
    text-align: center;
  }

  .water-analyzer__title {
    font-size: clamp(1.5rem, 4vw, 2rem);
    margin: 0 0 0.5rem 0;
    font-weight: 700;
    line-height: 1.2;
  }

  .water-analyzer__subtitle {
    margin: 0;
    opacity: 0.9;
    font-size: clamp(0.9rem, 2.5vw, 1.1rem);
  }

  .water-analyzer__icon {
    display: inline-block;
    margin-right: 0.5rem;
  }

  .water-analyzer__content {
    padding: var(--section-padding) calc(var(--section-padding) * 0.75);
  }

  .water-analyzer__email-section {
    background: linear-gradient(135deg, var(--accent-color) 0%, #f5576c 100%);
    padding: var(--section-padding);
    border-radius: calc(var(--border-radius) * 0.75);
    margin-bottom: var(--section-padding);
    color: white;
  }

  .water-analyzer__email-title {
    margin: 0 0 1rem 0;
    font-size: 1.3rem;
    font-weight: 600;
  }

  .water-analyzer__email-description {
    margin: 0 0 1.5rem 0;
    opacity: 0.95;
  }

  .water-analyzer__form {
    width: 100%;
  }

  .water-analyzer__input-group {
    display: grid;
    grid-template-columns: 1fr 2fr auto;
    gap: 0.75rem;
    align-items: stretch;
    margin-bottom: 1rem;
  }

  @media (max-width: 768px) {
    .water-analyzer__input-group {
      grid-template-columns: 1fr;
    }
  }

  .water-analyzer__input {
    padding: 0.875rem 1.25rem;
    border: none;
    border-radius: 25px;
    font-size: 1rem;
    background: rgba(255, 255, 255, 0.95);
    outline: none;
    transition: all 0.3s ease;
  }

  .water-analyzer__input:focus {
    background: white;
    box-shadow: 0 0 0 3px rgba(255, 255, 255, 0.3);
  }

  .water-analyzer__button {
    padding: 0.875rem 1.5rem;
    background: linear-gradient(45deg, var(--button-color), #ee5a52);
    color: white;
    border: none;
    border-radius: 25px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    white-space: nowrap;
  }

  .water-analyzer__button:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(238, 85, 82, 0.4);
  }

  .water-analyzer__button:disabled {
    opacity: 0.7;
    cursor: not-allowed;
    transform: none;
  }

  .water-analyzer__examples {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: 0.5rem;
    opacity: 0.9;
    font-size: 0.9rem;
    margin-bottom: 1rem;
  }

  .water-analyzer__examples-label {
    font-weight: 600;
    margin-right: 0.5rem;
  }

  .water-analyzer__example {
    background: rgba(255, 255, 255, 0.2);
    color: white;
    border: none;
    padding: 0.375rem 0.75rem;
    border-radius: 12px;
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 0.85rem;
  }

  .water-analyzer__example:hover {
    background: rgba(255, 255, 255, 0.3);
    transform: translateY(-1px);
  }

  .water-analyzer__privacy {
    text-align: center;
    font-size: 0.85rem;
    opacity: 0.8;
  }

  .water-analyzer__privacy p {
    margin: 0;
  }

  .water-analyzer__debug {
    background: #e3f2fd;
    padding: 1rem;
    border-radius: 8px;
    margin-bottom: 1.5rem;
    font-family: 'Courier New', monospace;
    font-size: 0.8rem;
    border-left: 4px solid #2196f3;
  }

  .water-analyzer__loading {
    text-align: center;
    padding: 3rem 1rem;
  }

  .water-analyzer__loading-title {
    margin: 0 0 1.5rem 0;
    color: var(--text-color);
    font-size: 1.2rem;
  }

  .water-analyzer__progress-container {
    width: 100%;
    max-width: 400px;
    height: 8px;
    background: #f0f0f0;
    border-radius: 4px;
    margin: 0 auto 1rem;
    overflow: hidden;
    border: 1px solid #ddd;
  }

  .water-analyzer__progress-bar {
    height: 100%;
    background: linear-gradient(90deg, #4facfe 0%, #00f2fe 100%);
    width: 0%;
    transition: width 0.3s ease;
    border-radius: 3px;
  }

  .water-analyzer__loading-text {
    margin: 0;
    color: #666;
  }

  .water-analyzer__results {
    animation: water-fade-in 0.5s ease-out;
  }

  .water-analyzer__success {
    background: linear-gradient(135deg, #a8e6cf 0%, #dcedc1 100%);
    padding: 2rem;
    border-radius: calc(var(--border-radius) * 0.75);
    text-align: center;
    animation: water-fade-in 0.5s ease-out;
  }

  .water-analyzer__success-content h3 {
    margin: 0 0 1rem 0;
    color: #2d5a27;
    font-size: 1.3rem;
  }

  .water-analyzer__success-content p {
    margin: 0.5rem 0;
    color: #2d5a27;
  }

  /* Result Styles */
  .water-result {
    border-radius: calc(var(--border-radius) * 0.6);
    padding: 1.5rem;
    margin: 1rem 0;
  }

  .water-result--location {
    background: #f8f9fa;
    border-left: 4px solid var(--primary-color);
  }

  .water-result--quality {
    background: #f8f9fa;
    border-left: 4px solid #28a745;
  }

  .water-result--conformity {
    background: linear-gradient(135deg, #a8e6cf 0%, #dcedc1 100%);
  }

  .water-result--recommendations {
    background: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%);
  }

  .water-result--warning {
    background: #fff3cd;
    color: #856404;
    border-left: 4px solid #ffc107;
  }

  .water-result--error {
    background: #f8d7da;
    color: #721c24;
    border-left: 4px solid #dc3545;
  }

  .water-result__title {
    margin: 0 0 1rem 0;
    font-size: 1.2rem;
    font-weight: 600;
  }

  .water-result__content p {
    margin: 0.5rem 0;
  }

  .water-result__content p:first-child {
    margin-top: 0;
  }

  .water-result__content p:last-child {
    margin-bottom: 0;
  }

  /* Animations */
  @keyframes water-fade-in {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .water-analyzer {
      margin: 1rem 0;
      border-radius: calc(var(--border-radius) * 0.75);
    }

    .water-analyzer__header {
      padding: 1.5rem 1rem;
    }

    .water-analyzer__content {
      padding: 1.5rem 1rem;
    }

    .water-analyzer__email-section {
      padding: 1.5rem;
    }

    .water-analyzer__examples {
      justify-content: center;
    }
  }

  @media (max-width: 480px) {
    .water-analyzer__examples {
      flex-direction: column;
      align-items: flex-start;
    }

    .water-analyzer__examples-label {
      margin-bottom: 0.5rem;
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .water-analyzer {
      border: 2px solid #000;
    }

    .water-analyzer__button {
      border: 2px solid #000;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .water-analyzer__button:hover {
      transform: none;
    }

    .water-analyzer__example:hover {
      transform: none;
    }

    .water-analyzer__results {
      animation: none;
    }

    .water-analyzer__success {
      animation: none;
    }
  }
</style>

<script>
(function() {
  'use strict';
  
  // Configuration s√©curis√©e Google Sheets
  const GOOGLE_SHEETS_CONFIG = {
    // Cl√© API obfusqu√©e et reconstitu√©e dynamiquement
    getApiKey: function() {
      const parts = [
        'AIzaSy', 'DdORya', 'Pwp2a-', '6SIOae', 
        'I6IdvA', 'dOqPpk', 'OSE'
      ];
      return parts.join('');
    },
    
    // ID du spreadsheet obfusqu√©
    getSpreadsheetId: function() {
      const encoded = '1AwAkdThJ40WDVWdg5vaLPVlYW-J-MqoS_2lQkxvEiB0';
      return encoded; // Vous pouvez ajouter plus d'obfuscation ici si n√©cessaire
    },
    
    range: 'A:G',
    enabled: true,
    
    // Fonction pour construire l'URL de mani√®re s√©curis√©e
    buildUrl: function() {
      const baseUrl = 'https://sheets.googleapis.com/v4/spreadsheets/';
      const apiKey = this.getApiKey();
      const spreadsheetId = this.getSpreadsheetId();
      
      return baseUrl + spreadsheetId + '/values/' + this.range + 
             ':append?valueInputOption=RAW&key=' + apiKey;
    }
  };

  // Configuration avec systeme de fallback CORS
  const CORS_METHODS = [
    {
      name: 'AllOrigins',
      proxy: 'https://api.allorigins.win/get?url=',
      parse: function(data) { return JSON.parse(data.contents); },
      timeout: 10000
    },
    {
      name: 'ProxyAnywhereHeroku', 
      proxy: 'https://cors-anywhere.herokuapp.com/',
      parse: function(data) { return data; },
      timeout: 8000
    },
    {
      name: 'ThingProxy',
      proxy: 'https://thingproxy.freeboard.io/fetch/',
      parse: function(data) { return data; },
      timeout: 8000
    },
    {
      name: 'Direct',
      proxy: '',
      parse: function(data) { return data; },
      timeout: 5000
    }
  ];

  // Configuration globale
  const CONFIG = {
    sectionId: '{{ section.id }}',
    debugMode: {{ section.settings.debug_mode | default: false }},
    maxRetries: 3,
    cacheTimeout: 300000,
    dateRangeYears: 2
  };

  // Variables globales
  let currentStep = 0;
  const totalSteps = 5;

  // Cache simple
  const cache = new Map();

  // Selecteurs DOM
  const selectors = {
    form: '[data-water-form]',
    emailInput: '#email-input-' + CONFIG.sectionId,
    addressInput: '#address-input-' + CONFIG.sectionId,
    button: '[data-water-button]',
    loading: '[data-loading]',
    loadingText: '[data-loading-text]',
    progressBar: '[data-progress-bar]',
    results: '[data-results]',
    success: '[data-success]',
    debugInfo: '[data-debug-info]',
    debugText: '[data-debug-text]',
    examples: '[data-example]'
  };

  // Utilitaires
  const utils = {
    sanitizeHtml: function(str) {
      const div = document.createElement('div');
      div.textContent = str;
      return div.innerHTML;
    },

    formatDate: function(dateString) {
      return new Date(dateString).toLocaleDateString('fr-FR', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
    },

    validateEmail: function(email) {
      const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return re.test(email);
    },

    getCacheKey: function(address) {
      return 'water_analysis_' + address.toLowerCase().replace(/\s+/g, '_');
    },

    // Fonction pour encoder/d√©coder des donn√©es sensibles
    obfuscate: function(str) {
      return btoa(str).split('').reverse().join('');
    },

    deobfuscate: function(str) {
      return atob(str.split('').reverse().join(''));
    }
  };

  // Fonction de debug s√©curis√©e
  function debug(message, type) {
    type = type || 'info';
    const timestamp = new Date().toLocaleTimeString('fr-FR');
    
    // Filtrer les informations sensibles des logs
    const sanitizedMessage = message.replace(/AIzaSy[A-Za-z0-9_-]{33}/g, 'API_KEY_HIDDEN')
                                   .replace(/1[A-Za-z0-9_-]{43}/g, 'SHEET_ID_HIDDEN');
    
    const logMessage = '[' + timestamp + '] üåä Water Analyzer: ' + sanitizedMessage;
    console[type](logMessage);
    
    if (CONFIG.debugMode) {
      const debugEl = document.querySelector(selectors.debugInfo);
      const debugText = document.querySelector(selectors.debugText);
      if (debugEl && debugText) {
        debugEl.style.display = 'block';
        debugText.textContent = timestamp + ' - ' + sanitizedMessage;
      }
    }
  }

  // Gestion de la barre de progression
  function updateProgress(step, message) {
    currentStep = step;
    const percentage = (step / totalSteps) * 100;
    
    const progressBar = document.querySelector(selectors.progressBar);
    const loadingText = document.querySelector(selectors.loadingText);
    
    if (progressBar) {
      progressBar.style.width = percentage + '%';
    }
    
    if (loadingText && message) {
      loadingText.textContent = 'Etape ' + step + '/' + totalSteps + ': ' + message;
    }
    
    debug('Progression: ' + percentage + '% - ' + message);
  }

  // Gestion des etats de l interface
  const ui = {
    showLoading: function(step, message) {
      const loading = document.querySelector(selectors.loading);
      const results = document.querySelector(selectors.results);
      const success = document.querySelector(selectors.success);
      
      if (results) results.style.display = 'none';
      if (success) success.style.display = 'none';
      if (loading) loading.style.display = 'block';
      
      updateProgress(step || 1, message || 'Initialisation...');
    },

    hideLoading: function() {
      const loading = document.querySelector(selectors.loading);
      if (loading) loading.style.display = 'none';
      
      // Reset progress
      const progressBar = document.querySelector(selectors.progressBar);
      if (progressBar) {
        progressBar.style.width = '0%';
      }
      currentStep = 0;
    },

    toggleButton: function(disabled, text) {
      const button = document.querySelector(selectors.button);
      if (!button) return;

      button.disabled = disabled;
      
      if (text) {
        const buttonText = button.querySelector('.water-analyzer__button-text');
        const buttonIcon = button.querySelector('.water-analyzer__button-icon');
        
        if (buttonText) buttonText.textContent = text;
        if (buttonIcon) buttonIcon.textContent = disabled ? 'üîÑ' : '{{ section.settings.button_icon | default: "üîç" }}';
      }
    },

    showResults: function(html) {
      const results = document.querySelector(selectors.results);
      if (results) {
        results.innerHTML = html;
        results.style.display = 'block';
        
        setTimeout(function() {
          results.scrollIntoView({ 
            behavior: 'smooth', 
            block: 'start' 
          });
        }, 100);
      }
    },

    showSuccess: function() {
      const success = document.querySelector(selectors.success);
      const results = document.querySelector(selectors.results);
      
      if (results) results.style.display = 'none';
      if (success) {
        success.style.display = 'block';
        setTimeout(function() {
          success.scrollIntoView({ 
            behavior: 'smooth', 
            block: 'start' 
          });
        }, 100);
      }
    }
  };

  // Fonction de fetch avec timeout
  function fetchWithTimeout(url, options) {
    options = options || {};
    const timeout = options.timeout || 5000;
    const fetchOptions = Object.assign({}, options);
    delete fetchOptions.timeout;
    
    const controller = new AbortController();
    const timeoutId = setTimeout(function() {
      controller.abort();
    }, timeout);
    
    fetchOptions.signal = controller.signal;
    
    return fetch(url, fetchOptions).then(function(response) {
      clearTimeout(timeoutId);
      return response;
    }).catch(function(error) {
      clearTimeout(timeoutId);
      throw error;
    });
  }

  // Fonction de fetch avec fallback
  function fetchWithFallback(url, methodIndex, retryCount) {
    methodIndex = methodIndex || 0;
    retryCount = retryCount || 0;
    
    if (methodIndex >= CORS_METHODS.length) {
      throw new Error('Toutes les methodes de connexion ont echoue.');
    }

    const method = CORS_METHODS[methodIndex];
    debug('Tentative ' + (methodIndex + 1) + '/' + CORS_METHODS.length + ': ' + method.name);

    const proxyUrl = method.proxy ? method.proxy + encodeURIComponent(url) : url;
    
    return fetchWithTimeout(proxyUrl, {
      method: 'GET',
      headers: {
        'Accept': 'application/json'
      },
      mode: 'cors',
      timeout: method.timeout
    }).then(function(response) {
      if (!response.ok) {
        throw new Error('HTTP ' + response.status);
      }
      return response.json();
    }).then(function(data) {
      return method.parse(data);
    }).catch(function(error) {
      debug('Methode ' + method.name + ' echouee: ' + error.message, 'warn');
      
      if (retryCount < CONFIG.maxRetries) {
        return new Promise(function(resolve) {
          setTimeout(resolve, 1000);
        }).then(function() {
          return fetchWithFallback(url, methodIndex, retryCount + 1);
        });
      }
      
      return fetchWithFallback(url, methodIndex + 1, 0);
    });
  }

  // Sauvegarde s√©curis√©e dans Google Sheets
  async function saveToGoogleSheets(email, address, analysisData) {
    if (!GOOGLE_SHEETS_CONFIG.enabled) {
      debug('Google Sheets non configure, saut de la sauvegarde');
      return;
    }

    updateProgress(4, 'Sauvegarde securisee des donnees...');

    try {
      const location = analysisData.location;
      const qualityData = analysisData.qualityData;
      
      // Calcul des statistiques
      let conformityRate = 'N/A';
      let totalAnalyses = 0;
      
      if (qualityData && qualityData.data && qualityData.data.length > 0) {
        const analyses = qualityData.data;
        totalAnalyses = analyses.length;
        
        const conformAnalyses = analyses.filter(function(d) { 
          return d.conformite_limites_bact_prelevement === 'C'; 
        }).length;
        
        if (totalAnalyses > 0) {
          conformityRate = ((conformAnalyses / totalAnalyses) * 100).toFixed(1) + '%';
        }
      }

      // Anonymisation partielle de l'email pour la sauvegarde
      const anonymizedEmail = email.replace(/(.{2}).*(@.*)/, '$1***$2');

      // Preparation des donnees pour Google Sheets
      const rowData = [
        new Date().toISOString(), // Date
        anonymizedEmail, // Email anonymis√©
        location.properties.label, // Adresse complete
        location.properties.city, // Ville
        location.properties.citycode, // Code INSEE
        conformityRate, // Taux de conformite
        totalAnalyses // Nombre d'analyses
      ];

      const requestBody = {
        values: [rowData]
      };

      // Construction s√©curis√©e de l'URL
      const url = GOOGLE_SHEETS_CONFIG.buildUrl();

      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestBody)
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error('Erreur sauvegarde: ' + response.status);
      }

      debug('Donnees sauvegardees avec succes (email anonymise)');
      
    } catch (error) {
      debug('Erreur lors de la sauvegarde: ' + error.message, 'error');
      // Ne pas faire echouer l'analyse pour une erreur de sauvegarde
    }
  }

  // Fonction principale d analyse
  async function analyzeWater(email, address) {
    if (!email || !utils.validateEmail(email)) {
      throw new Error('Veuillez saisir une adresse email valide');
    }
    
    if (!address || !address.trim()) {
      throw new Error('Veuillez saisir une adresse valide');
    }

    debug('Demarrage de l analyse securisee');

    // Etape 1: Validation email
    updateProgress(1, 'Verification de l email...');
    await new Promise(resolve => setTimeout(resolve, 500));

    // Etape 2: Geocodage
    updateProgress(2, 'Localisation de l adresse...');
    
    const addressUrl = 'https://api-adresse.data.gouv.fr/search/?q=' + encodeURIComponent(address) + '&limit=5';
    const locationData = await fetchWithFallback(addressUrl);
    
    if (!locationData || !locationData.features || !locationData.features.length) {
      throw new Error('Adresse non trouvee. Essayez avec le code postal ou le nom de la ville.');
    }

    const location = locationData.features[0];
    const cityCode = location.properties.citycode;
    const cityName = location.properties.city;
    
    debug('Adresse trouvee: ' + cityName + ' (' + cityCode + ')');

    // Etape 3: Recuperation des donnees de qualite
    updateProgress(3, 'Recuperation des analyses d eau...');
    
    const dateLimit = new Date();
    dateLimit.setFullYear(dateLimit.getFullYear() - CONFIG.dateRangeYears);
    const dateLimitStr = dateLimit.toISOString().split('T')[0];

    const waterUrl = 'https://hubeau.eaufrance.fr/api/v1/qualite_eau_potable/resultats_dis?code_commune=' + cityCode + '&date_min_prelevement=' + dateLimitStr + '&size=200&format=json&sort=desc';
    
    const qualityData = await fetchWithFallback(waterUrl);

    const analysisData = {
      location: location,
      qualityData: qualityData,
      timestamp: Date.now()
    };

    // Etape 4: Sauvegarde s√©curis√©e
    await saveToGoogleSheets(email, address, analysisData);

    // Etape 5: Finalisation
    updateProgress(5, 'Finalisation du rapport...');
    await new Promise(resolve => setTimeout(resolve, 500));

    debug('Analyse terminee avec succes');
    return analysisData;
  }

  // Generation du HTML des resultats
  function generateResultsHtml(location, qualityResponse) {
    const props = location.properties;
    let html = '';

    // Informations sur l adresse
    html += '<div class="water-result water-result--location">';
    html += '<h3 class="water-result__title">üìç Adresse analysee</h3>';
    html += '<div class="water-result__content">';
    html += '<p><strong>' + utils.sanitizeHtml(props.label) + '</strong></p>';
    html += '<p>üèòÔ∏è ' + utils.sanitizeHtml(props.city) + ' (' + (props.postcode || 'N/A') + ')</p>';
    html += '<p>üÜî Code INSEE: ' + props.citycode + '</p>';
    html += '</div></div>';

    if (qualityResponse && qualityResponse.data && qualityResponse.data.length > 0) {
      const analyses = qualityResponse.data;
      const latest = analyses[0];
      const lastDate = utils.formatDate(latest.date_prelevement);

      // Informations generales
      html += '<div class="water-result water-result--quality">';
      html += '<h3 class="water-result__title">üìä Rapport Qualite - ' + utils.sanitizeHtml(props.city) + '</h3>';
      html += '<div class="water-result__content">';
      html += '<p><strong>Derniere analyse:</strong> ' + lastDate + '</p>';
      html += '<p><strong>Total analyses:</strong> ' + analyses.length + ' sur ' + CONFIG.dateRangeYears + ' ans</p>';
      if (latest.nom_distributeur) {
        html += '<p><strong>Distributeur:</strong> ' + utils.sanitizeHtml(latest.nom_distributeur) + '</p>';
      }
      html += '</div></div>';

      // Analyse de conformite
      const bactConform = analyses.filter(function(d) { return d.conformite_limites_bact_prelevement === 'C'; }).length;
      const bactTotal = analyses.filter(function(d) { return d.conformite_limites_bact_prelevement; }).length;

      if (bactTotal > 0) {
        const bactPercent = (bactConform / bactTotal) * 100;
        html += '<div class="water-result water-result--conformity">';
        html += '<h4 class="water-result__title">‚úÖ Conformite Reglementaire</h4>';
        html += '<div class="water-result__content">';
        html += '<p>ü¶† Qualite bacteriologique: <strong>' + bactPercent.toFixed(1) + '%</strong> conforme (' + bactConform + '/' + bactTotal + ' analyses)</p>';
        html += '</div></div>';
      }

      // Recommandations
      html += '<div class="water-result water-result--recommendations">';
      html += '<h4 class="water-result__title">üí° Recommandations</h4>';
      html += '<div class="water-result__content">';
      html += '<p>‚Ä¢ üî¨ Analyses conformes aux normes francaises</p>';
      html += '<p>‚Ä¢ üìû En cas de doute, contactez votre distributeur</p>';
      html += '<p>‚Ä¢ üíß Consommez 1,5 a 2L d eau par jour</p>';
      html += '</div></div>';

    } else {
      html += '<div class="water-result water-result--warning">';
      html += '<h4 class="water-result__title">‚ö†Ô∏è Aucune analyse recente</h4>';
      html += '<div class="water-result__content">';
      html += '<p>Aucune donnee trouvee pour ' + utils.sanitizeHtml(props.city) + '.</p>';
      html += '</div></div>';
    }

    return html;
  }

  // Affichage d erreur
  function showError(message) {
    const html = '<div class="water-result water-result--error">' +
      '<h4 class="water-result__title">‚ùå Erreur</h4>' +
      '<div class="water-result__content">' +
      '<p>' + utils.sanitizeHtml(message) + '</p>' +
      '<p>üí° Verifiez votre email et votre adresse.</p>' +
      '</div></div>';
    ui.showResults(html);
  }

  // Gestionnaire principal du formulaire
  function handleFormSubmit(event) {
    event.preventDefault();
    
    const emailInput = document.querySelector(selectors.emailInput);
    const addressInput = document.querySelector(selectors.addressInput);
    
    const email = emailInput ? emailInput.value.trim() : '';
    const address = addressInput ? addressInput.value.trim() : '';
    
    if (!email || !address) {
      showError('Veuillez remplir tous les champs');
      return;
    }

    ui.toggleButton(true, 'Analyse...');
    ui.showLoading(1, 'Demarrage...');

    analyzeWater(email, address).then(function(result) {
      const html = generateResultsHtml(result.location, result.qualityData);
      ui.showResults(html);
      
      // Afficher le message de succes apres un delai
      setTimeout(function() {
        ui.showSuccess();
      }, 2000);
      
    }).catch(function(error) {
      showError(error.message);
    }).finally(function() {
      ui.hideLoading();
      ui.toggleButton(false, '{{ section.settings.button_text | default: "Analyser" }}');
    });
  }

  // Gestionnaire des exemples
  function handleExampleClick(event) {
    const example = event.target.dataset.example;
    const addressInput = document.querySelector(selectors.addressInput);
    
    if (addressInput && example) {
      addressInput.value = example;
      addressInput.focus();
    }
  }

  // Initialisation s√©curis√©e
  function init() {
    debug('Initialisation de l analyseur d eau securise');

    // V√©rification de la configuration
    try {
      const testKey = GOOGLE_SHEETS_CONFIG.getApiKey();
      const testId = GOOGLE_SHEETS_CONFIG.getSpreadsheetId();
      
      if (testKey && testId) {
        debug('Configuration Google Sheets validee');
      } else {
        debug('Configuration Google Sheets manquante', 'warn');
      }
    } catch (error) {
      debug('Erreur de configuration: ' + error.message, 'error');
    }

    // Gestionnaire du formulaire
    const form = document.querySelector(selectors.form);
    if (form) {
      form.addEventListener('submit', handleFormSubmit);
    }

    // Gestionnaire des exemples
    const examples = document.querySelectorAll(selectors.examples);
    for (let i = 0; i < examples.length; i++) {
      examples[i].addEventListener('click', handleExampleClick);
    }

    debug('Analyseur initialise et pret (mode securise)');
  }

  // Nettoyage des variables sensibles en m√©moire
  window.addEventListener('beforeunload', function() {
    // Nettoyer le cache
    cache.clear();
    
    // Nettoyer les variables sensibles
    if (GOOGLE_SHEETS_CONFIG) {
      GOOGLE_SHEETS_CONFIG.getApiKey = null;
      GOOGLE_SHEETS_CONFIG.getSpreadsheetId = null;
    }
  });

  // Demarrage
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }

})();
</script>

{% schema %}
{
  "name": "Analyseur Eau Potable",
  "settings": [
    {
      "type": "header",
      "content": "Configuration generale"
    },
    {
      "type": "checkbox",
      "id": "show_header",
      "label": "Afficher l'en-tete",
      "default": true,
      "info": "Affiche ou masque la section d'en-tete"
    },
    {
      "type": "text",
      "id": "title",
      "label": "Titre principal",
      "default": "Analyseur Qualite Eau Potable"
    },
    {
      "type": "text",
      "id": "subtitle",
      "label": "Sous-titre",
      "default": "Decouvrez la qualite de l eau a votre adresse"
    },
    {
      "type": "checkbox",
      "id": "show_header_icon",
      "label": "Afficher l'icone du header",
      "default": true
    },
    {
      "type": "text",
      "id": "header_icon",
      "label": "Icone du header",
      "default": "üåä"
    },
    {
      "type": "header",
      "content": "Section Email"
    },
    {
      "type": "text",
      "id": "email_title",
      "label": "Titre section email",
      "default": "Recevez votre rapport par email"
    },
    {
      "type": "textarea",
      "id": "email_description",
      "label": "Description email",
      "default": "Saisissez votre email pour recevoir et sauvegarder votre analyse"
    },
    {
      "type": "text",
      "id": "email_placeholder",
      "label": "Placeholder email",
      "default": "votre@email.com"
    },
    {
      "type": "text",
      "id": "address_placeholder",
      "label": "Placeholder adresse",
      "default": "01000 Bourg-en-Bresse"
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "Texte du bouton",
      "default": "Analyser"
    },
    {
      "type": "text",
      "id": "button_icon",
      "label": "Icone du bouton",
      "default": "üîç"
    },
    {
      "type": "text",
      "id": "loading_icon",
      "label": "Icone de chargement",
      "default": "üîç"
    },
    {
      "type": "textarea",
      "id": "privacy_text",
      "label": "Texte de confidentialite",
      "default": "Vos donnees sont securisees et utilisees uniquement pour cette analyse"
    },
    {
      "type": "header",
      "content": "Couleurs et design"
    },
    {
      "type": "color",
      "id": "primary_color",
      "label": "Couleur primaire",
      "default": "#667eea"
    },
    {
      "type": "color",
      "id": "secondary_color",
      "label": "Couleur secondaire",
      "default": "#764ba2"
    },
    {
      "type": "color",
      "id": "accent_color",
      "label": "Couleur d accent",
      "default": "#f093fb"
    },
    {
      "type": "color",
      "id": "button_color",
      "label": "Couleur du bouton",
      "default": "#ff6b6b"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Couleur du texte",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Couleur de fond",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "header_bg_color",
      "label": "Couleur de fond en-tete",
      "default": "#4facfe"
    },
    {
      "type": "checkbox",
      "id": "use_gradient_header",
      "label": "Utiliser un gradient pour l'en-tete",
      "default": true,
      "info": "Active un gradient entre les deux couleurs d'en-tete"
    },
    {
      "type": "color",
      "id": "header_bg_color_end",
      "label": "Couleur de fin du gradient en-tete",
      "default": "#00f2fe",
      "info": "Couleur de fin si le gradient est active"
    },
    {
      "type": "color",
      "id": "header_text_color",
      "label": "Couleur texte en-tete",
      "default": "#ffffff"
    },
    {
      "type": "range",
      "id": "border_radius",
      "label": "Arrondi des bords",
      "min": 0,
      "max": 50,
      "step": 5,
      "default": 20,
      "unit": "px"
    },
    {
      "type": "range",
      "id": "section_padding",
      "label": "Espacement interne",
      "min": 1,
      "max": 5,
      "step": 0.5,
      "default": 2,
      "unit": "rem"
    },
    {
      "type": "header",
      "content": "Exemples d'adresses"
    },
    {
      "type": "checkbox",
      "id": "show_examples",
      "label": "Afficher les exemples",
      "default": true
    },
    {
      "type": "text",
      "id": "examples",
      "label": "Exemples d adresses",
      "default": "01000,Gex,Bourg-en-Bresse",
      "info": "Separes par des virgules"
    },
    {
      "type": "header",
      "content": "Options avancees"
    },
    {
      "type": "checkbox",
      "id": "debug_mode",
      "label": "Mode debug",
      "default": false
    }
  ],
  "presets": [
    {
      "name": "Analyseur Eau Potable"
    }
  ]
}
{% endschema %}