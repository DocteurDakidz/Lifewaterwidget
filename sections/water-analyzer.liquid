<!-- Analyseur Eau Potable - Version avec Formulaire Shopify Obligatoire -->
<div class="water-analyzer" data-section-id="{{ section.id }}" style="
  --primary-color: {{ section.settings.primary_color | default: '#667eea' }};
  --secondary-color: {{ section.settings.secondary_color | default: '#764ba2' }};
  --accent-color: {{ section.settings.accent_color | default: '#f093fb' }};
  --button-color: {{ section.settings.button_color | default: '#ff6b6b' }};
  --text-color: {{ section.settings.text_color | default: '#333333' }};
  --border-radius: {{ section.settings.border_radius | default: 20 }}px;
  --section-padding: {{ section.settings.section_padding | default: 2 }}rem;
">
  <!-- Header -->
  <header class="water-analyzer__header">
    <h2 class="water-analyzer__title">
      <span class="water-analyzer__icon">{{ section.settings.header_icon | default: 'üåä' }}</span>
      {{ section.settings.title | default: 'Analyseur Qualit√© Eau Potable' }}
    </h2>
    <p class="water-analyzer__subtitle">
      {{ section.settings.subtitle | default: 'D√©couvrez la qualit√© de l eau √† votre adresse' }}
    </p>
  </header>

  <!-- Main Content -->
  <div class="water-analyzer__content">
    
    <!-- Formulaire de Contact Initial -->
    <section class="water-analyzer__form-section" data-form-section>
      {% form 'contact', class: 'water-analyzer__contact-form', id: 'water-contact-form' %}
        
        <div class="water-analyzer__search">
          <h3 class="water-analyzer__search-title">
            <span class="water-analyzer__icon">{{ section.settings.search_icon | default: 'üè†' }}</span>
            {{ section.settings.search_title | default: 'Analysez votre eau' }}
          </h3>
          <p class="water-analyzer__search-description">
            {{ section.settings.search_description | default: 'Saisissez votre adresse pour obtenir un rapport de qualit√© d√©taill√©' }}
          </p>

          <!-- Messages d'erreur/succ√®s Shopify -->
          {% if form.posted_successfully? %}
            <div class="water-analyzer__success-message" style="
              background: #d4edda;
              color: #155724;
              padding: 1rem;
              border-radius: 8px;
              margin-bottom: 1rem;
              border: 1px solid #c3e6cb;
            ">
              ‚úÖ Votre demande a √©t√© envoy√©e avec succ√®s ! Lancement de l'analyse...
            </div>
          {% endif %}

          {% if form.errors %}
            <div class="water-analyzer__error-message" style="
              background: #f8d7da;
              color: #721c24;
              padding: 1rem;
              border-radius: 8px;
              margin-bottom: 1rem;
              border: 1px solid #f5c6cb;
            ">
              <h4>‚ùå Erreurs dans le formulaire :</h4>
              <ul style="margin: 0.5rem 0 0 1.5rem;">
                {% for field in form.errors %}
                  <li>{{ field | first | capitalize }} : {{ field | last }}</li>
                {% endfor %}
              </ul>
            </div>
          {% endif %}

          <!-- Champs du formulaire -->
          <div class="water-analyzer__form-fields" {% if form.posted_successfully? %}style="display: none;"{% endif %}>
            
            <!-- Adresse (obligatoire) -->
            <div class="water-analyzer__field-group">
              <label for="contact_address" class="water-analyzer__label">
                üè† Votre adresse *
              </label>
              <input 
                type="text" 
                id="contact_address"
                name="contact[address]"
                class="water-analyzer__input"
                placeholder="{{ section.settings.placeholder | default: '01000 Bourg-en-Bresse' }}"
                required
                value="{{ form.address }}"
              >
            </div>

            <!-- Email (obligatoire) -->
            <div class="water-analyzer__field-group">
              <label for="contact_email" class="water-analyzer__label">
                üìß Votre email *
              </label>
              <input 
                type="email" 
                id="contact_email"
                name="contact[email]"
                class="water-analyzer__input"
                placeholder="votre@email.com"
                required
                value="{{ form.email }}"
              >
            </div>

            <!-- Nom (optionnel) -->
            {% if section.settings.collect_name %}
            <div class="water-analyzer__field-group">
              <label for="contact_name" class="water-analyzer__label">
                üë§ Votre nom
              </label>
              <input 
                type="text" 
                id="contact_name"
                name="contact[name]"
                class="water-analyzer__input"
                placeholder="Jean Dupont"
                value="{{ form.name }}"
              >
            </div>
            {% endif %}

            <!-- Option analyse approfondie -->
            <div class="water-analyzer__field-group water-analyzer__advanced-option">
              <label class="water-analyzer__checkbox-label">
                <input 
                  type="checkbox" 
                  name="contact[advanced_analysis]"
                  value="true"
                  class="water-analyzer__checkbox"
                  required
                >
                <span class="water-analyzer__checkmark"></span>
                Je souhaite √™tre contact√© pour une analyse approfondie gratuite *
              </label>
            </div>

            <!-- Consentement CGV -->
            <div class="water-analyzer__field-group water-analyzer__consent">
              <label class="water-analyzer__checkbox-label">
                <input 
                  type="checkbox" 
                  name="contact[consent]"
                  value="true"
                  required
                  class="water-analyzer__checkbox"
                >
                <span class="water-analyzer__checkmark"></span>
                J'accepte les <a href="/pages/conditions-generales" target="_blank" style="color: white; text-decoration: underline;">conditions g√©n√©rales d'utilisation</a> de l'analyse *
              </label>
            </div>

            <!-- Bouton de soumission -->
            <div class="water-analyzer__submit-section">
              <button 
                type="submit"
                class="water-analyzer__submit-button"
                data-submit-btn
              >
                <span class="water-analyzer__button-icon">{{ section.settings.button_icon | default: 'üîç' }}</span>
                <span class="water-analyzer__button-text">{{ section.settings.button_text | default: 'Lancer l analyse' }}</span>
              </button>
            </div>

            <!-- Exemples d'adresses -->
            {% if section.settings.show_examples %}
            <div class="water-analyzer__examples">
              <span class="water-analyzer__examples-label">üí° Exemples :</span>
              {% assign examples = section.settings.examples | default: '01000,Gex,Bourg-en-Bresse' | split: ',' %}
              {% for example in examples %}
                <button 
                  type="button" 
                  class="water-analyzer__example"
                  data-example="{{ example | strip }}"
                >
                  {{ example | strip }}
                </button>
              {% endfor %}
            </div>
            {% endif %}

          </div>

        </div>

        <!-- Champs cach√©s -->
        <input type="hidden" name="contact[tags]" value="water-analysis,{{ section.settings.contact_tags | default: 'lead' }}">
        <input type="hidden" name="contact[subject]" value="Demande d'analyse eau - {{ section.settings.title }}">
        
      {% endform %}
    </section>

    <!-- Section d'analyse (cach√©e par d√©faut) -->
    <section class="water-analyzer__analysis-section" data-analysis-section {% unless form.posted_successfully? %}style="display: none;"{% endunless %}>
      
      <!-- Toggle carte -->
      {% if section.settings.enable_map %}
      <div class="water-analyzer__map-toggle">
        <button type="button" class="water-analyzer__map-btn" data-map-toggle>
          <span class="water-analyzer__map-icon">üó∫Ô∏è</span>
          <span class="water-analyzer__map-text">Utiliser la carte</span>
        </button>
      </div>
      {% endif %}

      <!-- Carte interactive -->
      {% if section.settings.enable_map %}
      <div class="water-analyzer__map-container" data-map-container style="display: none;">
        <div class="water-analyzer__map-header">
          <h4>üó∫Ô∏è Cliquez sur la carte pour s√©lectionner votre adresse</h4>
          <button type="button" class="water-analyzer__map-close" data-map-close>‚úï</button>
        </div>
        <div id="water-map-{{ section.id }}" class="water-analyzer__map" data-map></div>
        <div class="water-analyzer__map-info" data-map-info style="display: none;">
          <p><strong>Adresse s√©lectionn√©e:</strong> <span data-selected-address></span></p>
          <button type="button" class="water-analyzer__map-confirm" data-map-confirm>
            Analyser cette adresse
          </button>
        </div>
      </div>
      {% endif %}

      <!-- Barre de progression avanc√©e -->
      <div class="water-analyzer__progress-container" data-progress-container style="display: none;">
        <div class="water-analyzer__progress-header">
          <h3>üî¨ Analyse en cours...</h3>
          <div class="water-analyzer__progress-percentage" data-progress-percentage>0%</div>
        </div>
        
        <div class="water-analyzer__progress-bar">
          <div class="water-analyzer__progress-fill" data-progress-fill style="width: 0%;"></div>
        </div>
        
        <div class="water-analyzer__progress-steps">
          <div class="water-analyzer__step" data-step="1">
            <div class="water-analyzer__step-icon">üìç</div>
            <div class="water-analyzer__step-text">G√©olocalisation</div>
          </div>
          <div class="water-analyzer__step" data-step="2">
            <div class="water-analyzer__step-icon">üîç</div>
            <div class="water-analyzer__step-text">Recherche donn√©es</div>
          </div>
          <div class="water-analyzer__step" data-step="3">
            <div class="water-analyzer__step-icon">‚öóÔ∏è</div>
            <div class="water-analyzer__step-text">Analyse qualit√©</div>
          </div>
          <div class="water-analyzer__step" data-step="4">
            <div class="water-analyzer__step-icon">üìä</div>
            <div class="water-analyzer__step-text">G√©n√©ration rapport</div>
          </div>
        </div>
        
        <div class="water-analyzer__progress-details" data-progress-details>
          Initialisation de l'analyse...
        </div>
      </div>

      <!-- R√©sultats -->
      <div class="water-analyzer__results" data-results style="display: none;">
        <!-- R√©sultats g√©n√©r√©s par JavaScript -->
      </div>

    </section>

  </div>
</div>

<style>
  .water-analyzer {
    font-family: var(--font-body-family, 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif);
    background: var(--primary-color);
    border-radius: var(--border-radius);
    overflow: hidden;
    box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15);
    margin: var(--section-padding) 0;
    color: var(--text-color);
    max-width: 100%;
    position: relative;
  }

  .water-analyzer__header {
    background: var(--secondary-color);
    color: white;
    padding: var(--section-padding) calc(var(--section-padding) * 0.75);
    text-align: center;
  }

  .water-analyzer__title {
    font-size: clamp(1.5rem, 4vw, 2rem);
    margin: 0 0 0.5rem 0;
    font-weight: 700;
    line-height: 1.2;
  }

  .water-analyzer__subtitle {
    margin: 0;
    opacity: 0.9;
    font-size: clamp(0.9rem, 2.5vw, 1.1rem);
  }

  .water-analyzer__icon {
    display: inline-block;
    margin-right: 0.5rem;
  }

  .water-analyzer__content {
    background: white;
    padding: var(--section-padding) calc(var(--section-padding) * 0.75);
  }

  /* Section de recherche */
  .water-analyzer__search {
    background: var(--accent-color);
    padding: var(--section-padding);
    border-radius: calc(var(--border-radius) * 0.75);
    margin-bottom: var(--section-padding);
    color: white;
  }

  .water-analyzer__search-title {
    margin: 0 0 1rem 0;
    font-size: 1.3rem;
    font-weight: 600;
  }

  .water-analyzer__search-description {
    margin: 0 0 1.5rem 0;
    opacity: 0.95;
  }

  /* Messages d'erreur/succ√®s */
  .water-analyzer__success-message,
  .water-analyzer__error-message {
    animation: slideInDown 0.5s ease-out;
  }

  .water-analyzer__error-message ul {
    list-style-type: disc;
  }

  /* Champs de formulaire */
  .water-analyzer__form-fields {
    display: grid;
    gap: 1.25rem;
    margin-bottom: 1.5rem;
  }

  .water-analyzer__field-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .water-analyzer__label {
    font-weight: 600;
    font-size: 0.95rem;
    opacity: 0.95;
  }

  .water-analyzer__input {
    padding: 0.875rem 1.25rem;
    border: none;
    border-radius: 25px;
    font-size: 1rem;
    background: rgba(255, 255, 255, 0.95);
    outline: none;
    transition: all 0.3s ease;
    font-family: inherit;
  }

  .water-analyzer__input:focus {
    background: white;
    box-shadow: 0 0 0 3px rgba(255, 255, 255, 0.3);
  }

  .water-analyzer__input:invalid {
    box-shadow: 0 0 0 2px rgba(220, 53, 69, 0.5);
  }

  /* Cases √† cocher */
  .water-analyzer__advanced-option,
  .water-analyzer__consent {
    margin-top: 0.5rem;
  }

  .water-analyzer__checkbox-label {
    display: flex;
    align-items: flex-start;
    gap: 0.75rem;
    cursor: pointer;
    font-size: 0.9rem;
    line-height: 1.4;
  }

  .water-analyzer__checkbox {
    appearance: none;
    width: 20px;
    height: 20px;
    border: 2px solid rgba(255, 255, 255, 0.7);
    border-radius: 4px;
    background: rgba(255, 255, 255, 0.1);
    cursor: pointer;
    position: relative;
    flex-shrink: 0;
    margin-top: 2px;
  }

  .water-analyzer__checkbox:checked {
    background: rgba(255, 255, 255, 0.9);
    border-color: rgba(255, 255, 255, 0.9);
  }

  .water-analyzer__checkbox:checked::after {
    content: '‚úì';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    color: var(--accent-color);
    font-weight: bold;
    font-size: 14px;
  }

  /* Bouton de soumission */
  .water-analyzer__submit-section {
    text-align: center;
    margin-bottom: 1.5rem;
  }

  .water-analyzer__submit-button {
    padding: 1rem 2rem;
    background: var(--button-color);
    color: white;
    border: none;
    border-radius: 30px;
    font-size: 1.1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    display: inline-flex;
    align-items: center;
    gap: 0.75rem;
    min-width: 200px;
    justify-content: center;
  }

  .water-analyzer__submit-button:hover:not(:disabled) {
    transform: translateY(-3px);
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
    filter: brightness(1.1);
  }

  .water-analyzer__submit-button:disabled {
    opacity: 0.7;
    cursor: not-allowed;
    transform: none;
  }

  /* Exemples */
  .water-analyzer__examples {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: 0.5rem;
    opacity: 0.9;
    font-size: 0.9rem;
    margin-top: 1rem;
  }

  .water-analyzer__examples-label {
    font-weight: 600;
    margin-right: 0.5rem;
  }

  .water-analyzer__example {
    background: rgba(255, 255, 255, 0.2);
    color: white;
    border: none;
    padding: 0.375rem 0.75rem;
    border-radius: 12px;
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 0.85rem;
  }

  .water-analyzer__example:hover {
    background: rgba(255, 255, 255, 0.3);
    transform: translateY(-1px);
  }

  /* Barre de progression avanc√©e */
  .water-analyzer__progress-container {
    background: #f8f9fa;
    border-radius: calc(var(--border-radius) * 0.75);
    padding: 2rem;
    margin-bottom: 2rem;
    text-align: center;
  }

  .water-analyzer__progress-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
  }

  .water-analyzer__progress-header h3 {
    margin: 0;
    color: var(--text-color);
    font-size: 1.3rem;
  }

  .water-analyzer__progress-percentage {
    font-size: 1.5rem;
    font-weight: bold;
    color: var(--primary-color);
  }

  .water-analyzer__progress-bar {
    width: 100%;
    height: 12px;
    background: #e9ecef;
    border-radius: 6px;
    overflow: hidden;
    margin-bottom: 2rem;
    position: relative;
  }

  .water-analyzer__progress-fill {
    height: 100%;
    background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
    border-radius: 6px;
    transition: width 0.8s ease-out;
    position: relative;
  }

  .water-analyzer__progress-fill::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
    animation: shimmer 2s infinite;
  }

  .water-analyzer__progress-steps {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  .water-analyzer__step {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
    padding: 1rem;
    border-radius: 12px;
    background: white;
    border: 2px solid #e9ecef;
    transition: all 0.3s ease;
  }

  .water-analyzer__step.active {
    border-color: var(--primary-color);
    background: rgba(102, 126, 234, 0.1);
    transform: scale(1.05);
  }

  .water-analyzer__step.completed {
    border-color: #28a745;
    background: rgba(40, 167, 69, 0.1);
  }

  .water-analyzer__step-icon {
    font-size: 1.5rem;
    margin-bottom: 0.25rem;
  }

  .water-analyzer__step.active .water-analyzer__step-icon {
    animation: pulse 1.5s infinite;
  }

  .water-analyzer__step.completed .water-analyzer__step-icon::after {
    content: ' ‚úÖ';
  }

  .water-analyzer__step-text {
    font-size: 0.9rem;
    font-weight: 600;
    color: var(--text-color);
    text-align: center;
  }

  .water-analyzer__progress-details {
    background: white;
    padding: 1rem;
    border-radius: 8px;
    border-left: 4px solid var(--primary-color);
    font-style: italic;
    color: #666;
  }

  /* Carte */
  .water-analyzer__map-toggle {
    text-align: center;
    margin-bottom: 1.5rem;
  }

  .water-analyzer__map-btn {
    background: rgba(102, 126, 234, 0.1);
    color: var(--primary-color);
    border: 2px solid var(--primary-color);
    padding: 0.75rem 1.5rem;
    border-radius: 25px;
    cursor: pointer;
    transition: all 0.3s ease;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    font-weight: 600;
  }

  .water-analyzer__map-btn:hover {
    background: var(--primary-color);
    color: white;
    transform: translateY(-2px);
  }

  .water-analyzer__map-container {
    background: white;
    border-radius: 15px;
    margin-bottom: 1.5rem;
    overflow: hidden;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
  }

  .water-analyzer__map-header {
    background: var(--primary-color);
    color: white;
    padding: 1rem 1.5rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .water-analyzer__map-header h4 {
    margin: 0;
    font-size: 1rem;
  }

  .water-analyzer__map-close {
    background: none;
    border: none;
    color: white;
    font-size: 1.5rem;
    cursor: pointer;
    padding: 0;
    width: 30px;
    height: 30px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background 0.2s ease;
  }

  .water-analyzer__map-close:hover {
    background: rgba(255, 255, 255, 0.2);
  }

  .water-analyzer__map {
    height: 400px;
    width: 100%;
    background: #f0f0f0;
  }

  .water-analyzer__map-info {
    padding: 1rem 1.5rem;
    background: #f8f9fa;
    border-top: 1px solid #e9ecef;
  }

  .water-analyzer__map-info p {
    margin: 0 0 1rem 0;
    color: #333;
  }

  .water-analyzer__map-confirm {
    background: var(--button-color);
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 25px;
    cursor: pointer;
    font-weight: 600;
    transition: all 0.3s ease;
  }

  .water-analyzer__map-confirm:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
  }

  /* R√©sultats */
  .water-analyzer__results {
    animation: fadeInUp 0.5s ease-out;
  }

  .water-result {
    border-radius: calc(var(--border-radius) * 0.6);
    padding: 1.5rem;
    margin: 1rem 0;
  }

  .water-result--location {
    background: #f8f9fa;
    border-left: 4px solid var(--primary-color);
  }

  .water-result--quality {
    background: #f8f9fa;
    border-left: 4px solid #28a745;
  }

  .water-result--score {
    text-align: center;
    padding: 2rem;
    margin: 2rem 0;
  }

  .water-result--score.excellent {
    background: linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%);
    border-left: 4px solid #28a745;
  }

  .water-result--score.good {
    background: linear-gradient(135deg, #d1ecf1 0%, #bee5eb 100%);
    border-left: 4px solid #17a2b8;
  }

  .water-result--score.average {
    background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
    border-left: 4px solid #ffc107;
  }

  .water-result--score.poor {
    background: linear-gradient(135deg, #f8d7da 0%, #f5c6cb 100%);
    border-left: 4px solid #dc3545;
  }

  .water-score {
    font-size: 3rem;
    font-weight: bold;
    margin: 0.5rem 0;
  }

  .water-score.excellent { color: #28a745; }
  .water-score.good { color: #17a2b8; }
  .water-score.average { color: #ffc107; }
  .water-score.poor { color: #dc3545; }

  .water-result--conformity {
    background: linear-gradient(135deg, #a8e6cf 0%, #dcedc1 100%);
  }

  .water-result--recommendations {
    background: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%);
  }

  .water-result--warning {
    background: #fff3cd;
    color: #856404;
    border-left: 4px solid #ffc107;
  }

  .water-result--error {
    background: #f8d7da;
    color: #721c24;
    border-left: 4px solid #dc3545;
  }

  .water-result__title {
    margin: 0 0 1rem 0;
    font-size: 1.2rem;
    font-weight: 600;
  }

  .water-result__content p {
    margin: 0.5rem 0;
  }

  .water-result__content ul {
    margin: 0.5rem 0;
    padding-left: 1.5rem;
  }

  .water-result__content li {
    margin: 0.25rem 0;
  }

  /* Animations */
  @keyframes shimmer {
    0% { transform: translateX(-100%); }
    100% { transform: translateX(100%); }
  }

  @keyframes pulse {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.1); }
  }

  @keyframes slideInDown {
    from { 
      opacity: 0; 
      transform: translateY(-30px); 
    }
    to { 
      opacity: 1; 
      transform: translateY(0); 
    }
  }

  @keyframes fadeInUp {
    from { 
      opacity: 0; 
      transform: translateY(30px); 
    }
    to { 
      opacity: 1; 
      transform: translateY(0); 
    }
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .water-analyzer {
      margin: 1rem 0;
      border-radius: calc(var(--border-radius) * 0.75);
    }

    .water-analyzer__header {
      padding: 1.5rem 1rem;
    }

    .water-analyzer__content {
      padding: 1.5rem 1rem;
    }

    .water-analyzer__search {
      padding: 1.5rem;
    }

    .water-analyzer__progress-header {
      flex-direction: column;
      gap: 1rem;
      text-align: center;
    }

    .water-analyzer__progress-steps {
      grid-template-columns: repeat(2, 1fr);
    }

    .water-analyzer__examples {
      justify-content: center;
    }

    .water-analyzer__submit-button {
      width: 100%;
    }

    .water-analyzer__map {
      height: 300px;
    }
  }

  @media (max-width: 480px) {
    .water-analyzer__examples {
      flex-direction: column;
      align-items: flex-start;
    }

    .water-analyzer__examples-label {
      margin-bottom: 0.5rem;
    }

    .water-analyzer__map-header {
      flex-direction: column;
      gap: 0.5rem;
      text-align: center;
    }

    .water-analyzer__progress-steps {
      grid-template-columns: 1fr;
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .water-analyzer {
      border: 2px solid #000;
    }

    .water-analyzer__submit-button {
      border: 2px solid #000;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .water-analyzer__submit-button:hover {
      transform: none;
    }

    .water-analyzer__example:hover {
      transform: none;
    }

    .water-analyzer__progress-fill::after {
      animation: none;
    }

    .water-analyzer__step.active .water-analyzer__step-icon {
      animation: none;
    }

    .water-analyzer__results {
      animation: none;
    }
  }
</style>

<!-- Leaflet CSS pour la carte -->
{% if section.settings.enable_map %}
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
{% endif %}

<script>
(function() {
  'use strict';
  
  // Configuration avec syst√®me de fallback CORS
  const CORS_METHODS = [
    {
      name: 'AllOrigins',
      proxy: 'https://api.allorigins.win/get?url=',
      parse: function(data) { return JSON.parse(data.contents); },
      timeout: 10000
    },
    {
      name: 'ProxyAnywhereHeroku', 
      proxy: 'https://cors-anywhere.herokuapp.com/',
      parse: function(data) { return data; },
      timeout: 8000
    },
    {
      name: 'ThingProxy',
      proxy: 'https://thingproxy.freeboard.io/fetch/',
      parse: function(data) { return data; },
      timeout: 8000
    },
    {
      name: 'ProxyCors',
      proxy: 'https://proxy.cors.sh/',
      parse: function(data) { return data; },
      timeout: 8000
    },
    {
      name: 'Direct',
      proxy: '',
      parse: function(data) { return data; },
      timeout: 5000
    }
  ];

  // Configuration
  const CONFIG = {
    sectionId: '{{ section.id }}',
    enableMap: {{ section.settings.enable_map | default: false }},
    maxRetries: 3,
    cacheTimeout: 300000,
    dateRangeYears: 2
  };

  // Variables globales
  let map = null;
  let marker = null;
  let selectedAddress = null;
  let submittedAddress = null;
  let analysisInProgress = false;
  const cache = new Map();

  // S√©lecteurs DOM
  const selectors = {
    formSection: '[data-form-section]',
    contactForm: '#water-contact-form',
    analysisSection: '[data-analysis-section]',
    progressContainer: '[data-progress-container]',
    progressFill: '[data-progress-fill]',
    progressPercentage: '[data-progress-percentage]',
    progressDetails: '[data-progress-details]',
    results: '[data-results]',
    examples: '[data-example]',
    submitBtn: '[data-submit-btn]',
    mapToggle: '[data-map-toggle]',
    mapContainer: '[data-map-container]',
    mapElement: '[data-map]',
    mapClose: '[data-map-close]',
    mapInfo: '[data-map-info]',
    mapConfirm: '[data-map-confirm]',
    selectedAddressSpan: '[data-selected-address]'
  };

  // Utilitaires
  const utils = {
    sanitizeHtml: function(str) {
      const div = document.createElement('div');
      div.textContent = str;
      return div.innerHTML;
    },

    formatDate: function(dateString) {
      return new Date(dateString).toLocaleDateString('fr-FR', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
    },

    getCacheKey: function(address) {
      return 'water_analysis_' + address.toLowerCase().replace(/\s+/g, '_');
    },

    calculateScore: function(analyses) {
      if (!analyses || analyses.length === 0) return { score: 0, level: 'unknown' };

      let totalScore = 0;
      let validAnalyses = 0;

      analyses.forEach(function(analysis) {
        let score = 100;
        
        if (analysis.conformite_limites_bact_prelevement === 'N') score -= 30;
        if (analysis.conformite_limites_pc_prelevement === 'N') score -= 25;
        if (analysis.conformite_references_qualite_prelevement === 'N') score -= 15;
        
        if (score >= 0) {
          totalScore += score;
          validAnalyses++;
        }
      });

      if (validAnalyses === 0) return { score: 0, level: 'unknown' };

      const avgScore = totalScore / validAnalyses;
      let level = 'poor';
      
      if (avgScore >= 90) level = 'excellent';
      else if (avgScore >= 75) level = 'good';
      else if (avgScore >= 60) level = 'average';

      return { score: Math.round(avgScore), level: level };
    }
  };

  // Gestion de la progression
  const progressManager = {
    steps: [
      { id: 1, name: 'G√©olocalisation', detail: 'Recherche de votre adresse...' },
      { id: 2, name: 'Recherche donn√©es', detail: 'R√©cup√©ration des analyses officielles...' },
      { id: 3, name: 'Analyse qualit√©', detail: 'Calcul du score de qualit√©...' },
      { id: 4, name: 'G√©n√©ration rapport', detail: 'Pr√©paration de vos recommandations...' }
    ],

    show: function() {
      const container = document.querySelector(selectors.progressContainer);
      if (container) {
        container.style.display = 'block';
        this.reset();
      }
    },

    hide: function() {
      const container = document.querySelector(selectors.progressContainer);
      if (container) {
        container.style.display = 'none';
      }
    },

    reset: function() {
      this.updateProgress(0);
      this.updateDetails('Initialisation de l\'analyse...');
      
      // Reset des √©tapes
      document.querySelectorAll('.water-analyzer__step').forEach(function(step) {
        step.classList.remove('active', 'completed');
      });
    },

    updateProgress: function(percentage) {
      const fill = document.querySelector(selectors.progressFill);
      const percentageEl = document.querySelector(selectors.progressPercentage);
      
      if (fill) fill.style.width = percentage + '%';
      if (percentageEl) percentageEl.textContent = Math.round(percentage) + '%';
    },

    updateDetails: function(text) {
      const details = document.querySelector(selectors.progressDetails);
      if (details) details.textContent = text;
    },

    setStep: function(stepId) {
      const step = this.steps.find(s => s.id === stepId);
      if (!step) return;

      // Marquer les √©tapes pr√©c√©dentes comme compl√©t√©es
      for (let i = 1; i < stepId; i++) {
        const stepEl = document.querySelector('[data-step="' + i + '"]');
        if (stepEl) {
          stepEl.classList.remove('active');
          stepEl.classList.add('completed');
        }
      }

      // Marquer l'√©tape actuelle comme active
      const currentStepEl = document.querySelector('[data-step="' + stepId + '"]');
      if (currentStepEl) {
        currentStepEl.classList.add('active');
        currentStepEl.classList.remove('completed');
      }

      // Mettre √† jour les d√©tails
      this.updateDetails(step.detail);
      
      // Mettre √† jour la progression
      const percentage = ((stepId - 1) / this.steps.length) * 100;
      this.updateProgress(percentage);
    },

    complete: function() {
      // Marquer toutes les √©tapes comme compl√©t√©es
      document.querySelectorAll('.water-analyzer__step').forEach(function(step) {
        step.classList.remove('active');
        step.classList.add('completed');
      });

      this.updateProgress(100);
      this.updateDetails('Analyse termin√©e avec succ√®s !');

      // Masquer apr√®s un d√©lai
      setTimeout(() => {
        this.hide();
      }, 2000);
    }
  };

  // Gestion de la carte (identique √† avant)
  const mapManager = {
    init: function() {
      if (!CONFIG.enableMap) return;
      
      if (typeof L === 'undefined') {
        const script = document.createElement('script');
        script.src = 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.js';
        script.onload = function() {
          mapManager.setupMap();
        };
        document.head.appendChild(script);
      } else {
        mapManager.setupMap();
      }
    },

    setupMap: function() {
      const mapElement = document.querySelector(selectors.mapElement);
      if (!mapElement) return;

      map = L.map(mapElement.id).setView([46.603354, 1.888334], 6);
      
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '¬© OpenStreetMap contributors'
      }).addTo(map);

      map.on('click', mapManager.onMapClick);
    },

    onMapClick: function(e) {
      const lat = e.latlng.lat;
      const lng = e.latlng.lng;
      
      if (marker) {
        map.removeLayer(marker);
      }
      
      marker = L.marker([lat, lng]).addTo(map);
      mapManager.reverseGeocode(lat, lng);
    },

    reverseGeocode: function(lat, lng) {
      const url = 'https://api-adresse.data.gouv.fr/reverse/?lon=' + lng + '&lat=' + lat;
      
      fetchWithFallback(url).then(function(data) {
        if (data && data.features && data.features.length > 0) {
          const address = data.features[0].properties.label;
          selectedAddress = address;
          
          const addressEl = document.querySelector(selectors.selectedAddressSpan);
          const mapInfo = document.querySelector(selectors.mapInfo);
          
          if (addressEl && mapInfo) {
            addressEl.textContent = address;
            mapInfo.style.display = 'block';
          }
        }
      }).catch(function(error) {
        console.warn('Erreur geocodage inverse:', error);
      });
    },

    show: function() {
      const container = document.querySelector(selectors.mapContainer);
      if (container) {
        container.style.display = 'block';
        
        setTimeout(function() {
          if (map) {
            map.invalidateSize();
          }
        }, 100);
      }
    },

    hide: function() {
      const container = document.querySelector(selectors.mapContainer);
      if (container) {
        container.style.display = 'none';
      }
      
      selectedAddress = null;
      const mapInfo = document.querySelector(selectors.mapInfo);
      if (mapInfo) {
        mapInfo.style.display = 'none';
      }
    },

    confirmAddress: function() {
      if (selectedAddress) {
        mapManager.hide();
        
        setTimeout(function() {
          analyzeWater(selectedAddress);
        }, 300);
      }
    }
  };

  // Fonction de fetch avec timeout
  function fetchWithTimeout(url, options) {
    options = options || {};
    const timeout = options.timeout || 5000;
    const fetchOptions = Object.assign({}, options);
    delete fetchOptions.timeout;
    
    const controller = new AbortController();
    const timeoutId = setTimeout(function() {
      controller.abort();
    }, timeout);
    
    fetchOptions.signal = controller.signal;
    
    return fetch(url, fetchOptions).then(function(response) {
      clearTimeout(timeoutId);
      return response;
    }).catch(function(error) {
      clearTimeout(timeoutId);
      throw error;
    });
  }

  // Fonction de fetch avec fallback
  function fetchWithFallback(url, methodIndex, retryCount) {
    methodIndex = methodIndex || 0;
    retryCount = retryCount || 0;
    
    if (methodIndex >= CORS_METHODS.length) {
      throw new Error('Toutes les m√©thodes de connexion ont √©chou√©. V√©rifiez votre connexion internet.');
    }

    const method = CORS_METHODS[methodIndex];
    const proxyUrl = method.proxy ? method.proxy + encodeURIComponent(url) : url;
    
    return fetchWithTimeout(proxyUrl, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'User-Agent': 'WaterAnalyzer/1.0'
      },
      mode: 'cors',
      timeout: method.timeout
    }).then(function(response) {
      if (!response.ok) {
        throw new Error('HTTP ' + response.status + ': ' + response.statusText);
      }
      return response.json();
    }).then(function(data) {
      return method.parse(data);
    }).catch(function(error) {
      if (retryCount < CONFIG.maxRetries) {
        return new Promise(function(resolve) {
          setTimeout(resolve, 1000 * (retryCount + 1));
        }).then(function() {
          return fetchWithFallback(url, methodIndex, retryCount + 1);
        });
      }
      
      return fetchWithFallback(url, methodIndex + 1, 0);
    });
  }

  // Fonction d'analyse principale
  function analyzeWater(address) {
    if (!address || !address.trim()) {
      throw new Error('Veuillez saisir une adresse valide');
    }

    if (analysisInProgress) {
      return;
    }

    analysisInProgress = true;
    const cacheKey = utils.getCacheKey(address);
    
    // V√©rifier le cache
    if (cache.has(cacheKey)) {
      const cached = cache.get(cacheKey);
      if (Date.now() - cached.timestamp < CONFIG.cacheTimeout) {
        progressManager.show();
        progressManager.complete();
        
        setTimeout(function() {
          displayResults(cached.data.location, cached.data.qualityData);
          analysisInProgress = false;
        }, 2000);
        
        return Promise.resolve(cached.data);
      }
    }

    progressManager.show();
    progressManager.setStep(1);

    const addressUrl = 'https://api-adresse.data.gouv.fr/search/?q=' + encodeURIComponent(address) + '&limit=5';
    
    return fetchWithFallback(addressUrl).then(function(locationData) {
      if (!locationData || !locationData.features || !locationData.features.length) {
        throw new Error('Adresse non trouv√©e. Essayez avec le code postal ou le nom de la ville.');
      }

      const location = locationData.features[0];
      const cityCode = location.properties.citycode;
      
      progressManager.setStep(2);
      
      const dateLimit = new Date();
      dateLimit.setFullYear(dateLimit.getFullYear() - CONFIG.dateRangeYears);
      const dateLimitStr = dateLimit.toISOString().split('T')[0];

      const waterUrl = 'https://hubeau.eaufrance.fr/api/v1/qualite_eau_potable/resultats_dis?code_commune=' + cityCode + '&date_min_prelevement=' + dateLimitStr + '&size=200&format=json&sort=desc';
      
      return fetchWithFallback(waterUrl).then(function(qualityData) {
        progressManager.setStep(3);

        // Simulation du calcul (pour l'UX)
        return new Promise(function(resolve) {
          setTimeout(function() {
            progressManager.setStep(4);
            
            setTimeout(function() {
              const result = {
                location: location,
                qualityData: qualityData,
                timestamp: Date.now()
              };

              // Mise en cache
              cache.set(cacheKey, {
                data: result,
                timestamp: Date.now()
              });

              progressManager.complete();
              
              setTimeout(function() {
                displayResults(location, qualityData);
                analysisInProgress = false;
              }, 2000);

              resolve(result);
            }, 1000);
          }, 1000);
        });
      });
    }).catch(function(error) {
      progressManager.hide();
      showError(error.message);
      analysisInProgress = false;
      throw error;
    });
  }

  // G√©n√©ration du HTML des r√©sultats avec scoring
  function displayResults(location, qualityResponse) {
    const props = location.properties;
    let html = '';

    // Informations sur l'adresse
    html += '<div class="water-result water-result--location">';
    html += '<h3 class="water-result__title">üìç Adresse analys√©e</h3>';
    html += '<div class="water-result__content">';
    html += '<p><strong>' + utils.sanitizeHtml(props.label) + '</strong></p>';
    html += '<p>üèòÔ∏è ' + utils.sanitizeHtml(props.city) + ' (' + (props.postcode || 'N/A') + ')</p>';
    html += '<p>üÜî Code INSEE: ' + props.citycode + '</p>';
    if (props.context) {
      html += '<p>üìç ' + utils.sanitizeHtml(props.context) + '</p>';
    }
    html += '</div></div>';

    if (qualityResponse && qualityResponse.data && qualityResponse.data.length > 0) {
      const analyses = qualityResponse.data;
      const latest = analyses[0];
      const lastDate = utils.formatDate(latest.date_prelevement);
      const scoreData = utils.calculateScore(analyses);

      // Score de qualit√©
      html += '<div class="water-result water-result--score ' + scoreData.level + '">';
      html += '<h3 class="water-result__title">üèÜ Score de Qualit√©</h3>';
      html += '<div class="water-score ' + scoreData.level + '">' + scoreData.score + '/100</div>';
      
      let scoreText = '';
      switch(scoreData.level) {
        case 'excellent': scoreText = 'Excellente qualit√©'; break;
        case 'good': scoreText = 'Bonne qualit√©'; break;
        case 'average': scoreText = 'Qualit√© moyenne'; break;
        case 'poor': scoreText = 'Qualit√© √† surveiller'; break;
        default: scoreText = 'Donn√©es insuffisantes';
      }
      
      html += '<p><strong>' + scoreText + '</strong></p>';
      html += '</div>';

      // Informations g√©n√©rales
      html += '<div class="water-result water-result--quality">';
      html += '<h3 class="water-result__title">üìä Rapport Qualit√© - ' + utils.sanitizeHtml(props.city) + '</h3>';
      html += '<div class="water-result__content">';
      html += '<p><strong>Derni√®re analyse:</strong> ' + lastDate + '</p>';
      html += '<p><strong>Total analyses:</strong> ' + analyses.length + ' sur ' + CONFIG.dateRangeYears + ' ans</p>';
      if (latest.nom_distributeur) {
        html += '<p><strong>Distributeur:</strong> ' + utils.sanitizeHtml(latest.nom_distributeur) + '</p>';
      }
      if (latest.nom_installation) {
        html += '<p><strong>Installation:</strong> ' + utils.sanitizeHtml(latest.nom_installation) + '</p>';
      }
      html += '</div></div>';

      // Analyse de conformit√© d√©taill√©e
      const bactConform = analyses.filter(function(d) { return d.conformite_limites_bact_prelevement === 'C'; }).length;
      const bactTotal = analyses.filter(function(d) { return d.conformite_limites_bact_prelevement; }).length;
      
      const physConform = analyses.filter(function(d) { return d.conformite_limites_pc_prelevement === 'C'; }).length;
      const physTotal = analyses.filter(function(d) { return d.conformite_limites_pc_prelevement; }).length;

      if (bactTotal > 0 || physTotal > 0) {
        html += '<div class="water-result water-result--conformity">';
        html += '<h4 class="water-result__title">‚úÖ Conformit√© R√©glementaire</h4>';
        html += '<div class="water-result__content">';

        if (bactTotal > 0) {
          const bactPercent = (bactConform / bactTotal) * 100;
          html += '<p>ü¶† Qualit√© bact√©riologique: <strong>' + bactPercent.toFixed(1) + '%</strong> conforme (' + bactConform + '/' + bactTotal + ' analyses)</p>';
        }

        if (physTotal > 0) {
          const physPercent = (physConform / physTotal) * 100;
          html += '<p>‚öóÔ∏è Param√®tres physico-chimiques: <strong>' + physPercent.toFixed(1) + '%</strong> conforme (' + physConform + '/' + physTotal + ' analyses)</p>';
        }

        html += '</div></div>';
      }

      // Recommandations personnalis√©es selon le score
      html += '<div class="water-result water-result--recommendations">';
      html += '<h4 class="water-result__title">üí° Recommandations Personnalis√©es</h4>';
      html += '<div class="water-result__content">';
      
      if (scoreData.level === 'excellent') {
        html += '<p>üåü <strong>F√©licitations !</strong> Votre eau pr√©sente une excellente qualit√©.</p>';
        html += '<ul>';
        html += '<li>‚úÖ Continuez √† consommer votre eau du robinet en toute confiance</li>';
        html += '<li>üíß Maintenez une hydratation optimale (1,5-2L/jour)</li>';
        html += '<li>üå°Ô∏è Conservez l\'eau au frais pour pr√©server ses qualit√©s</li>';
        html += '</ul>';
      } else if (scoreData.level === 'good') {
        html += '<p>üëç <strong>Bonne nouvelle !</strong> Votre eau est de bonne qualit√©.</p>';
        html += '<ul>';
        html += '<li>‚úÖ Votre eau du robinet est s√ªre √† consommer</li>';
        html += '<li>üîç Surveillez les rapports de qualit√© de votre distributeur</li>';
        html += '<li>üíß Hydratez-vous r√©guli√®rement</li>';
        html += '</ul>';
      } else if (scoreData.level === 'average') {
        html += '<p>‚ö†Ô∏è <strong>Attention :</strong> La qualit√© de votre eau est moyenne.</p>';
        html += '<ul>';
        html += '<li>üìû Contactez votre distributeur pour plus d\'informations</li>';
        html += '<li>üî¨ Demandez des analyses compl√©mentaires si n√©cessaire</li>';
        html += '<li>üíß Consid√©rez une filtration si vous avez des pr√©occupations</li>';
        html += '</ul>';
      } else {
        html += '<p>üö® <strong>Vigilance requise :</strong> La qualit√© n√©cessite une attention particuli√®re.</p>';
        html += '<ul>';
        html += '<li>üìû Contactez imm√©diatement votre distributeur</li>';
        html += '<li>üî¨ Demandez une analyse approfondie</li>';
        html += '<li>üíß Envisagez des solutions de filtration temporaires</li>';
        html += '</ul>';
      }
      
      html += '</div></div>';

    } else {
      html += '<div class="water-result water-result--warning">';
      html += '<h4 class="water-result__title">‚ö†Ô∏è Aucune analyse r√©cente disponible</h4>';
      html += '<div class="water-result__content">';
      html += '<p>Aucune donn√©e d\'analyse trouv√©e pour <strong>' + utils.sanitizeHtml(props.city) + '</strong> sur les ' + CONFIG.dateRangeYears + ' derni√®res ann√©es.</p>';
      html += '<p>Cette commune peut √™tre desservie par un r√©seau intercommunal ou les donn√©es peuvent ne pas √™tre encore disponibles dans la base nationale.</p>';
      html += '<p>üí° <strong>Que faire ?</strong></p>';
      html += '<ul>';
      html += '<li>üìû Contactez votre mairie pour conna√Ætre votre distributeur</li>';
      html += '<li>üîç Demandez les rapports de qualit√© directement au distributeur</li>';
      html += '<li>üß™ Envisagez une analyse priv√©e si n√©cessaire</li>';
      html += '</ul>';
      html += '</div></div>';
    }

    const results = document.querySelector(selectors.results);
    if (results) {
      results.innerHTML = html;
      results.style.display = 'block';
      
      setTimeout(function() {
        results.scrollIntoView({ 
          behavior: 'smooth', 
          block: 'start' 
        });
      }, 100);
    }
  }

  // Affichage d'erreur
  function showError(message) {
    const html = '<div class="water-result water-result--error">' +
      '<h4 class="water-result__title">‚ùå Erreur</h4>' +
      '<div class="water-result__content">' +
      '<p>' + utils.sanitizeHtml(message) + '</p>' +
      '<p>üí° <strong>Suggestions :</strong></p>' +
      '<ul>' +
      '<li>Essayez avec un code postal (ex: 01000)</li>' +
      '<li>V√©rifiez l\'orthographe de votre adresse</li>' +
      '<li>V√©rifiez votre connexion internet</li>' +
      '</ul>' +
      '</div></div>';
      
    const results = document.querySelector(selectors.results);
    if (results) {
      results.innerHTML = html;
      results.style.display = 'block';
    }
  }

  // Gestionnaire des exemples
  function setExample(address) {
    const input = document.querySelector('#contact_address');
    if (input) {
      input.value = address;
      input.focus();
    }
  }

  // D√©tection de soumission r√©ussie et lancement automatique
  function checkFormSuccess() {
    const successMessage = document.querySelector('.water-analyzer__success-message');
    const formFields = document.querySelector('.water-analyzer__form-fields');
    
    if (successMessage && formFields) {
      // Le formulaire a √©t√© soumis avec succ√®s
      const addressInput = document.querySelector('#contact_address');
      if (addressInput && addressInput.value) {
        submittedAddress = addressInput.value;
        
        // Lancer l'analyse automatiquement apr√®s un d√©lai
        setTimeout(function() {
          analyzeWater(submittedAddress);
        }, 2000);
      }
    }
  }

  // Initialisation
  function init() {
    console.log('üåä Water Analyzer (With Mandatory Form) initialized');

    // V√©rifier si le formulaire a √©t√© soumis avec succ√®s
    checkFormSuccess();

    // Gestionnaire du formulaire de contact
    const contactForm = document.querySelector(selectors.contactForm);
    if (contactForm) {
      contactForm.addEventListener('submit', function(e) {
        const addressInput = contactForm.querySelector('[name="contact[address]"]');
        const emailInput = contactForm.querySelector('[name="contact[email]"]');
        const advancedInput = contactForm.querySelector('[name="contact[advanced_analysis]"]');
        const consentInput = contactForm.querySelector('[name="contact[consent]"]');
        const submitBtn = document.querySelector(selectors.submitBtn);

        // Validation c√¥t√© client
        if (!addressInput?.value || !emailInput?.value) {
          e.preventDefault();
          alert('Veuillez remplir tous les champs obligatoires');
          return;
        }

        if (!advancedInput?.checked) {
          e.preventDefault();
          alert('Veuillez confirmer votre souhait d\'√™tre contact√© pour une analyse approfondie');
          return;
        }

        if (!consentInput?.checked) {
          e.preventDefault();
          alert('Veuillez accepter les conditions g√©n√©rales d\'utilisation');
          return;
        }

        // D√©sactiver le bouton pendant la soumission
        if (submitBtn) {
          submitBtn.disabled = true;
          submitBtn.innerHTML = '<span class="water-analyzer__button-icon">‚è≥</span><span class="water-analyzer__button-text">Envoi en cours...</span>';
        }

        // Stocker l'adresse pour l'analyse ult√©rieure
        submittedAddress = addressInput.value;
      });
    }

    // Gestionnaires des exemples
    const examples = document.querySelectorAll(selectors.examples);
    examples.forEach(function(example) {
      example.addEventListener('click', function() {
        const address = this.dataset.example;
        setExample(address);
        
        this.style.transform = 'scale(0.95)';
        setTimeout(() => {
          this.style.transform = '';
        }, 150);
      });
    });

    // Gestionnaires de la carte
    if (CONFIG.enableMap) {
      const mapToggle = document.querySelector(selectors.mapToggle);
      const mapClose = document.querySelector(selectors.mapClose);
      const mapConfirm = document.querySelector(selectors.mapConfirm);

      if (mapToggle) {
        mapToggle.addEventListener('click', function() {
          mapManager.show();
          if (!map) {
            mapManager.init();
          }
        });
      }

      if (mapClose) {
        mapClose.addEventListener('click', mapManager.hide);
      }

      if (mapConfirm) {
        mapConfirm.addEventListener('click', mapManager.confirmAddress);
      }
    }
  }

  // D√©marrage
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }

})();
</script>

{% schema %}
{
  "name": "Analyseur Eau",
  "settings": [
    {
      "type": "header",
      "content": "Configuration g√©n√©rale"
    },
    {
      "type": "text",
      "id": "title",
      "label": "Titre principal",
      "default": "Analyseur Qualit√© Eau Potable",
      "info": "Le titre affich√© en haut de la section"
    },
    {
      "type": "text",
      "id": "subtitle",
      "label": "Sous-titre",
      "default": "D√©couvrez la qualit√© de l'eau √† votre adresse",
      "info": "Description affich√©e sous le titre"
    },
    {
      "type": "text",
      "id": "search_title",
      "label": "Titre de la section recherche",
      "default": "Analysez votre eau",
      "info": "Titre de la zone de recherche"
    },
    {
      "type": "textarea",
      "id": "search_description",
      "label": "Description de la recherche",
      "default": "Saisissez votre adresse pour obtenir un rapport de qualit√© d√©taill√©",
      "info": "Texte explicatif pour la recherche"
    },
    {
      "type": "text",
      "id": "placeholder",
      "label": "Placeholder du champ adresse",
      "default": "01000 Bourg-en-Bresse",
      "info": "Texte d'exemple dans le champ de saisie"
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "Texte du bouton",
      "default": "Lancer l'analyse",
      "info": "Texte affich√© sur le bouton de soumission"
    },
    {
      "type": "header",
      "content": "Champs du formulaire"
    },
    {
      "type": "checkbox",
      "id": "collect_name",
      "label": "Collecter le nom",
      "default": true,
      "info": "Ajouter un champ nom au formulaire"
    },
    {
      "type": "checkbox",
      "id": "show_examples",
      "label": "Afficher les exemples",
      "default": true,
      "info": "Affiche les boutons d'exemples d'adresses"
    },
    {
      "type": "text",
      "id": "examples",
      "label": "Exemples d'adresses",
      "default": "01000,Gex,Bourg-en-Bresse",
      "info": "Liste d'exemples s√©par√©s par des virgules"
    },
    {
      "type": "checkbox",
      "id": "enable_map",
      "label": "Activer la carte interactive",
      "default": true,
      "info": "Permet de s√©lectionner une adresse sur une carte"
    },
    {
      "type": "header",
      "content": "Ic√¥nes et emojis"
    },
    {
      "type": "text",
      "id": "header_icon",
      "label": "Ic√¥ne du header",
      "default": "üåä",
      "info": "Emoji affich√© dans le titre principal"
    },
    {
      "type": "text",
      "id": "search_icon",
      "label": "Ic√¥ne de recherche",
      "default": "üè†",
      "info": "Emoji affich√© dans le titre de recherche"
    },
    {
      "type": "text",
      "id": "button_icon",
      "label": "Ic√¥ne du bouton",
      "default": "üîç",
      "info": "Emoji affich√© dans le bouton"
    },
    {
      "type": "header",
      "content": "Couleurs et design"
    },
    {
      "type": "color",
      "id": "primary_color",
      "label": "Couleur primaire",
      "default": "#667eea",
      "info": "Couleur principale (header et √©l√©ments principaux)"
    },
    {
      "type": "color",
      "id": "secondary_color",
      "label": "Couleur secondaire",
      "default": "#764ba2",
      "info": "Couleur secondaire (header background)"
    },
    {
      "type": "color",
      "id": "accent_color",
      "label": "Couleur d'accent",
      "default": "#f093fb",
      "info": "Couleur de la zone de recherche"
    },
    {
      "type": "color",
      "id": "button_color",
      "label": "Couleur du bouton",
      "default": "#ff6b6b",
      "info": "Couleur du bouton d'analyse"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Couleur du texte",
      "default": "#333333",
      "info": "Couleur du texte principal"
    },
    {
      "type": "range",
      "id": "border_radius",
      "label": "Arrondi des bords",
      "min": 0,
      "max": 50,
      "step": 5,
      "default": 20,
      "unit": "px",
      "info": "Arrondi des coins de la section"
    },
    {
      "type": "range",
      "id": "section_padding",
      "label": "Espacement interne",
      "min": 1,
      "max": 5,
      "step": 1,
      "default": 2,
      "unit": "rem",
      "info": "Espacement interne de la section"
    },
    {
      "type": "header",
      "content": "Configuration technique"
    },
    {
      "type": "text",
      "id": "contact_tags",
      "label": "Tags de contact",
      "default": "lead,water-analysis",
      "info": "Tags ajout√©s aux contacts (s√©par√©s par des virgules)"
    }
  ],
  "presets": [
    {
      "name": "Analyseur Eau"
    }
  ]
}
{% endschema %}