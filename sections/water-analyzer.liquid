<!-- Analyseur Eau Potable - Design Moderne et √âl√©gant -->
<div class="water-analyzer" data-section-id="{{ section.id }}" style="
  --primary-color: {{ section.settings.primary_color | default: '#2563eb' }};
  --secondary-color: {{ section.settings.secondary_color | default: '#1e40af' }};
  --accent-color: {{ section.settings.accent_color | default: '#3b82f6' }};
  --success-color: {{ section.settings.success_color | default: '#10b981' }};
  --warning-color: {{ section.settings.warning_color | default: '#f59e0b' }};
  --error-color: {{ section.settings.error_color | default: '#ef4444' }};
  --text-color: {{ section.settings.text_color | default: '#1f2937' }};
  --text-light: {{ section.settings.text_light | default: '#6b7280' }};
  --background-color: {{ section.settings.background_color | default: '#ffffff' }};
  --border-radius: {{ section.settings.border_radius | default: 16 }}px;
  --section-padding: {{ section.settings.section_padding | default: 2 }}rem;
  --shadow-color: {{ section.settings.shadow_color | default: 'rgba(0, 0, 0, 0.1)' }};
">
  <!-- Header -->
  <header class="water-analyzer__header">
    <div class="water-analyzer__header-content">
      <h2 class="water-analyzer__title">
        <span class="water-analyzer__icon">{{ section.settings.header_icon | default: 'üíß' }}</span>
        {{ section.settings.title | default: 'Analyseur Qualit√© Eau' }}
      </h2>
      <p class="water-analyzer__subtitle">
        {{ section.settings.subtitle | default: 'D√©couvrez la qualit√© de l eau √† votre adresse en temps r√©el' }}
      </p>
    </div>
    <div class="water-analyzer__header-decoration"></div>
  </header>

  <!-- Main Content -->
  <div class="water-analyzer__content">
    
    <!-- Search Section -->
    <section class="water-analyzer__search">
      <div class="water-analyzer__search-header">
        <h3 class="water-analyzer__search-title">
          <span class="water-analyzer__search-icon">{{ section.settings.search_icon | default: 'üè†' }}</span>
          {{ section.settings.search_title | default: 'Analysez votre eau' }}
        </h3>
        <p class="water-analyzer__search-description">
          {{ section.settings.search_description | default: 'Saisissez votre adresse pour obtenir un rapport d√©taill√©' }}
        </p>
      </div>

      <!-- Map Toggle -->
      {% if section.settings.enable_map %}
      <div class="water-analyzer__map-toggle">
        <button type="button" class="water-analyzer__map-btn" data-map-toggle>
          <span class="water-analyzer__map-icon">üó∫Ô∏è</span>
          <span class="water-analyzer__map-text">Utiliser la carte</span>
        </button>
      </div>
      {% endif %}

      <!-- Interactive Map -->
      {% if section.settings.enable_map %}
      <div class="water-analyzer__map-container" data-map-container style="display: none;">
        <div class="water-analyzer__map-header">
          <h4>üó∫Ô∏è Cliquez sur la carte pour s√©lectionner votre adresse</h4>
          <button type="button" class="water-analyzer__map-close" data-map-close>‚úï</button>
        </div>
        <div id="water-map-{{ section.id }}" class="water-analyzer__map" data-map></div>
        <div class="water-analyzer__map-info" data-map-info style="display: none;">
          <p><strong>Adresse s√©lectionn√©e:</strong> <span data-selected-address></span></p>
          <button type="button" class="water-analyzer__map-confirm" data-map-confirm>
            Analyser cette adresse
          </button>
        </div>
      </div>
      {% endif %}
      
      <form class="water-analyzer__form" data-water-form>
        <div class="water-analyzer__input-group">
          <div class="water-analyzer__input-wrapper">
            <input 
              type="text" 
              id="water-input-{{ section.id }}" 
              class="water-analyzer__input"
              placeholder="{{ section.settings.placeholder | default: '75001 Paris ou Bourg-en-Bresse' }}"
              autocomplete="address-line1"
              required
              aria-label="Adresse √† analyser"
            >
            <div class="water-analyzer__input-icon">üîç</div>
          </div>
          <button 
            type="submit"
            class="water-analyzer__button"
            data-water-button
            aria-label="Lancer l analyse"
          >
            <span class="water-analyzer__button-icon">{{ section.settings.button_icon | default: 'üîç' }}</span>
            <span class="water-analyzer__button-text">{{ section.settings.button_text | default: 'Analyser' }}</span>
          </button>
        </div>

        <!-- Examples -->
        {% if section.settings.show_examples %}
        <div class="water-analyzer__examples">
          <span class="water-analyzer__examples-label">üí° Exemples :</span>
          {% assign examples = section.settings.examples | default: '75001,Lyon,Marseille,Toulouse' | split: ',' %}
          {% for example in examples %}
            <button 
              type="button" 
              class="water-analyzer__example"
              data-example="{{ example | strip }}"
            >
              {{ example | strip }}
            </button>
          {% endfor %}
        </div>
        {% endif %}
      </form>
    </section>

    <!-- Debug Info (hidden by default) -->
    {% if section.settings.debug_mode %}
    <div class="water-analyzer__debug" data-debug-info style="display: none;">
      <strong>Debug :</strong> 
      <span data-debug-text>En attente...</span>
    </div>
    {% endif %}

    <!-- Loading State with Animations -->
    <div class="water-analyzer__loading" data-loading style="display: none;">
      
      <!-- Animation Type: Progress Bar -->
      {% if section.settings.loading_animation == 'progress' %}
      <div class="loading-animation loading-animation--progress">
        <div class="progress-container">
          <div class="progress-bar">
            <div class="progress-fill" data-progress-fill></div>
          </div>
          <div class="progress-text">
            <span data-progress-percent>0</span>%
          </div>
        </div>
        <h4 class="loading-title">{{ section.settings.loading_icon | default: 'üîç' }} Analyse en cours...</h4>
        <p class="loading-description" data-loading-text>Initialisation...</p>
      </div>
      {% endif %}

      <!-- Animation Type: Water Glass -->
      {% if section.settings.loading_animation == 'water' or section.settings.loading_animation == blank %}
      <div class="loading-animation loading-animation--water">
        <div class="water-glass">
          <div class="water-fill" data-water-fill></div>
          <div class="water-bubbles">
            <div class="bubble bubble-1"></div>
            <div class="bubble bubble-2"></div>
            <div class="bubble bubble-3"></div>
          </div>
          <div class="glass-shine"></div>
        </div>
        <div class="water-percentage" data-water-percent>0%</div>
        <h4 class="loading-title">{{ section.settings.loading_icon | default: 'üíß' }} Analyse de la qualit√©...</h4>
        <p class="loading-description" data-loading-text">Initialisation...</p>
      </div>
      {% endif %}

      <!-- Animation Type: Ripple -->
      {% if section.settings.loading_animation == 'ripple' %}
      <div class="loading-animation loading-animation--ripple">
        <div class="ripple-container">
          <div class="ripple ripple-1"></div>
          <div class="ripple ripple-2"></div>
          <div class="ripple ripple-3"></div>
          <div class="ripple-center">üíß</div>
        </div>
        <div class="ripple-percentage" data-ripple-percent>0%</div>
        <h4 class="loading-title">{{ section.settings.loading_icon | default: 'üåä' }} Analyse en cours...</h4>
        <p class="loading-description" data-loading-text>Initialisation...</p>
      </div>
      {% endif %}

      <!-- Animation Type: Dots -->
      {% if section.settings.loading_animation == 'dots' %}
      <div class="loading-animation loading-animation--dots">
        <div class="dots-container">
          <div class="dot dot-1"></div>
          <div class="dot dot-2"></div>
          <div class="dot dot-3"></div>
          <div class="dot dot-4"></div>
          <div class="dot dot-5"></div>
        </div>
        <div class="dots-percentage" data-dots-percent>0%</div>
        <h4 class="loading-title">{{ section.settings.loading_icon | default: '‚ö°' }} Traitement...</h4>
        <p class="loading-description" data-loading-text>Initialisation...</p>
      </div>
      {% endif %}

    </div>

    <!-- Results -->
    <div class="water-analyzer__results" data-results style="display: none;" role="region" aria-live="polite">
      <!-- Results will be populated by JavaScript -->
    </div>
  </div>
</div>

<style>
  .water-analyzer {
    font-family: var(--font-body-family, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif);
    background: var(--background-color);
    border-radius: var(--border-radius);
    overflow: hidden;
    box-shadow: 0 20px 40px var(--shadow-color);
    margin: var(--section-padding) 0;
    color: var(--text-color);
    max-width: 100%;
    position: relative;
    border: 1px solid rgba(0, 0, 0, 0.05);
  }

  /* Header Styles */
  .water-analyzer__header {
    background: var(--primary-color);
    color: white;
    padding: calc(var(--section-padding) * 1.5) var(--section-padding);
    position: relative;
    overflow: hidden;
  }

  .water-analyzer__header-content {
    position: relative;
    z-index: 2;
    text-align: center;
  }

  .water-analyzer__header-decoration {
    position: absolute;
    top: 0;
    right: 0;
    width: 200px;
    height: 200px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 50%;
    transform: translate(50%, -50%);
  }

  .water-analyzer__title {
    font-size: clamp(1.75rem, 5vw, 2.5rem);
    margin: 0 0 0.75rem 0;
    font-weight: 700;
    line-height: 1.2;
    letter-spacing: -0.02em;
  }

  .water-analyzer__subtitle {
    margin: 0;
    opacity: 0.9;
    font-size: clamp(1rem, 3vw, 1.2rem);
    font-weight: 400;
    line-height: 1.5;
  }

  .water-analyzer__icon {
    display: inline-block;
    margin-right: 0.75rem;
    font-size: 1.2em;
  }

  /* Content Styles */
  .water-analyzer__content {
    padding: var(--section-padding);
  }

  /* Search Section */
  .water-analyzer__search {
    background: #f8fafc;
    padding: calc(var(--section-padding) * 1.25);
    border-radius: calc(var(--border-radius) * 0.75);
    margin-bottom: var(--section-padding);
    border: 1px solid #e2e8f0;
  }

  .water-analyzer__search-header {
    text-align: center;
    margin-bottom: 2rem;
  }

  .water-analyzer__search-title {
    margin: 0 0 1rem 0;
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--text-color);
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  .water-analyzer__search-description {
    margin: 0;
    color: var(--text-light);
    font-size: 1.1rem;
    line-height: 1.6;
  }

  /* Form Styles */
  .water-analyzer__form {
    width: 100%;
  }

  .water-analyzer__input-group {
    display: flex;
    gap: 1rem;
    align-items: stretch;
    flex-wrap: wrap;
    margin-bottom: 1.5rem;
  }

  .water-analyzer__input-wrapper {
    flex: 1;
    min-width: 280px;
    position: relative;
  }

  .water-analyzer__input {
    width: 100%;
    padding: 1rem 1.25rem 1rem 3rem;
    border: 2px solid #e2e8f0;
    border-radius: calc(var(--border-radius) * 0.75);
    font-size: 1rem;
    background: white;
    outline: none;
    transition: all 0.3s ease;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  }

  .water-analyzer__input:focus {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
  }

  .water-analyzer__input-icon {
    position: absolute;
    left: 1rem;
    top: 50%;
    transform: translateY(-50%);
    color: var(--text-light);
    font-size: 1.1rem;
  }

  .water-analyzer__button {
    padding: 1rem 2rem;
    background: var(--primary-color);
    color: white;
    border: none;
    border-radius: calc(var(--border-radius) * 0.75);
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    white-space: nowrap;
    box-shadow: 0 4px 12px rgba(37, 99, 235, 0.3);
  }

  .water-analyzer__button:hover:not(:disabled) {
    background: var(--secondary-color);
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(37, 99, 235, 0.4);
  }

  .water-analyzer__button:disabled {
    opacity: 0.7;
    cursor: not-allowed;
    transform: none;
  }

  /* Examples */
  .water-analyzer__examples {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: 0.75rem;
    justify-content: center;
  }

  .water-analyzer__examples-label {
    font-weight: 600;
    color: var(--text-light);
    font-size: 0.9rem;
  }

  .water-analyzer__example {
    background: white;
    color: var(--text-color);
    border: 1px solid #e2e8f0;
    padding: 0.5rem 1rem;
    border-radius: calc(var(--border-radius) * 0.5);
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 0.9rem;
    font-weight: 500;
  }

  .water-analyzer__example:hover {
    background: var(--primary-color);
    color: white;
    border-color: var(--primary-color);
    transform: translateY(-1px);
  }

  /* Map Styles */
  .water-analyzer__map-toggle {
    margin-bottom: 1.5rem;
    text-align: center;
  }

  .water-analyzer__map-btn {
    background: white;
    color: var(--primary-color);
    border: 2px solid var(--primary-color);
    padding: 0.75rem 1.5rem;
    border-radius: calc(var(--border-radius) * 0.75);
    cursor: pointer;
    transition: all 0.3s ease;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    font-weight: 600;
  }

  .water-analyzer__map-btn:hover {
    background: var(--primary-color);
    color: white;
    transform: translateY(-2px);
  }

  .water-analyzer__map-container {
    background: white;
    border-radius: var(--border-radius);
    margin-bottom: 1.5rem;
    overflow: hidden;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    border: 1px solid #e2e8f0;
  }

  .water-analyzer__map-header {
    background: var(--primary-color);
    color: white;
    padding: 1rem 1.5rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .water-analyzer__map-header h4 {
    margin: 0;
    font-size: 1rem;
    font-weight: 600;
  }

  .water-analyzer__map-close {
    background: none;
    border: none;
    color: white;
    font-size: 1.5rem;
    cursor: pointer;
    padding: 0;
    width: 32px;
    height: 32px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background 0.2s ease;
  }

  .water-analyzer__map-close:hover {
    background: rgba(255, 255, 255, 0.2);
  }

  .water-analyzer__map {
    height: 400px;
    width: 100%;
    background: #f0f0f0;
  }

  .water-analyzer__map-info {
    padding: 1rem 1.5rem;
    background: #f8fafc;
    border-top: 1px solid #e2e8f0;
  }

  .water-analyzer__map-info p {
    margin: 0 0 1rem 0;
    color: var(--text-color);
  }

  .water-analyzer__map-confirm {
    background: var(--success-color);
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: calc(var(--border-radius) * 0.75);
    cursor: pointer;
    font-weight: 600;
    transition: all 0.3s ease;
  }

  .water-analyzer__map-confirm:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(16, 185, 129, 0.3);
  }

  /* Debug */
  .water-analyzer__debug {
    background: #eff6ff;
    padding: 1rem;
    border-radius: calc(var(--border-radius) * 0.5);
    margin-bottom: 1.5rem;
    font-family: 'Monaco', 'Menlo', monospace;
    font-size: 0.8rem;
    border-left: 4px solid var(--primary-color);
    color: var(--text-color);
  }

  /* Loading Animations */
  .water-analyzer__loading {
    text-align: center;
    padding: 3rem 1rem;
    background: #f8fafc;
    border-radius: var(--border-radius);
    margin: 1rem 0;
  }

  .loading-title {
    margin: 1.5rem 0 0.5rem 0;
    color: var(--text-color);
    font-size: 1.3rem;
    font-weight: 600;
  }

  .loading-description {
    margin: 0;
    color: var(--text-light);
    font-size: 1rem;
  }

  /* Progress Bar Animation */
  .loading-animation--progress .progress-container {
    margin-bottom: 1rem;
  }

  .progress-bar {
    width: 100%;
    max-width: 300px;
    height: 8px;
    background: #e2e8f0;
    border-radius: 4px;
    overflow: hidden;
    margin: 0 auto 1rem;
    position: relative;
  }

  .progress-fill {
    height: 100%;
    background: linear-gradient(90deg, var(--primary-color), var(--accent-color));
    border-radius: 4px;
    width: 0%;
    transition: width 0.3s ease;
    position: relative;
  }

  .progress-fill::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
    animation: progress-shine 2s infinite;
  }

  .progress-text {
    font-size: 1.2rem;
    font-weight: 600;
    color: var(--primary-color);
  }

  @keyframes progress-shine {
    0% { transform: translateX(-100%); }
    100% { transform: translateX(100%); }
  }

  /* Water Glass Animation */
  .loading-animation--water .water-glass {
    width: 80px;
    height: 120px;
    border: 3px solid var(--primary-color);
    border-radius: 0 0 40px 40px;
    margin: 0 auto 1rem;
    position: relative;
    overflow: hidden;
    background: rgba(37, 99, 235, 0.05);
  }

  .water-fill {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: linear-gradient(180deg, var(--accent-color), var(--primary-color));
    height: 0%;
    transition: height 0.5s ease;
    border-radius: 0 0 37px 37px;
  }

  .water-fill::before {
    content: '';
    position: absolute;
    top: -10px;
    left: 0;
    right: 0;
    height: 20px;
    background: var(--accent-color);
    border-radius: 50%;
    animation: water-wave 2s infinite ease-in-out;
  }

  .water-bubbles {
    position: absolute;
    width: 100%;
    height: 100%;
  }

  .bubble {
    position: absolute;
    background: rgba(255, 255, 255, 0.6);
    border-radius: 50%;
    animation: bubble-rise 3s infinite ease-in-out;
  }

  .bubble-1 {
    width: 6px;
    height: 6px;
    left: 20%;
    animation-delay: 0s;
  }

  .bubble-2 {
    width: 4px;
    height: 4px;
    left: 50%;
    animation-delay: 1s;
  }

  .bubble-3 {
    width: 8px;
    height: 8px;
    left: 70%;
    animation-delay: 2s;
  }

  .glass-shine {
    position: absolute;
    top: 10px;
    left: 10px;
    width: 15px;
    height: 30px;
    background: rgba(255, 255, 255, 0.3);
    border-radius: 10px;
    transform: rotate(-10deg);
  }

  .water-percentage {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--primary-color);
    margin-bottom: 0.5rem;
  }

  @keyframes water-wave {
    0%, 100% { transform: translateX(0) rotate(0deg); }
    50% { transform: translateX(5px) rotate(180deg); }
  }

  @keyframes bubble-rise {
    0% {
      bottom: 0;
      opacity: 0;
    }
    50% {
      opacity: 1;
    }
    100% {
      bottom: 100%;
      opacity: 0;
    }
  }

  /* Ripple Animation */
  .loading-animation--ripple .ripple-container {
    width: 100px;
    height: 100px;
    margin: 0 auto 1rem;
    position: relative;
  }

  .ripple {
    position: absolute;
    border: 2px solid var(--primary-color);
    border-radius: 50%;
    animation: ripple-expand 2s infinite ease-out;
  }

  .ripple-1 { animation-delay: 0s; }
  .ripple-2 { animation-delay: 0.5s; }
  .ripple-3 { animation-delay: 1s; }

  .ripple-center {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 2rem;
    z-index: 10;
  }

  .ripple-percentage {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--primary-color);
    margin-bottom: 0.5rem;
  }

  @keyframes ripple-expand {
    0% {
      width: 0;
      height: 0;
      top: 50%;
      left: 50%;
      opacity: 1;
    }
    100% {
      width: 100px;
      height: 100px;
      top: 0;
      left: 0;
      opacity: 0;
    }
  }

  /* Dots Animation */
  .loading-animation--dots .dots-container {
    display: flex;
    justify-content: center;
    gap: 0.5rem;
    margin-bottom: 1rem;
  }

  .dot {
    width: 12px;
    height: 12px;
    background: var(--primary-color);
    border-radius: 50%;
    animation: dot-bounce 1.4s infinite ease-in-out both;
  }

  .dot-1 { animation-delay: -0.32s; }
  .dot-2 { animation-delay: -0.16s; }
  .dot-3 { animation-delay: 0s; }
  .dot-4 { animation-delay: 0.16s; }
  .dot-5 { animation-delay: 0.32s; }

  .dots-percentage {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--primary-color);
    margin-bottom: 0.5rem;
  }

  @keyframes dot-bounce {
    0%, 80%, 100% {
      transform: scale(0);
    }
    40% {
      transform: scale(1);
    }
  }

  /* Results Styles */
  .water-analyzer__results {
    animation: fade-in-up 0.6s ease-out;
  }

  .water-result {
    border-radius: var(--border-radius);
    padding: 1.5rem;
    margin: 1rem 0;
    border: 1px solid #e2e8f0;
    background: white;
  }

  .water-result--location {
    border-left: 4px solid var(--primary-color);
    background: linear-gradient(135deg, #eff6ff 0%, #dbeafe 100%);
  }

  .water-result--quality {
    border-left: 4px solid var(--success-color);
    background: linear-gradient(135deg, #ecfdf5 0%, #d1fae5 100%);
  }

  .water-result--conformity {
    border-left: 4px solid var(--success-color);
    background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%);
  }

  .water-result--proximity {
    border-left: 4px solid var(--warning-color);
    background: linear-gradient(135deg, #fffbeb 0%, #fef3c7 100%);
  }

  .water-result--recommendations {
    border-left: 4px solid var(--accent-color);
    background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%);
  }

  .water-result--warning {
    border-left: 4px solid var(--warning-color);
    background: linear-gradient(135deg, #fffbeb 0%, #fef3c7 100%);
  }

  .water-result--error {
    border-left: 4px solid var(--error-color);
    background: linear-gradient(135deg, #fef2f2 0%, #fecaca 100%);
  }

  .water-result__title {
    margin: 0 0 1rem 0;
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--text-color);
  }

  .water-result__content p {
    margin: 0.75rem 0;
    line-height: 1.6;
  }

  .water-result__content p:first-child {
    margin-top: 0;
  }

  .water-result__content p:last-child {
    margin-bottom: 0;
  }

  .proximity-badge {
    display: inline-block;
    background: var(--warning-color);
    color: white;
    padding: 0.25rem 0.75rem;
    border-radius: 1rem;
    font-size: 0.8rem;
    font-weight: 600;
    margin-left: 0.5rem;
  }

  /* Animations */
  @keyframes fade-in-up {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .water-analyzer {
      margin: 1rem 0;
      border-radius: calc(var(--border-radius) * 0.75);
    }

    .water-analyzer__header {
      padding: 2rem 1rem;
    }

    .water-analyzer__content {
      padding: 1.5rem 1rem;
    }

    .water-analyzer__search {
      padding: 1.5rem;
    }

    .water-analyzer__input-group {
      flex-direction: column;
    }

    .water-analyzer__input-wrapper {
      min-width: auto;
    }

    .water-analyzer__examples {
      justify-content: center;
    }

    .water-analyzer__map {
      height: 300px;
    }

    .water-analyzer__title {
      font-size: 1.75rem;
    }

    .water-analyzer__subtitle {
      font-size: 1rem;
    }
  }

  @media (max-width: 480px) {
    .water-analyzer__examples {
      flex-direction: column;
      align-items: center;
    }

    .water-analyzer__examples-label {
      margin-bottom: 0.5rem;
    }

    .water-analyzer__map-header {
      flex-direction: column;
      gap: 0.5rem;
      text-align: center;
    }

    .water-analyzer__input {
      padding: 0.875rem 1rem 0.875rem 2.5rem;
    }

    .water-analyzer__button {
      padding: 0.875rem 1.5rem;
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .water-analyzer {
      border: 2px solid #000;
    }

    .water-analyzer__button {
      border: 2px solid #000;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .water-analyzer__button:hover {
      transform: none;
    }

    .water-analyzer__example:hover {
      transform: none;
    }

    .progress-fill::after,
    .water-fill::before,
    .bubble,
    .ripple,
    .dot {
      animation: none;
    }

    .water-analyzer__results {
      animation: none;
    }
  }
</style>

<!-- Leaflet CSS pour la carte -->
{% if section.settings.enable_map %}
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
{% endif %}

<script>
(function() {
  'use strict';
  
  // Configuration avec syst√®me de fallback CORS am√©lior√©
  const CORS_METHODS = [
    {
      name: 'AllOrigins',
      proxy: 'https://api.allorigins.win/get?url=',
      parse: function(data) { return JSON.parse(data.contents); },
      timeout: 10000
    },
    {
      name: 'ProxyAnywhereHeroku', 
      proxy: 'https://cors-anywhere.herokuapp.com/',
      parse: function(data) { return data; },
      timeout: 8000
    },
    {
      name: 'ThingProxy',
      proxy: 'https://thingproxy.freeboard.io/fetch/',
      parse: function(data) { return data; },
      timeout: 8000
    },
    {
      name: 'ProxyCors',
      proxy: 'https://proxy.cors.sh/',
      parse: function(data) { return data; },
      timeout: 8000
    },
    {
      name: 'Direct',
      proxy: '',
      parse: function(data) { return data; },
      timeout: 5000
    }
  ];

  // Configuration globale
  const CONFIG = {
    sectionId: '{{ section.id }}',
    debugMode: {{ section.settings.debug_mode | default: false }},
    enableMap: {{ section.settings.enable_map | default: false }},
    loadingAnimation: '{{ section.settings.loading_animation | default: "water" }}',
    proximityRadius: {{ section.settings.proximity_radius | default: 50 }},
    maxProximityCities: {{ section.settings.max_proximity_cities | default: 5 }},
    maxRetries: 3,
    cacheTimeout: 300000, // 5 minutes
    dateRangeYears: 2
  };

  // Variables globales pour la carte et les animations
  let map = null;
  let marker = null;
  let selectedAddress = null;
  let loadingProgress = 0;
  let loadingInterval = null;

  // Cache simple pour √©viter les requ√™tes r√©p√©t√©es
  const cache = new Map();

  // S√©lecteurs DOM
  const selectors = {
    form: '[data-water-form]',
    input: '#water-input-' + CONFIG.sectionId,
    button: '[data-water-button]',
    loading: '[data-loading]',
    loadingText: '[data-loading-text]',
    results: '[data-results]',
    debugInfo: '[data-debug-info]',
    debugText: '[data-debug-text]',
    examples: '[data-example]',
    mapToggle: '[data-map-toggle]',
    mapContainer: '[data-map-container]',
    mapElement: '[data-map]',
    mapClose: '[data-map-close]',
    mapInfo: '[data-map-info]',
    mapConfirm: '[data-map-confirm]',
    selectedAddress: '[data-selected-address]',
    // Animation selectors
    progressFill: '[data-progress-fill]',
    progressPercent: '[data-progress-percent]',
    waterFill: '[data-water-fill]',
    waterPercent: '[data-water-percent]',
    ripplePercent: '[data-ripple-percent]',
    dotsPercent: '[data-dots-percent]'
  };

  // Utilitaires
  const utils = {
    debounce: function(func, wait) {
      let timeout;
      return function executedFunction() {
        const args = arguments;
        const later = function() {
          clearTimeout(timeout);
          func.apply(this, args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    },

    sanitizeHtml: function(str) {
      const div = document.createElement('div');
      div.textContent = str;
      return div.innerHTML;
    },

    formatDate: function(dateString) {
      return new Date(dateString).toLocaleDateString('fr-FR', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
    },

    getCacheKey: function(address) {
      return 'water_analysis_' + address.toLowerCase().replace(/\s+/g, '_');
    },

    calculateDistance: function(lat1, lon1, lat2, lon2) {
      const R = 6371; // Rayon de la Terre en km
      const dLat = (lat2 - lat1) * Math.PI / 180;
      const dLon = (lon2 - lon1) * Math.PI / 180;
      const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
                Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                Math.sin(dLon/2) * Math.sin(dLon/2);
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
      return R * c;
    }
  };

  // Fonction de debug am√©lior√©e
  function debug(message, type) {
    type = type || 'info';
    const timestamp = new Date().toLocaleTimeString('fr-FR');
    const logMessage = '[' + timestamp + '] üíß Water Analyzer: ' + message;
    
    console[type](logMessage);
    
    if (CONFIG.debugMode) {
      const debugEl = document.querySelector(selectors.debugInfo);
      const debugText = document.querySelector(selectors.debugText);
      if (debugEl && debugText) {
        debugEl.style.display = 'block';
        debugText.textContent = timestamp + ' - ' + message;
      }
    }
  }

  // Gestionnaire des animations de chargement
  const loadingAnimations = {
    start: function(steps) {
      loadingProgress = 0;
      const totalSteps = steps.length;
      let currentStep = 0;

      loadingAnimations.updateProgress(0);
      loadingAnimations.updateText(steps[0]);

      loadingInterval = setInterval(function() {
        loadingProgress += Math.random() * 15 + 5; // Progression al√©atoire mais r√©aliste
        
        if (loadingProgress >= (currentStep + 1) * (100 / totalSteps) && currentStep < totalSteps - 1) {
          currentStep++;
          loadingAnimations.updateText(steps[currentStep]);
        }

        if (loadingProgress >= 100) {
          loadingProgress = 100;
          clearInterval(loadingInterval);
        }

        loadingAnimations.updateProgress(loadingProgress);
      }, 200);
    },

    updateProgress: function(percent) {
      percent = Math.min(100, Math.max(0, percent));
      
      // Progress bar
      const progressFill = document.querySelector(selectors.progressFill);
      const progressPercent = document.querySelector(selectors.progressPercent);
      if (progressFill) progressFill.style.width = percent + '%';
      if (progressPercent) progressPercent.textContent = Math.round(percent);

      // Water glass
      const waterFill = document.querySelector(selectors.waterFill);
      const waterPercent = document.querySelector(selectors.waterPercent);
      if (waterFill) waterFill.style.height = percent + '%';
      if (waterPercent) waterPercent.textContent = Math.round(percent) + '%';

      // Ripple
      const ripplePercent = document.querySelector(selectors.ripplePercent);
      if (ripplePercent) ripplePercent.textContent = Math.round(percent) + '%';

      // Dots
      const dotsPercent = document.querySelector(selectors.dotsPercent);
      if (dotsPercent) dotsPercent.textContent = Math.round(percent) + '%';
    },

    updateText: function(text) {
      const loadingText = document.querySelector(selectors.loadingText);
      if (loadingText) loadingText.textContent = text;
    },

    complete: function() {
      if (loadingInterval) {
        clearInterval(loadingInterval);
        loadingInterval = null;
      }
      loadingAnimations.updateProgress(100);
    },

    stop: function() {
      if (loadingInterval) {
        clearInterval(loadingInterval);
        loadingInterval = null;
      }
    }
  };

  // Gestion de la carte interactive
  const mapManager = {
    init: function() {
      if (!CONFIG.enableMap) return;
      
      debug('Initialisation de la carte interactive');
      
      // Charger Leaflet si pas d√©j√† charg√©
      if (typeof L === 'undefined') {
        const script = document.createElement('script');
        script.src = 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.js';
        script.onload = function() {
          mapManager.setupMap();
        };
        document.head.appendChild(script);
      } else {
        mapManager.setupMap();
      }
    },

    setupMap: function() {
      const mapElement = document.querySelector(selectors.mapElement);
      if (!mapElement) return;

      // Initialiser la carte centr√©e sur la France
      map = L.map(mapElement.id).setView([46.603354, 1.888334], 6);
      
      // Ajouter les tuiles OpenStreetMap
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '¬© OpenStreetMap contributors'
      }).addTo(map);

      // Gestionnaire de clic sur la carte
      map.on('click', mapManager.onMapClick);
      
      debug('Carte initialis√©e avec succ√®s');
    },

    onMapClick: function(e) {
      const lat = e.latlng.lat;
      const lng = e.latlng.lng;
      
      debug('Clic sur la carte: ' + lat + ', ' + lng);
      
      // Supprimer le marqueur pr√©c√©dent
      if (marker) {
        map.removeLayer(marker);
      }
      
      // Ajouter un nouveau marqueur
      marker = L.marker([lat, lng]).addTo(map);
      
      // G√©ocodage inverse pour obtenir l'adresse
      mapManager.reverseGeocode(lat, lng);
    },

    reverseGeocode: function(lat, lng) {
      const url = 'https://api-adresse.data.gouv.fr/reverse/?lon=' + lng + '&lat=' + lat;
      
      fetchWithFallback(url).then(function(data) {
        if (data && data.features && data.features.length > 0) {
          const address = data.features[0].properties.label;
          selectedAddress = address;
          
          // Afficher l'adresse s√©lectionn√©e
          const addressEl = document.querySelector(selectors.selectedAddress);
          const mapInfo = document.querySelector(selectors.mapInfo);
          
          if (addressEl && mapInfo) {
            addressEl.textContent = address;
            mapInfo.style.display = 'block';
          }
          
          debug('Adresse trouv√©e: ' + address);
        } else {
          debug('Aucune adresse trouv√©e pour ces coordonn√©es', 'warn');
        }
      }).catch(function(error) {
        debug('Erreur lors du g√©ocodage inverse: ' + error.message, 'error');
      });
    },

    show: function() {
      const container = document.querySelector(selectors.mapContainer);
      if (container) {
        container.style.display = 'block';
        
        // Redimensionner la carte apr√®s affichage
        setTimeout(function() {
          if (map) {
            map.invalidateSize();
          }
        }, 100);
      }
    },

    hide: function() {
      const container = document.querySelector(selectors.mapContainer);
      if (container) {
        container.style.display = 'none';
      }
      
      // Reset
      selectedAddress = null;
      const mapInfo = document.querySelector(selectors.mapInfo);
      if (mapInfo) {
        mapInfo.style.display = 'none';
      }
    },

    confirmAddress: function() {
      if (selectedAddress) {
        const input = document.querySelector(selectors.input);
        if (input) {
          input.value = selectedAddress;
        }
        mapManager.hide();
        
        // Lancer automatiquement l'analyse
        setTimeout(function() {
          handleFormSubmit({ preventDefault: function() {} });
        }, 300);
      }
    }
  };

  // Gestion des √©tats de l'interface
  const ui = {
    showLoading: function(steps) {
      const loading = document.querySelector(selectors.loading);
      const results = document.querySelector(selectors.results);
      
      if (results) results.style.display = 'none';
      if (loading) loading.style.display = 'block';
      
      loadingAnimations.start(steps);
    },

    hideLoading: function() {
      const loading = document.querySelector(selectors.loading);
      if (loading) loading.style.display = 'none';
      
      loadingAnimations.stop();
    },

    toggleButton: function(disabled, text) {
      disabled = disabled || false;
      const button = document.querySelector(selectors.button);
      if (!button) return;

      button.disabled = disabled;
      
      if (text) {
        const buttonText = button.querySelector('.water-analyzer__button-text');
        const buttonIcon = button.querySelector('.water-analyzer__button-icon');
        
        if (buttonText) buttonText.textContent = text;
        if (buttonIcon) buttonIcon.textContent = disabled ? 'üîÑ' : '{{ section.settings.button_icon | default: "üîç" }}';
      }
    },

    showResults: function(html) {
      const results = document.querySelector(selectors.results);
      if (results) {
        results.innerHTML = html;
        results.style.display = 'block';
        
        // Scroll fluide vers les r√©sultats
        setTimeout(function() {
          results.scrollIntoView({ 
            behavior: 'smooth', 
            block: 'start' 
          });
        }, 100);
      }
    }
  };

  // Fonction de fetch avec timeout et retry
  function fetchWithTimeout(url, options) {
    options = options || {};
    const timeout = options.timeout || 5000;
    const fetchOptions = Object.assign({}, options);
    delete fetchOptions.timeout;
    
    const controller = new AbortController();
    const timeoutId = setTimeout(function() {
      controller.abort();
    }, timeout);
    
    fetchOptions.signal = controller.signal;
    
    return fetch(url, fetchOptions).then(function(response) {
      clearTimeout(timeoutId);
      return response;
    }).catch(function(error) {
      clearTimeout(timeoutId);
      throw error;
    });
  }

  // Fonction de fetch avec fallback am√©lior√©e
  function fetchWithFallback(url, methodIndex, retryCount) {
    methodIndex = methodIndex || 0;
    retryCount = retryCount || 0;
    
    if (methodIndex >= CORS_METHODS.length) {
      throw new Error('Toutes les m√©thodes de connexion ont √©chou√©. V√©rifiez votre connexion internet.');
    }

    const method = CORS_METHODS[methodIndex];
    debug('Tentative ' + (methodIndex + 1) + '/' + CORS_METHODS.length + ': ' + method.name + ' (retry: ' + retryCount + ')');

    const proxyUrl = method.proxy ? method.proxy + encodeURIComponent(url) : url;
    
    return fetchWithTimeout(proxyUrl, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'User-Agent': 'WaterAnalyzer/1.0'
      },
      mode: 'cors',
      timeout: method.timeout
    }).then(function(response) {
      if (!response.ok) {
        throw new Error('HTTP ' + response.status + ': ' + response.statusText);
      }
      return response.json();
    }).then(function(data) {
      const parsedData = method.parse(data);
      debug('Succ√®s avec ' + method.name);
      return parsedData;
    }).catch(function(error) {
      debug('M√©thode ' + method.name + ' √©chou√©e: ' + error.message, 'warn');
      
      // Retry avec la m√™me m√©thode si pas encore fait
      if (retryCount < CONFIG.maxRetries) {
        return new Promise(function(resolve) {
          setTimeout(resolve, 1000 * (retryCount + 1));
        }).then(function() {
          return fetchWithFallback(url, methodIndex, retryCount + 1);
        });
      }
      
      // Essayer la m√©thode suivante
      return fetchWithFallback(url, methodIndex + 1, 0);
    });
  }

  // Recherche de proximit√© am√©lior√©e
  function findNearbyWaterData(location) {
    const lat = location.geometry.coordinates[1];
    const lon = location.geometry.coordinates[0];
    
    debug('Recherche de donn√©es de proximit√© autour de: ' + lat + ', ' + lon);
    
    // Rechercher les communes dans un rayon d√©fini
    const searchUrl = 'https://geo.api.gouv.fr/communes?lat=' + lat + '&lon=' + lon + '&distance=' + (CONFIG.proximityRadius * 1000) + '&fields=nom,code,centre,population&format=json&geometry=centre';
    
    return fetchWithFallback(searchUrl).then(function(nearbyCommunes) {
      if (!nearbyCommunes || !nearbyCommunes.length) {
        throw new Error('Aucune commune trouv√©e dans les environs');
      }

      debug('Communes trouv√©es: ' + nearbyCommunes.length);

      // Calculer les distances et trier
      const communesWithDistance = nearbyCommunes.map(function(commune) {
        const distance = utils.calculateDistance(
          lat, lon,
          commune.centre.coordinates[1],
          commune.centre.coordinates[0]
        );
        return Object.assign({}, commune, { distance: distance });
      }).sort(function(a, b) {
        return a.distance - b.distance;
      }).slice(0, CONFIG.maxProximityCities);

      // Rechercher les donn√©es de qualit√© pour chaque commune
      const promises = communesWithDistance.map(function(commune) {
        const dateLimit = new Date();
        dateLimit.setFullYear(dateLimit.getFullYear() - CONFIG.dateRangeYears);
        const dateLimitStr = dateLimit.toISOString().split('T')[0];

        const waterUrl = 'https://hubeau.eaufrance.fr/api/v1/qualite_eau_potable/resultats_dis?code_commune=' + commune.code + '&date_min_prelevement=' + dateLimitStr + '&size=50&format=json&sort=desc';
        
        return fetchWithFallback(waterUrl).then(function(qualityData) {
          if (qualityData && qualityData.data && qualityData.data.length > 0) {
            return {
              commune: commune,
              qualityData: qualityData,
              distance: commune.distance
            };
          }
          return null;
        }).catch(function() {
          return null;
        });
      });

      return Promise.all(promises).then(function(results) {
        const validResults = results.filter(function(result) {
          return result !== null;
        });

        if (validResults.length === 0) {
          throw new Error('Aucune donn√©e de qualit√© trouv√©e dans les communes environnantes');
        }

        debug('Donn√©es trouv√©es pour ' + validResults.length + ' communes proches');
        return validResults;
      });
    });
  }

  // Fonction principale d'analyse
  function analyzeWater(address) {
    if (!address || !address.trim()) {
      throw new Error('Veuillez saisir une adresse valide');
    }

    const cacheKey = utils.getCacheKey(address);
    
    // V√©rifier le cache
    if (cache.has(cacheKey)) {
      const cached = cache.get(cacheKey);
      if (Date.now() - cached.timestamp < CONFIG.cacheTimeout) {
        debug('Utilisation des donn√©es en cache');
        return Promise.resolve(cached.data);
      }
    }

    debug('D√©marrage de l analyse pour: ' + address);

    const steps = [
      'Localisation de l adresse...',
      'Recherche des donn√©es de qualit√©...',
      'Recherche dans les communes voisines...',
      'Analyse des donn√©es...',
      'Finalisation du rapport...'
    ];

    ui.showLoading(steps);

    // √âtape 1: G√©ocodage
    debug('G√©ocodage en cours...');
    
    const addressUrl = 'https://api-adresse.data.gouv.fr/search/?q=' + encodeURIComponent(address) + '&limit=5';
    
    return fetchWithFallback(addressUrl).then(function(locationData) {
      if (!locationData || !locationData.features || !locationData.features.length) {
        throw new Error('Adresse non trouv√©e. Essayez avec le code postal ou le nom de la ville.');
      }

      const location = locationData.features[0];
      const cityCode = location.properties.citycode;
      const cityName = location.properties.city;
      
      debug('Adresse trouv√©e: ' + cityName + ' (' + cityCode + ')');

      // √âtape 2: R√©cup√©ration des donn√©es de qualit√© directes
      const dateLimit = new Date();
      dateLimit.setFullYear(dateLimit.getFullYear() - CONFIG.dateRangeYears);
      const dateLimitStr = dateLimit.toISOString().split('T')[0];

      const waterUrl = 'https://hubeau.eaufrance.fr/api/v1/qualite_eau_potable/resultats_dis?code_commune=' + cityCode + '&date_min_prelevement=' + dateLimitStr + '&size=200&format=json&sort=desc';
      
      debug('R√©cup√©ration des donn√©es qualit√© directes...');
      return fetchWithFallback(waterUrl).then(function(qualityData) {
        
        if (qualityData && qualityData.data && qualityData.data.length > 0) {
          // Donn√©es trouv√©es directement
          debug('Donn√©es directes trouv√©es: ' + qualityData.data.length + ' analyses');
          
          const result = {
            location: location,
            qualityData: qualityData,
            isProximity: false,
            timestamp: Date.now()
          };

          // Mise en cache
          cache.set(cacheKey, {
            data: result,
            timestamp: Date.now()
          });

          loadingAnimations.complete();
          return result;
        } else {
          // Pas de donn√©es directes, rechercher dans les environs
          debug('Aucune donn√©e directe, recherche de proximit√©...');
          
          return findNearbyWaterData(location).then(function(proximityResults) {
            const result = {
              location: location,
              qualityData: null,
              proximityData: proximityResults,
              isProximity: true,
              timestamp: Date.now()
            };

            // Mise en cache
            cache.set(cacheKey, {
              data: result,
              timestamp: Date.now()
            });

            loadingAnimations.complete();
            return result;
          });
        }
      });
    }).catch(function(error) {
      debug('Erreur lors de l analyse: ' + error.message, 'error');
      loadingAnimations.stop();
      throw error;
    });
  }

  // G√©n√©ration du HTML des r√©sultats
  function generateResultsHtml(result) {
    const location = result.location;
    const props = location.properties;
    let html = '';

    // Informations sur l'adresse
    html += '<div class="water-result water-result--location">';
    html += '<h3 class="water-result__title">üìç Adresse analys√©e</h3>';
    html += '<div class="water-result__content">';
    html += '<p><strong>' + utils.sanitizeHtml(props.label) + '</strong></p>';
    html += '<p>üèòÔ∏è ' + utils.sanitizeHtml(props.city) + ' (' + (props.postcode || 'N/A') + ')</p>';
    html += '<p>üÜî Code INSEE: ' + props.citycode + '</p>';
    if (props.context) {
      html += '<p>üìç ' + utils.sanitizeHtml(props.context) + '</p>';
    }
    html += '</div></div>';

    if (!result.isProximity && result.qualityData && result.qualityData.data && result.qualityData.data.length > 0) {
      // Donn√©es directes disponibles
      const analyses = result.qualityData.data;
      const latest = analyses[0];
      const lastDate = utils.formatDate(latest.date_prelevement);

      // Informations g√©n√©rales
      html += '<div class="water-result water-result--quality">';
      html += '<h3 class="water-result__title">üìä Rapport Qualit√© - ' + utils.sanitizeHtml(props.city) + '</h3>';
      html += '<div class="water-result__content">';
      html += '<p><strong>Derni√®re analyse:</strong> ' + lastDate + '</p>';
      html += '<p><strong>Total analyses:</strong> ' + analyses.length + ' sur ' + CONFIG.dateRangeYears + ' ans</p>';
      if (latest.nom_distributeur) {
        html += '<p><strong>Distributeur:</strong> ' + utils.sanitizeHtml(latest.nom_distributeur) + '</p>';
      }
      if (latest.nom_installation) {
        html += '<p><strong>Installation:</strong> ' + utils.sanitizeHtml(latest.nom_installation) + '</p>';
      }
      html += '</div></div>';

      // Analyse de conformit√©
      const bactConform = analyses.filter(function(d) { return d.conformite_limites_bact_prelevement === 'C'; }).length;
      const bactTotal = analyses.filter(function(d) { return d.conformite_limites_bact_prelevement; }).length;
      
      const physConform = analyses.filter(function(d) { return d.conformite_limites_pc_prelevement === 'C'; }).length;
      const physTotal = analyses.filter(function(d) { return d.conformite_limites_pc_prelevement; }).length;

      if (bactTotal > 0 || physTotal > 0) {
        html += '<div class="water-result water-result--conformity">';
        html += '<h4 class="water-result__title">‚úÖ Conformit√© R√©glementaire</h4>';
        html += '<div class="water-result__content">';

        if (bactTotal > 0) {
          const bactPercent = (bactConform / bactTotal) * 100;
          html += '<p>ü¶† Qualit√© bact√©riologique: <strong>' + bactPercent.toFixed(1) + '%</strong> conforme (' + bactConform + '/' + bactTotal + ' analyses)</p>';
        }

        if (physTotal > 0) {
          const physPercent = (physConform / physTotal) * 100;
          html += '<p>‚öóÔ∏è Param√®tres physico-chimiques: <strong>' + physPercent.toFixed(1) + '%</strong> conforme (' + physConform + '/' + physTotal + ' analyses)</p>';
        }

        html += '</div></div>';
      }

    } else if (result.isProximity && result.proximityData && result.proximityData.length > 0) {
      // Donn√©es de proximit√©
      const closestData = result.proximityData[0];
      const commune = closestData.commune;
      const analyses = closestData.qualityData.data;
      const latest = analyses[0];
      const lastDate = utils.formatDate(latest.date_prelevement);

      html += '<div class="water-result water-result--proximity">';
      html += '<h3 class="water-result__title">üìä Donn√©es de Proximit√© <span class="proximity-badge">' + closestData.distance.toFixed(1) + ' km</span></h3>';
      html += '<div class="water-result__content">';
      html += '<p><strong>‚ö†Ô∏è Aucune donn√©e disponible pour ' + utils.sanitizeHtml(props.city) + '</strong></p>';
      html += '<p><strong>Source la plus proche:</strong> ' + utils.sanitizeHtml(commune.nom) + ' (' + closestData.distance.toFixed(1) + ' km)</p>';
      html += '<p><strong>Derni√®re analyse:</strong> ' + lastDate + '</p>';
      html += '<p><strong>Total analyses:</strong> ' + analyses.length + ' sur ' + CONFIG.dateRangeYears + ' ans</p>';
      if (latest.nom_distributeur) {
        html += '<p><strong>Distributeur:</strong> ' + utils.sanitizeHtml(latest.nom_distributeur) + '</p>';
      }
      html += '</div></div>';

      // Analyse de conformit√© pour les donn√©es de proximit√©
      const bactConform = analyses.filter(function(d) { return d.conformite_limites_bact_prelevement === 'C'; }).length;
      const bactTotal = analyses.filter(function(d) { return d.conformite_limites_bact_prelevement; }).length;
      
      const physConform = analyses.filter(function(d) { return d.conformite_limites_pc_prelevement === 'C'; }).length;
      const physTotal = analyses.filter(function(d) { return d.conformite_limites_pc_prelevement; }).length;

      if (bactTotal > 0 || physTotal > 0) {
        html += '<div class="water-result water-result--conformity">';
        html += '<h4 class="water-result__title">‚úÖ Conformit√© - ' + utils.sanitizeHtml(commune.nom) + '</h4>';
        html += '<div class="water-result__content">';

        if (bactTotal > 0) {
          const bactPercent = (bactConform / bactTotal) * 100;
          html += '<p>ü¶† Qualit√© bact√©riologique: <strong>' + bactPercent.toFixed(1) + '%</strong> conforme (' + bactConform + '/' + bactTotal + ' analyses)</p>';
        }

        if (physTotal > 0) {
          const physPercent = (physConform / physTotal) * 100;
          html += '<p>‚öóÔ∏è Param√®tres physico-chimiques: <strong>' + physPercent.toFixed(1) + '%</strong> conforme (' + physConform + '/' + physTotal + ' analyses)</p>';
        }

        html += '</div></div>';
      }

      // Autres sources disponibles
      if (result.proximityData.length > 1) {
        html += '<div class="water-result water-result--proximity">';
        html += '<h4 class="water-result__title">üìç Autres sources dans les environs</h4>';
        html += '<div class="water-result__content">';
        for (let i = 1; i < Math.min(result.proximityData.length, 3); i++) {
          const data = result.proximityData[i];
          html += '<p>‚Ä¢ ' + utils.sanitizeHtml(data.commune.nom) + ' - ' + data.distance.toFixed(1) + ' km (' + data.qualityData.data.length + ' analyses)</p>';
        }
        html += '</div></div>';
      }

    } else {
      // Aucune donn√©e trouv√©e
      html += '<div class="water-result water-result--warning">';
      html += '<h4 class="water-result__title">‚ö†Ô∏è Aucune donn√©e disponible</h4>';
      html += '<div class="water-result__content">';
      html += '<p>Aucune donn√©e d analyse trouv√©e pour <strong>' + utils.sanitizeHtml(props.city) + '</strong> ni dans les communes environnantes (rayon de ' + CONFIG.proximityRadius + ' km).</p>';
      html += '<p>Cette zone peut √™tre desservie par un r√©seau intercommunal √©loign√© ou les donn√©es peuvent ne pas √™tre disponibles dans la base nationale.</p>';
      html += '<p>üí° Contactez votre mairie ou votre distributeur d eau pour plus d informations.</p>';
      html += '</div></div>';
    }

    // Recommandations
    html += '<div class="water-result water-result--recommendations">';
    html += '<h4 class="water-result__title">üí° Recommandations</h4>';
    html += '<div class="water-result__content">';
    if (result.isProximity) {
      html += '<p>‚Ä¢ üìç Ces donn√©es proviennent de la commune la plus proche avec des analyses disponibles</p>';
      html += '<p>‚Ä¢ üîç La qualit√© peut varier selon les r√©seaux de distribution locaux</p>';
    }
    html += '<p>‚Ä¢ üî¨ Analyses conformes aux normes fran√ßaises en vigueur</p>';
    html += '<p>‚Ä¢ üìû En cas de doute, contactez votre distributeur d eau</p>';
    html += '<p>‚Ä¢ üíß Consommez 1,5 √† 2L d eau par jour selon vos besoins</p>';
    html += '<p>‚Ä¢ üå°Ô∏è Conservez l eau du robinet au frais et consommez-la rapidement</p>';
    html += '</div></div>';

    return html;
  }

  // Affichage d'erreur
  function showError(message) {
    const html = '<div class="water-result water-result--error">' +
      '<h4 class="water-result__title">‚ùå Erreur</h4>' +
      '<div class="water-result__content">' +
      '<p>' + utils.sanitizeHtml(message) + '</p>' +
      '<p>üí° <strong>Suggestions :</strong></p>' +
      '<p>‚Ä¢ Essayez avec un code postal (ex: 75001)</p>' +
      '<p>‚Ä¢ V√©rifiez l orthographe de votre adresse</p>' +
      '<p>‚Ä¢ V√©rifiez votre connexion internet</p>' +
      '</div></div>';
    ui.showResults(html);
  }

  // Gestionnaire principal du formulaire
  function handleFormSubmit(event) {
    event.preventDefault();
    
    const input = document.querySelector(selectors.input);
    const address = input ? input.value.trim() : '';
    
    if (!address) {
      showError('Veuillez saisir une adresse');
      return;
    }

    ui.toggleButton(true, 'Analyse...');

    analyzeWater(address).then(function(result) {
      const html = generateResultsHtml(result);
      ui.showResults(html);
    }).catch(function(error) {
      showError(error.message);
    }).finally(function() {
      ui.hideLoading();
      ui.toggleButton(false, '{{ section.settings.button_text | default: "Analyser" }}');
    });
  }

  // Gestionnaire des exemples
  function handleExampleClick(event) {
    const example = event.target.dataset.example;
    const input = document.querySelector(selectors.input);
    
    if (input && example) {
      input.value = example;
      input.focus();
      
      // Animation de feedback
      event.target.style.transform = 'scale(0.95)';
      setTimeout(function() {
        event.target.style.transform = '';
      }, 150);
    }
  }

  // Initialisation
  function init() {
    debug('Initialisation de l analyseur d eau moderne');

    // Gestionnaire du formulaire
    const form = document.querySelector(selectors.form);
    if (form) {
      form.addEventListener('submit', handleFormSubmit);
    }

    // Gestionnaire des exemples
    const examples = document.querySelectorAll(selectors.examples);
    for (let i = 0; i < examples.length; i++) {
      examples[i].addEventListener('click', handleExampleClick);
    }

    // Gestionnaire Enter sur l'input
    const input = document.querySelector(selectors.input);
    if (input) {
      input.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
          e.preventDefault();
          handleFormSubmit(e);
        }
      });
    }

    // Gestionnaires de la carte
    if (CONFIG.enableMap) {
      const mapToggle = document.querySelector(selectors.mapToggle);
      const mapClose = document.querySelector(selectors.mapClose);
      const mapConfirm = document.querySelector(selectors.mapConfirm);

      if (mapToggle) {
        mapToggle.addEventListener('click', function() {
          mapManager.show();
          if (!map) {
            mapManager.init();
          }
        });
      }

      if (mapClose) {
        mapClose.addEventListener('click', mapManager.hide);
      }

      if (mapConfirm) {
        mapConfirm.addEventListener('click', mapManager.confirmAddress);
      }
    }

    debug('Analyseur moderne initialis√© et pr√™t');
  }

  // D√©marrage quand le DOM est pr√™t
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }

})();
</script>

{% schema %}
{
  "name": "Analyseur Eau Potable Moderne",
  "settings": [
    {
      "type": "header",
      "content": "Configuration g√©n√©rale"
    },
    {
      "type": "text",
      "id": "title",
      "label": "Titre principal",
      "default": "Analyseur Qualit√© Eau",
      "info": "Le titre affich√© en haut de la section"
    },
    {
      "type": "textarea",
      "id": "subtitle",
      "label": "Sous-titre",
      "default": "D√©couvrez la qualit√© de l eau √† votre adresse en temps r√©el",
      "info": "Description affich√©e sous le titre"
    },
    {
      "type": "text",
      "id": "search_title",
      "label": "Titre de la section recherche",
      "default": "Analysez votre eau",
      "info": "Titre de la zone de recherche"
    },
    {
      "type": "textarea",
      "id": "search_description",
      "label": "Description de la recherche",
      "default": "Saisissez votre adresse pour obtenir un rapport d√©taill√©",
      "info": "Texte explicatif pour la recherche"
    },
    {
      "type": "text",
      "id": "placeholder",
      "label": "Placeholder du champ adresse",
      "default": "75001 Paris ou Bourg-en-Bresse",
      "info": "Texte d exemple dans le champ de saisie"
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "Texte du bouton",
      "default": "Analyser",
      "info": "Texte affich√© sur le bouton d analyse"
    },
    {
      "type": "header",
      "content": "Ic√¥nes et emojis"
    },
    {
      "type": "text",
      "id": "header_icon",
      "label": "Ic√¥ne du header",
      "default": "üíß",
      "info": "Emoji affich√© dans le titre principal"
    },
    {
      "type": "text",
      "id": "search_icon",
      "label": "Ic√¥ne de recherche",
      "default": "üè†",
      "info": "Emoji affich√© dans le titre de recherche"
    },
    {
      "type": "text",
      "id": "button_icon",
      "label": "Ic√¥ne du bouton",
      "default": "üîç",
      "info": "Emoji affich√© dans le bouton"
    },
    {
      "type": "text",
      "id": "loading_icon",
      "label": "Ic√¥ne de chargement",
      "default": "üíß",
      "info": "Emoji affich√© pendant le chargement"
    },
    {
      "type": "header",
      "content": "Design et couleurs"
    },
    {
      "type": "color",
      "id": "primary_color",
      "label": "Couleur primaire",
      "default": "#2563eb",
      "info": "Couleur principale de l interface"
    },
    {
      "type": "color",
      "id": "secondary_color",
      "label": "Couleur secondaire",
      "default": "#1e40af",
      "info": "Couleur secondaire pour les variations"
    },
    {
      "type": "color",
      "id": "accent_color",
      "label": "Couleur d accent",
      "default": "#3b82f6",
      "info": "Couleur d accent pour les √©l√©ments importants"
    },
    {
      "type": "color",
      "id": "success_color",
      "label": "Couleur de succ√®s",
      "default": "#10b981",
      "info": "Couleur pour les √©l√©ments de succ√®s"
    },
    {
      "type": "color",
      "id": "warning_color",
      "label": "Couleur d avertissement",
      "default": "#f59e0b",
      "info": "Couleur pour les avertissements"
    },
    {
      "type": "color",
      "id": "error_color",
      "label": "Couleur d erreur",
      "default": "#ef4444",
      "info": "Couleur pour les erreurs"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Couleur du texte principal",
      "default": "#1f2937",
      "info": "Couleur du texte principal"
    },
    {
      "type": "color",
      "id": "text_light",
      "label": "Couleur du texte secondaire",
      "default": "#6b7280",
      "info": "Couleur du texte secondaire"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Couleur de fond",
      "default": "#ffffff",
      "info": "Couleur de fond de la section"
    },
    {
      "type": "color",
      "id": "shadow_color",
      "label": "Couleur de l ombre",
      "default": "rgba(0, 0, 0, 0.1)",
      "info": "Couleur de l ombre de la section"
    },
    {
      "type": "range",
      "id": "border_radius",
      "label": "Arrondi des bords",
      "min": 0,
      "max": 50,
      "step": 2,
      "default": 16,
      "unit": "px",
      "info": "Arrondi des coins de la section"
    },
    {
      "type": "range",
      "id": "section_padding",
      "label": "Espacement interne",
      "min": 1,
      "max": 5,
      "step": 0.5,
      "default": 2,
      "unit": "rem",
      "info": "Espacement interne de la section"
    },
    {
      "type": "header",
      "content": "Animation de chargement"
    },
    {
      "type": "select",
      "id": "loading_animation",
      "label": "Type d animation",
      "default": "water",
      "options": [
        {
          "value": "water",
          "label": "Verre qui se remplit"
        },
        {
          "value": "progress",
          "label": "Barre de progression"
        },
        {
          "value": "ripple",
          "label": "Ondulations"
        },
        {
          "value": "dots",
          "label": "Points anim√©s"
        }
      ],
      "info": "Choisissez le style d animation pendant le chargement"
    },
    {
      "type": "header",
      "content": "Recherche de proximit√©"
    },
    {
      "type": "range",
      "id": "proximity_radius",
      "label": "Rayon de recherche",
      "min": 10,
      "max": 100,
      "step": 5,
      "default": 50,
      "unit": "km",
      "info": "Distance maximale pour chercher des donn√©es dans les communes voisines"
    },
    {
      "type": "range",
      "id": "max_proximity_cities",
      "label": "Nombre max de communes",
      "min": 3,
      "max": 10,
      "step": 1,
      "default": 5,
      "info": "Nombre maximum de communes √† analyser pour la recherche de proximit√©"
    },
    {
      "type": "header",
      "content": "Fonctionnalit√©s"
    },
    {
      "type": "checkbox",
      "id": "show_examples",
      "label": "Afficher les exemples",
      "default": true,
      "info": "Affiche les boutons d exemples d adresses"
    },
    {
      "type": "text",
      "id": "examples",
      "label": "Exemples d adresses",
      "default": "75001,Lyon,Marseille,Toulouse",
      "info": "Liste d exemples s√©par√©s par des virgules"
    },
    {
      "type": "checkbox",
      "id": "enable_map",
      "label": "Activer la carte interactive",
      "default": false,
      "info": "Permet de s√©lectionner une adresse sur une carte"
    },
    {
      "type": "header",
      "content": "Options avanc√©es"
    },
    {
      "type": "checkbox",
      "id": "debug_mode",
      "label": "Mode debug",
      "default": false,
      "info": "Affiche les informations de debug (pour le d√©veloppement)"
    }
  ],
  "presets": [
    {
      "name": "Analyseur Eau Potable Moderne"
    }
  ]
}
{% endschema %}