<!-- Analyseur Eau Potable - Version Simplifiée avec Barre de Progression Améliorée -->
<div class="water-analyzer" data-section-id="{{ section.id }}" style="
  --primary-color: {{ section.settings.primary_color | default: '#2563eb' }};
  --secondary-color: {{ section.settings.secondary_color | default: '#1e40af' }};
  --success-color: {{ section.settings.success_color | default: '#059669' }};
  --warning-color: {{ section.settings.warning_color | default: '#d97706' }};
  --error-color: {{ section.settings.error_color | default: '#dc2626' }};
  --header-bg: {{ section.settings.header_background | default: '#1e40af' }};
  --header-text: {{ section.settings.header_text_color | default: '#ffffff' }};
  --content-bg: {{ section.settings.content_background | default: '#ffffff' }};
  --content-text: {{ section.settings.content_text_color | default: '#374151' }};
  --search-bg: {{ section.settings.search_background | default: '#3b82f6' }};
  --search-text: {{ section.settings.search_text_color | default: '#ffffff' }};
  --border-radius: {{ section.settings.border_radius | default: 16 }}px;
  --section-padding: {{ section.settings.section_padding | default: 1.5 }}rem;
">
  <!-- Header -->
  <header class="water-analyzer__header">
    <h2 class="water-analyzer__title">
      <span class="water-analyzer__icon">{{ section.settings.header_icon | default: '🌊' }}</span>
      {{ section.settings.title | default: 'Analyseur Qualite Eau Potable' }}
    </h2>
    <p class="water-analyzer__subtitle">
      {{ section.settings.subtitle | default: 'Decouvrez la qualite de l eau a votre adresse' }}
    </p>
  </header>

  <!-- Main Content -->
  <div class="water-analyzer__content">
    
    <!-- Email Section (si activée) -->
    {% if section.settings.enable_email %}
    <section class="water-analyzer__email">
      <h3 class="water-analyzer__email-title">
        <span class="water-analyzer__icon">📧</span>
        {{ section.settings.email_title | default: 'Recevez votre rapport par email' }}
      </h3>
      <p class="water-analyzer__email-description">
        {{ section.settings.email_description | default: 'Optionnel : saisissez votre email pour recevoir un rapport detaille' }}
      </p>
      
      <div class="water-analyzer__email-input">
        <input 
          type="email" 
          id="email-input-{{ section.id }}" 
          class="water-analyzer__input"
          placeholder="{{ section.settings.email_placeholder | default: 'votre@email.com (optionnel)' }}"
          autocomplete="email"
        >
      </div>
    </section>
    {% endif %}
    
    <!-- Search Section -->
    <section class="water-analyzer__search">
      <h3 class="water-analyzer__search-title">
        <span class="water-analyzer__icon">{{ section.settings.search_icon | default: '🏠' }}</span>
        {{ section.settings.search_title | default: 'Analysez votre eau' }}
      </h3>
      <p class="water-analyzer__search-description">
        {{ section.settings.search_description | default: 'Saisissez votre adresse pour obtenir un rapport de qualite detaille' }}
      </p>
      
      <!-- Map Toggle -->
      {% if section.settings.enable_map %}
      <div class="water-analyzer__map-toggle">
        <button type="button" class="water-analyzer__map-btn" data-map-toggle>
          <span class="water-analyzer__map-icon">🗺️</span>
          <span class="water-analyzer__map-text">Utiliser la carte</span>
        </button>
      </div>
      {% endif %}

      <!-- Interactive Map -->
      {% if section.settings.enable_map %}
      <div class="water-analyzer__map-container" data-map-container style="display: none;">
        <div class="water-analyzer__map-header">
          <h4>🗺️ Cliquez sur la carte pour selectionner votre adresse</h4>
          <button type="button" class="water-analyzer__map-close" data-map-close>✕</button>
        </div>
        <div id="water-map-{{ section.id }}" class="water-analyzer__map" data-map></div>
        <div class="water-analyzer__map-info" data-map-info style="display: none;">
          <p><strong>Adresse selectionnee:</strong> <span data-selected-address></span></p>
          <button type="button" class="water-analyzer__map-confirm" data-map-confirm>
            Analyser cette adresse
          </button>
        </div>
      </div>
      {% endif %}
      
      <form class="water-analyzer__form" data-water-form>
        <div class="water-analyzer__input-group">
          <input 
            type="text" 
            id="water-input-{{ section.id }}" 
            class="water-analyzer__input"
            placeholder="{{ section.settings.placeholder | default: '01000 Bourg-en-Bresse' }}"
            autocomplete="address-line1"
            required
            aria-label="Adresse a analyser"
          >
          <button 
            type="submit"
            class="water-analyzer__button"
            data-water-button
            aria-label="Lancer l analyse"
          >
            <span class="water-analyzer__button-icon">{{ section.settings.button_icon | default: '🔍' }}</span>
            <span class="water-analyzer__button-text">{{ section.settings.button_text | default: 'Analyser' }}</span>
          </button>
        </div>

        <!-- Examples -->
        {% if section.settings.show_examples %}
        <div class="water-analyzer__examples">
          <span class="water-analyzer__examples-label">💡 Exemples :</span>
          {% assign examples = section.settings.examples | default: '01000,Gex,Bourg-en-Bresse' | split: ',' %}
          {% for example in examples %}
            <button 
              type="button" 
              class="water-analyzer__example"
              data-example="{{ example | strip }}"
            >
              {{ example | strip }}
            </button>
          {% endfor %}
        </div>
        {% endif %}
      </form>
    </section>

    <!-- Debug Info (hidden by default) -->
    {% if section.settings.debug_mode %}
    <div class="water-analyzer__debug" data-debug-info style="display: none;">
      <strong>Debug :</strong> 
      <span data-debug-text>En attente...</span>
    </div>
    {% endif %}

    <!-- Loading State avec Barre de Progression Améliorée -->
    <div class="water-analyzer__loading" data-loading style="display: none;">
      <div class="water-analyzer__loading-container">
        <h4 class="water-analyzer__loading-title">
          <span class="water-analyzer__loading-icon">{{ section.settings.loading_icon | default: '🔍' }}</span>
          <span data-loading-title">Analyse en cours...</span>
        </h4>
        
        <!-- Barre de progression principale -->
        <div class="water-analyzer__progress-container">
          <div class="water-analyzer__progress-bar">
            <div class="water-analyzer__progress-fill" data-progress-fill></div>
          </div>
          <div class="water-analyzer__progress-text">
            <span data-progress-percent">0%</span>
            <span data-progress-step">Initialisation...</span>
          </div>
        </div>

        <!-- Étapes détaillées -->
        <div class="water-analyzer__steps">
          <div class="water-analyzer__step" data-step="1">
            <div class="water-analyzer__step-icon">📍</div>
            <div class="water-analyzer__step-content">
              <div class="water-analyzer__step-title">Localisation</div>
              <div class="water-analyzer__step-status" data-step-status="1">En attente...</div>
            </div>
            <div class="water-analyzer__step-indicator" data-step-indicator="1"></div>
          </div>
          
          <div class="water-analyzer__step" data-step="2">
            <div class="water-analyzer__step-icon">🔬</div>
            <div class="water-analyzer__step-content">
              <div class="water-analyzer__step-title">Récupération données</div>
              <div class="water-analyzer__step-status" data-step-status="2">En attente...</div>
            </div>
            <div class="water-analyzer__step-indicator" data-step-indicator="2"></div>
          </div>
          
          <div class="water-analyzer__step" data-step="3">
            <div class="water-analyzer__step-icon">📊</div>
            <div class="water-analyzer__step-content">
              <div class="water-analyzer__step-title">Calcul du score</div>
              <div class="water-analyzer__step-status" data-step-status="3">En attente...</div>
            </div>
            <div class="water-analyzer__step-indicator" data-step-indicator="3"></div>
          </div>
          
          <div class="water-analyzer__step" data-step="4">
            <div class="water-analyzer__step-icon">📧</div>
            <div class="water-analyzer__step-content">
              <div class="water-analyzer__step-title">Envoi email</div>
              <div class="water-analyzer__step-status" data-step-status="4">En attente...</div>
            </div>
            <div class="water-analyzer__step-indicator" data-step-indicator="4"></div>
          </div>
        </div>
      </div>
    </div>

    <!-- Results -->
    <div class="water-analyzer__results" data-results style="display: none;" role="region" aria-live="polite">
      <!-- Results will be populated by JavaScript -->
    </div>
  </div>
</div>

<style>
  .water-analyzer {
    font-family: var(--font-body-family, 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif);
    background: var(--content-bg);
    border-radius: var(--border-radius);
    overflow: hidden;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    margin: var(--section-padding) 0;
    color: var(--content-text);
    max-width: 100%;
    position: relative;
    border: 1px solid rgba(0, 0, 0, 0.1);
  }

  .water-analyzer__header {
    background: var(--header-bg);
    color: var(--header-text);
    padding: var(--section-padding) calc(var(--section-padding) * 0.75);
    text-align: center;
  }

  .water-analyzer__title {
    font-size: clamp(1.5rem, 4vw, 2rem);
    margin: 0 0 0.5rem 0;
    font-weight: 700;
    line-height: 1.2;
  }

  .water-analyzer__subtitle {
    margin: 0;
    opacity: 0.9;
    font-size: clamp(0.9rem, 2.5vw, 1.1rem);
  }

  .water-analyzer__icon {
    display: inline-block;
    margin-right: 0.5rem;
  }

  .water-analyzer__content {
    background: var(--content-bg);
    padding: var(--section-padding) calc(var(--section-padding) * 0.75);
  }

  /* Section Email */
  .water-analyzer__email {
    background: var(--search-bg);
    color: var(--search-text);
    padding: var(--section-padding);
    border-radius: calc(var(--border-radius) * 0.75);
    margin-bottom: var(--section-padding);
  }

  .water-analyzer__email-title {
    margin: 0 0 1rem 0;
    font-size: 1.2rem;
    font-weight: 600;
  }

  .water-analyzer__email-description {
    margin: 0 0 1.5rem 0;
    opacity: 0.95;
  }

  .water-analyzer__email-input {
    width: 100%;
  }

  /* Section Search */
  .water-analyzer__search {
    background: var(--search-bg);
    color: var(--search-text);
    padding: var(--section-padding);
    border-radius: calc(var(--border-radius) * 0.75);
    margin-bottom: var(--section-padding);
  }

  .water-analyzer__search-title {
    margin: 0 0 1rem 0;
    font-size: 1.3rem;
    font-weight: 600;
  }

  .water-analyzer__search-description {
    margin: 0 0 1.5rem 0;
    opacity: 0.95;
  }

  /* Map Toggle Button */
  .water-analyzer__map-toggle {
    margin-bottom: 1.5rem;
    text-align: center;
  }

  .water-analyzer__map-btn {
    background: rgba(255, 255, 255, 0.2);
    color: var(--search-text);
    border: 2px solid rgba(255, 255, 255, 0.3);
    padding: 0.75rem 1.5rem;
    border-radius: 25px;
    cursor: pointer;
    transition: all 0.3s ease;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    font-weight: 600;
  }

  .water-analyzer__map-btn:hover {
    background: rgba(255, 255, 255, 0.3);
    border-color: rgba(255, 255, 255, 0.5);
    transform: translateY(-2px);
  }

  /* Map Container */
  .water-analyzer__map-container {
    background: var(--content-bg);
    border-radius: 15px;
    margin-bottom: 1.5rem;
    overflow: hidden;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
  }

  .water-analyzer__map-header {
    background: var(--primary-color);
    color: white;
    padding: 1rem 1.5rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .water-analyzer__map-header h4 {
    margin: 0;
    font-size: 1rem;
  }

  .water-analyzer__map-close {
    background: none;
    border: none;
    color: white;
    font-size: 1.5rem;
    cursor: pointer;
    padding: 0;
    width: 30px;
    height: 30px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background 0.2s ease;
  }

  .water-analyzer__map-close:hover {
    background: rgba(255, 255, 255, 0.2);
  }

  .water-analyzer__map {
    height: 400px;
    width: 100%;
    background: #f0f0f0;
    position: relative;
  }

  .water-analyzer__map-info {
    padding: 1rem 1.5rem;
    background: #f8f9fa;
    border-top: 1px solid #e9ecef;
  }

  .water-analyzer__map-info p {
    margin: 0 0 1rem 0;
    color: var(--content-text);
  }

  .water-analyzer__map-confirm {
    background: var(--primary-color);
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 25px;
    cursor: pointer;
    font-weight: 600;
    transition: all 0.3s ease;
  }

  .water-analyzer__map-confirm:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
  }

  .water-analyzer__form {
    width: 100%;
  }

  .water-analyzer__input-group {
    display: flex;
    gap: 0.75rem;
    align-items: stretch;
    flex-wrap: wrap;
    margin-bottom: 1rem;
  }

  .water-analyzer__input {
    flex: 1;
    min-width: 250px;
    padding: 0.875rem 1.25rem;
    border: none;
    border-radius: 25px;
    font-size: 1rem;
    background: rgba(255, 255, 255, 0.95);
    outline: none;
    transition: all 0.3s ease;
    color: var(--content-text);
  }

  .water-analyzer__input:focus {
    background: white;
    box-shadow: 0 0 0 3px rgba(255, 255, 255, 0.3);
  }

  .water-analyzer__button {
    padding: 0.875rem 1.5rem;
    background: var(--primary-color);
    color: white;
    border: none;
    border-radius: 25px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    white-space: nowrap;
  }

  .water-analyzer__button:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(37, 99, 235, 0.4);
    background: var(--secondary-color);
  }

  .water-analyzer__button:disabled {
    opacity: 0.7;
    cursor: not-allowed;
    transform: none;
  }

  .water-analyzer__examples {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: 0.5rem;
    opacity: 0.9;
    font-size: 0.9rem;
  }

  .water-analyzer__examples-label {
    font-weight: 600;
    margin-right: 0.5rem;
  }

  .water-analyzer__example {
    background: rgba(255, 255, 255, 0.2);
    color: var(--search-text);
    border: none;
    padding: 0.375rem 0.75rem;
    border-radius: 12px;
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 0.85rem;
  }

  .water-analyzer__example:hover {
    background: rgba(255, 255, 255, 0.3);
    transform: translateY(-1px);
  }

  .water-analyzer__debug {
    background: #e3f2fd;
    padding: 1rem;
    border-radius: 8px;
    margin-bottom: 1.5rem;
    font-family: 'Courier New', monospace;
    font-size: 0.8rem;
    border-left: 4px solid #2196f3;
  }

  /* === NOUVELLE BARRE DE PROGRESSION AMÉLIORÉE === */
  .water-analyzer__loading {
    text-align: center;
    padding: 2rem 1rem;
    background: var(--content-bg);
    border-radius: calc(var(--border-radius) * 0.75);
    border: 1px solid rgba(0, 0, 0, 0.1);
  }

  .water-analyzer__loading-container {
    max-width: 500px;
    margin: 0 auto;
  }

  .water-analyzer__loading-title {
    margin: 0 0 1.5rem 0;
    color: var(--content-text);
    font-size: 1.2rem;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  .water-analyzer__loading-icon {
    animation: water-pulse 2s ease-in-out infinite;
  }

  /* Barre de progression principale */
  .water-analyzer__progress-container {
    margin-bottom: 2rem;
  }

  .water-analyzer__progress-bar {
    width: 100%;
    height: 8px;
    background: #e5e7eb;
    border-radius: 4px;
    overflow: hidden;
    margin-bottom: 0.5rem;
    position: relative;
  }

  .water-analyzer__progress-fill {
    height: 100%;
    background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
    border-radius: 4px;
    width: 0%;
    transition: width 0.5s ease;
    position: relative;
  }

  .water-analyzer__progress-fill::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
    animation: water-shimmer 2s infinite;
  }

  .water-analyzer__progress-text {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 0.9rem;
    color: var(--content-text);
  }

  /* Étapes détaillées */
  .water-analyzer__steps {
    display: grid;
    gap: 1rem;
  }

  .water-analyzer__step {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 0.75rem;
    background: #f8f9fa;
    border-radius: 8px;
    transition: all 0.3s ease;
  }

  .water-analyzer__step.active {
    background: rgba(37, 99, 235, 0.1);
    border-left: 4px solid var(--primary-color);
  }

  .water-analyzer__step.completed {
    background: rgba(5, 150, 105, 0.1);
    border-left: 4px solid var(--success-color);
  }

  .water-analyzer__step.error {
    background: rgba(220, 38, 38, 0.1);
    border-left: 4px solid var(--error-color);
  }

  .water-analyzer__step-icon {
    font-size: 1.5rem;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: white;
    border-radius: 50%;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  .water-analyzer__step-content {
    flex: 1;
  }

  .water-analyzer__step-title {
    font-weight: 600;
    color: var(--content-text);
    margin-bottom: 0.25rem;
  }

  .water-analyzer__step-status {
    font-size: 0.85rem;
    color: #6b7280;
  }

  .water-analyzer__step-indicator {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: #e5e7eb;
    position: relative;
    transition: all 0.3s ease;
  }

  .water-analyzer__step-indicator.active {
    background: var(--primary-color);
    animation: water-pulse 2s ease-in-out infinite;
  }

  .water-analyzer__step-indicator.completed {
    background: var(--success-color);
  }

  .water-analyzer__step-indicator.completed::after {
    content: '✓';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    color: white;
    font-size: 12px;
    font-weight: bold;
  }

  .water-analyzer__step-indicator.error {
    background: var(--error-color);
  }

  .water-analyzer__step-indicator.error::after {
    content: '✗';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    color: white;
    font-size: 12px;
    font-weight: bold;
  }

  .water-analyzer__results {
    animation: water-fade-in 0.5s ease-out;
  }

  /* Result Styles */
  .water-result {
    border-radius: calc(var(--border-radius) * 0.6);
    padding: 1.5rem;
    margin: 1rem 0;
    border: 1px solid rgba(0, 0, 0, 0.1);
  }

  .water-result--location {
    background: #f8f9fa;
    border-left: 4px solid var(--primary-color);
  }

  .water-result--quality {
    background: #f8f9fa;
    border-left: 4px solid var(--success-color);
  }

  .water-result--score {
    background: #f8fafc;
    border-left: 4px solid var(--primary-color);
    text-align: center;
  }

  .water-result--characteristics {
    background: #f1f5f9;
    border-left: 4px solid #64748b;
  }

  .water-result--problems {
    background: #fffbeb;
    border-left: 4px solid var(--warning-color);
  }

  .water-result--recommendation {
    background: #f0f9ff;
    border-left: 4px solid var(--primary-color);
  }

  .water-result--info {
    background: #f8fafc;
    border-left: 4px solid #64748b;
  }

  .water-result--email {
    background: #f0fdf4;
    border-left: 4px solid var(--success-color);
  }

  .water-result--warning {
    background: #fff3cd;
    color: #856404;
    border-left: 4px solid var(--warning-color);
  }

  .water-result--error {
    background: #f8d7da;
    color: #721c24;
    border-left: 4px solid var(--error-color);
  }

  .water-result__title {
    margin: 0 0 1rem 0;
    font-size: 1.2rem;
    font-weight: 600;
  }

  .water-result__content p {
    margin: 0.5rem 0;
  }

  .water-result__content p:first-child {
    margin-top: 0;
  }

  .water-result__content p:last-child {
    margin-bottom: 0;
  }

  /* Animations */
  @keyframes water-pulse {
    0%, 100% { transform: scale(1); opacity: 1; }
    50% { transform: scale(1.1); opacity: 0.8; }
  }

  @keyframes water-shimmer {
    0% { transform: translateX(-100%); }
    100% { transform: translateX(100%); }
  }

  @keyframes water-fade-in {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .water-analyzer {
      margin: 1rem 0;
      border-radius: calc(var(--border-radius) * 0.75);
    }

    .water-analyzer__header {
      padding: 1.5rem 1rem;
    }

    .water-analyzer__content {
      padding: 1.5rem 1rem;
    }

    .water-analyzer__search,
    .water-analyzer__email {
      padding: 1.5rem;
    }

    .water-analyzer__input-group {
      flex-direction: column;
    }

    .water-analyzer__input {
      min-width: auto;
    }

    .water-analyzer__examples {
      justify-content: center;
    }

    .water-analyzer__map {
      height: 300px;
    }

    .water-analyzer__steps {
      gap: 0.75rem;
    }

    .water-analyzer__step {
      padding: 0.5rem;
      gap: 0.75rem;
    }

    .water-analyzer__step-icon {
      width: 35px;
      height: 35px;
      font-size: 1.2rem;
    }
  }

  @media (max-width: 480px) {
    .water-analyzer__examples {
      flex-direction: column;
      align-items: flex-start;
    }

    .water-analyzer__examples-label {
      margin-bottom: 0.5rem;
    }

    .water-analyzer__map-header {
      flex-direction: column;
      gap: 0.5rem;
      text-align: center;
    }

    .water-analyzer__progress-text {
      flex-direction: column;
      gap: 0.25rem;
      text-align: center;
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .water-analyzer {
      border: 2px solid #000;
    }

    .water-analyzer__button {
      border: 2px solid #000;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .water-analyzer__button:hover {
      transform: none;
    }

    .water-analyzer__example:hover {
      transform: none;
    }

    .water-analyzer__loading-icon {
      animation: none;
    }

    .water-analyzer__progress-fill::after {
      animation: none;
    }

    .water-analyzer__step-indicator.active {
      animation: none;
    }

    .water-analyzer__results {
      animation: none;
    }
  }
</style>

<!-- Leaflet CSS pour la carte -->
{% if section.settings.enable_map %}
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
{% endif %}

<script>
(function() {
  'use strict';
  
  // Configuration avec systeme de fallback CORS ameliore
  const CORS_METHODS = [
    {
      name: 'AllOrigins',
      proxy: 'https://api.allorigins.win/get?url=',
      parse: function(data) { return JSON.parse(data.contents); },
      timeout: 10000
    },
    {
      name: 'ProxyAnywhereHeroku', 
      proxy: 'https://cors-anywhere.herokuapp.com/',
      parse: function(data) { return data; },
      timeout: 8000
    },
    {
      name: 'ThingProxy',
      proxy: 'https://thingproxy.freeboard.io/fetch/',
      parse: function(data) { return data; },
      timeout: 8000
    },
    {
      name: 'ProxyCors',
      proxy: 'https://proxy.cors.sh/',
      parse: function(data) { return data; },
      timeout: 8000
    },
    {
      name: 'Direct',
      proxy: '',
      parse: function(data) { return data; },
      timeout: 5000
    }
  ];

  // Configuration globale
  const CONFIG = {
    sectionId: '{{ section.id }}',
    debugMode: {{ section.settings.debug_mode | default: false }},
    enableMap: {{ section.settings.enable_map | default: false }},
    enableEmail: {{ section.settings.enable_email | default: false }},
    maxRetries: 3,
    cacheTimeout: 300000, // 5 minutes
    dateRangeYears: 2
  };

  // Variables globales
  let map = null;
  let marker = null;
  let selectedAddress = null;
  let userEmail = null;
  let currentProgress = 0;
  let totalSteps = CONFIG.enableEmail ? 4 : 3;

  // Cache simple pour eviter les requetes repetees
  const cache = new Map();

  // Selecteurs DOM
  const selectors = {
    form: '[data-water-form]',
    input: '#water-input-' + CONFIG.sectionId,
    emailInput: '#email-input-' + CONFIG.sectionId,
    button: '[data-water-button]',
    loading: '[data-loading]',
    loadingTitle: '[data-loading-title]',
    progressFill: '[data-progress-fill]',
    progressPercent: '[data-progress-percent]',
    progressStep: '[data-progress-step]',
    results: '[data-results]',
    debugInfo: '[data-debug-info]',
    debugText: '[data-debug-text]',
    examples: '[data-example]',
    mapToggle: '[data-map-toggle]',
    mapContainer: '[data-map-container]',
    mapElement: '[data-map]',
    mapClose: '[data-map-close]',
    mapInfo: '[data-map-info]',
    mapConfirm: '[data-map-confirm]',
    selectedAddress: '[data-selected-address]'
  };

  // === NOUVEAU SYSTÈME DE PROGRESSION ===
  const progressManager = {
    currentStep: 0,
    steps: [
      { id: 1, name: 'Localisation', icon: '📍', weight: 25 },
      { id: 2, name: 'Récupération données', icon: '🔬', weight: 35 },
      { id: 3, name: 'Calcul du score', icon: '📊', weight: 25 },
      { id: 4, name: 'Envoi email', icon: '📧', weight: 15 }
    ],

    updateProgress: function(stepId, status, message) {
      const step = this.steps.find(s => s.id === stepId);
      if (!step) return;

      // Mettre à jour l'indicateur de l'étape
      const stepElement = document.querySelector('[data-step="' + stepId + '"]');
      const stepStatus = document.querySelector('[data-step-status="' + stepId + '"]');
      const stepIndicator = document.querySelector('[data-step-indicator="' + stepId + '"]');

      if (stepElement && stepStatus && stepIndicator) {
        // Supprimer les anciennes classes
        stepElement.classList.remove('active', 'completed', 'error');
        stepIndicator.classList.remove('active', 'completed', 'error');

        // Ajouter la nouvelle classe
        stepElement.classList.add(status);
        stepIndicator.classList.add(status);

        // Mettre à jour le message
        stepStatus.textContent = message;
      }

      // Calculer le pourcentage global
      let totalProgress = 0;
      for (let i = 0; i < this.steps.length; i++) {
        const currentStepElement = document.querySelector('[data-step="' + this.steps[i].id + '"]');
        if (!currentStepElement) continue;

        if (currentStepElement.classList.contains('completed')) {
          totalProgress += this.steps[i].weight;
        } else if (currentStepElement.classList.contains('active')) {
          totalProgress += this.steps[i].weight * 0.5; // 50% pour l'étape en cours
        }
      }

      // Si pas d'email, ajuster le calcul
      if (!CONFIG.enableEmail && stepId <= 3) {
        totalProgress = Math.min(100, totalProgress * (100 / 85)); // Ajuster sur 85% au lieu de 100%
      }

      this.setProgress(totalProgress);

      // Mettre à jour le texte de l'étape principale
      const progressStepEl = document.querySelector(selectors.progressStep);
      if (progressStepEl) {
        progressStepEl.textContent = step.icon + ' ' + step.name + ': ' + message;
      }
    },

    setProgress: function(percent) {
      const progressFill = document.querySelector(selectors.progressFill);
      const progressPercent = document.querySelector(selectors.progressPercent);

      if (progressFill) {
        progressFill.style.width = percent + '%';
      }

      if (progressPercent) {
        progressPercent.textContent = Math.round(percent) + '%';
      }

      currentProgress = percent;
    },

    reset: function() {
      this.currentStep = 0;
      this.setProgress(0);

      // Reset tous les indicateurs
      for (let i = 1; i <= 4; i++) {
        const stepElement = document.querySelector('[data-step="' + i + '"]');
        const stepStatus = document.querySelector('[data-step-status="' + i + '"]');
        const stepIndicator = document.querySelector('[data-step-indicator="' + i + '"]');

        if (stepElement && stepStatus && stepIndicator) {
          stepElement.classList.remove('active', 'completed', 'error');
          stepIndicator.classList.remove('active', 'completed', 'error');
          stepStatus.textContent = 'En attente...';
        }
      }

      // Masquer l'étape email si désactivée
      if (!CONFIG.enableEmail) {
        const emailStep = document.querySelector('[data-step="4"]');
        if (emailStep) {
          emailStep.style.display = 'none';
        }
      }
    },

    complete: function() {
      this.setProgress(100);
      const progressStepEl = document.querySelector(selectors.progressStep);
      if (progressStepEl) {
        progressStepEl.textContent = '✅ Analyse terminée avec succès !';
      }
    },

    error: function(stepId, message) {
      this.updateProgress(stepId, 'error', message);
      const progressStepEl = document.querySelector(selectors.progressStep);
      if (progressStepEl) {
        progressStepEl.textContent = '❌ ' + message;
      }
    }
  };

  // Utilitaires
  const utils = {
    debounce: function(func, wait) {
      let timeout;
      return function executedFunction() {
        const args = arguments;
        const later = function() {
          clearTimeout(timeout);
          func.apply(this, args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    },

    sanitizeHtml: function(str) {
      const div = document.createElement('div');
      div.textContent = str;
      return div.innerHTML;
    },

    formatDate: function(dateString) {
      return new Date(dateString).toLocaleDateString('fr-FR', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
    },

    getCacheKey: function(address) {
      return 'water_analysis_' + address.toLowerCase().replace(/\s+/g, '_');
    }
  };

  // Fonction de debug amelioree
  function debug(message, type) {
    type = type || 'info';
    const timestamp = new Date().toLocaleTimeString('fr-FR');
    const logMessage = '[' + timestamp + '] 🌊 Water Analyzer: ' + message;
    
    console[type](logMessage);
    
    if (CONFIG.debugMode) {
      const debugEl = document.querySelector(selectors.debugInfo);
      const debugText = document.querySelector(selectors.debugText);
      if (debugEl && debugText) {
        debugEl.style.display = 'block';
        debugText.textContent = timestamp + ' - ' + message;
      }
    }
  }

  // Gestion de la carte interactive (code existant conservé)
  const mapManager = {
    init: function() {
      if (!CONFIG.enableMap) return;
      
      debug('Initialisation de la carte interactive');
      
      if (typeof L === 'undefined') {
        const script = document.createElement('script');
        script.src = 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.js';
        script.onload = function() {
          mapManager.setupMap();
        };
        document.head.appendChild(script);
      } else {
        mapManager.setupMap();
      }
    },

    setupMap: function() {
      const mapElement = document.querySelector(selectors.mapElement);
      if (!mapElement) return;

      map = L.map(mapElement.id).setView([46.603354, 1.888334], 6);
      
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '© OpenStreetMap contributors'
      }).addTo(map);

      map.on('click', mapManager.onMapClick);
      
      debug('Carte initialisee avec succes');
    },

    onMapClick: function(e) {
      const lat = e.latlng.lat;
      const lng = e.latlng.lng;
      
      debug('Clic sur la carte: ' + lat + ', ' + lng);
      
      if (marker) {
        map.removeLayer(marker);
      }
      
      marker = L.marker([lat, lng]).addTo(map);
      mapManager.reverseGeocode(lat, lng);
    },

    reverseGeocode: function(lat, lng) {
      const url = 'https://api-adresse.data.gouv.fr/reverse/?lon=' + lng + '&lat=' + lat;
      
      fetchWithFallback(url).then(function(data) {
        if (data && data.features && data.features.length > 0) {
          const address = data.features[0].properties.label;
          selectedAddress = address;
          
          const addressEl = document.querySelector(selectors.selectedAddress);
          const mapInfo = document.querySelector(selectors.mapInfo);
          
          if (addressEl && mapInfo) {
            addressEl.textContent = address;
            mapInfo.style.display = 'block';
          }
          
          debug('Adresse trouvee: ' + address);
        } else {
          debug('Aucune adresse trouvee pour ces coordonnees', 'warn');
        }
      }).catch(function(error) {
        debug('Erreur lors du geocodage inverse: ' + error.message, 'error');
      });
    },

    show: function() {
      const container = document.querySelector(selectors.mapContainer);
      if (container) {
        container.style.display = 'block';
        
        setTimeout(function() {
          if (map) {
            map.invalidateSize();
          }
        }, 100);
      }
    },

    hide: function() {
      const container = document.querySelector(selectors.mapContainer);
      if (container) {
        container.style.display = 'none';
      }
      
      selectedAddress = null;
      const mapInfo = document.querySelector(selectors.mapInfo);
      if (mapInfo) {
        mapInfo.style.display = 'none';
      }
    },

    confirmAddress: function() {
      if (selectedAddress) {
        const input = document.querySelector(selectors.input);
        if (input) {
          input.value = selectedAddress;
        }
        mapManager.hide();
        
        setTimeout(function() {
          handleFormSubmit({ preventDefault: function() {} });
        }, 300);
      }
    }
  };

  // Gestion des etats de l interface
  const ui = {
    showLoading: function() {
      const loading = document.querySelector(selectors.loading);
      const results = document.querySelector(selectors.results);
      
      if (results) results.style.display = 'none';
      if (loading) loading.style.display = 'block';
      
      progressManager.reset();
    },

    hideLoading: function() {
      const loading = document.querySelector(selectors.loading);
      if (loading) loading.style.display = 'none';
    },

    toggleButton: function(disabled, text) {
      disabled = disabled || false;
      const button = document.querySelector(selectors.button);
      if (!button) return;

      button.disabled = disabled;
      
      if (text) {
        const buttonText = button.querySelector('.water-analyzer__button-text');
        const buttonIcon = button.querySelector('.water-analyzer__button-icon');
        
        if (buttonText) buttonText.textContent = text;
        if (buttonIcon) buttonIcon.textContent = disabled ? '🔄' : '{{ section.settings.button_icon | default: "🔍" }}';
      }
    },

    showResults: function(html) {
      const results = document.querySelector(selectors.results);
      if (results) {
        results.innerHTML = html;
        results.style.display = 'block';
        
        setTimeout(function() {
          results.scrollIntoView({ 
            behavior: 'smooth', 
            block: 'start' 
          });
        }, 100);
      }
    }
  };

  // Fonction de fetch avec timeout et retry
  function fetchWithTimeout(url, options) {
    options = options || {};
    const timeout = options.timeout || 5000;
    const fetchOptions = Object.assign({}, options);
    delete fetchOptions.timeout;
    
    const controller = new AbortController();
    const timeoutId = setTimeout(function() {
      controller.abort();
    }, timeout);
    
    fetchOptions.signal = controller.signal;
    
    return fetch(url, fetchOptions).then(function(response) {
      clearTimeout(timeoutId);
      return response;
    }).catch(function(error) {
      clearTimeout(timeoutId);
      throw error;
    });
  }

  // Fonction de fetch avec fallback amelioree
  function fetchWithFallback(url, methodIndex, retryCount) {
    methodIndex = methodIndex || 0;
    retryCount = retryCount || 0;
    
    if (methodIndex >= CORS_METHODS.length) {
      throw new Error('Toutes les methodes de connexion ont echoue. Verifiez votre connexion internet.');
    }

    const method = CORS_METHODS[methodIndex];
    debug('Tentative ' + (methodIndex + 1) + '/' + CORS_METHODS.length + ': ' + method.name + ' (retry: ' + retryCount + ')');

    const proxyUrl = method.proxy ? method.proxy + encodeURIComponent(url) : url;
    
    return fetchWithTimeout(proxyUrl, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'User-Agent': 'WaterAnalyzer/1.0'
      },
      mode: 'cors',
      timeout: method.timeout
    }).then(function(response) {
      if (!response.ok) {
        throw new Error('HTTP ' + response.status + ': ' + response.statusText);
      }
      return response.json();
    }).then(function(data) {
      const parsedData = method.parse(data);
      debug('Succes avec ' + method.name);
      return parsedData;
    }).catch(function(error) {
      debug('Methode ' + method.name + ' echouee: ' + error.message, 'warn');
      
      if (retryCount < CONFIG.maxRetries) {
        return new Promise(function(resolve) {
          setTimeout(resolve, 1000 * (retryCount + 1));
        }).then(function() {
          return fetchWithFallback(url, methodIndex, retryCount + 1);
        });
      }
      
      return fetchWithFallback(url, methodIndex + 1, 0);
    });
  }

  // Fonction de calcul de score (code existant conservé)
  function calculateWaterScore(qualityData) {
    if (!qualityData || !qualityData.data || !qualityData.data.length) {
      return null;
    }

    const analyses = qualityData.data;
    let scoreBase = 85;
    let penaliteBacterio = 0;
    let penaliteTurbidite = 0;
    let penaliteChimique = 0;
    let penaliteChlore = 0;
    let bonus = 0;

    const recentAnalyses = analyses.slice(0, 20);
    
    let maxTurbidite = 0;
    let avgConductivite = 0;
    let maxChloreLibre = 0;
    let maxChloreTotal = 0;
    let bacteriesDetected = false;
    let aspectAnormal = false;
    let avgPH = 7.5;
    let polluantsDetected = false;

    recentAnalyses.forEach(function(analyse) {
      const libelle = (analyse.libelle_parametre || '').toLowerCase();
      const valeur = parseFloat(analyse.resultat_numerique) || 0;
      const unite = analyse.libelle_unite || '';
      
      if (libelle.includes('turbidité') || libelle.includes('turbidite')) {
        maxTurbidite = Math.max(maxTurbidite, valeur);
      }
      
      if (libelle.includes('conductivité') || libelle.includes('conductivite')) {
        avgConductivite = Math.max(avgConductivite, valeur);
      }
      
      if (libelle.includes('chlore libre')) {
        maxChloreLibre = Math.max(maxChloreLibre, valeur);
      }
      
      if (libelle.includes('chlore total')) {
        maxChloreTotal = Math.max(maxChloreTotal, valeur);
      }
      
      if (libelle.includes('ph')) {
        avgPH = valeur > 0 ? valeur : avgPH;
      }
      
      if ((libelle.includes('coli') || libelle.includes('coliforme') || libelle.includes('enterocoque')) && valeur > 0) {
        bacteriesDetected = true;
      }
      
      if (libelle.includes('aspect') && analyse.resultat_alphanumerique && analyse.resultat_alphanumerique.toLowerCase().includes('anormal')) {
        aspectAnormal = true;
      }
      
      if ((libelle.includes('ammonium') || libelle.includes('nitrite') || libelle.includes('plomb') || libelle.includes('pesticide')) && valeur > 0) {
        polluantsDetected = true;
      }
    });

    if (bacteriesDetected) {
      penaliteBacterio = 25;
    }

    if (maxTurbidite > 2) {
      penaliteTurbidite += 15;
    }
    if (aspectAnormal) {
      penaliteTurbidite += 10;
    }
    penaliteTurbidite = Math.min(penaliteTurbidite, 25);

    if (polluantsDetected) {
      penaliteChimique = 10;
    }

    if (maxChloreLibre > 0.3) {
      penaliteChlore += 5;
    }
    if (maxChloreTotal > 0.5) {
      penaliteChlore += 10;
    } else if (maxChloreTotal > 0.3) {
      penaliteChlore += 5;
    }
    penaliteChlore = Math.min(penaliteChlore, 10);

    if (maxTurbidite < 0.1) {
      bonus += 2;
    }
    if (maxChloreLibre <= 0.05) {
      bonus += 2;
    }
    if (avgPH >= 7.2 && avgPH <= 7.8) {
      bonus += 1;
    }
    bonus = Math.min(bonus, 5);

    const penaliteTotale = penaliteBacterio + penaliteTurbidite + penaliteChimique + penaliteChlore;
    const scoreFinal = Math.min(100, Math.max(0, scoreBase - penaliteTotale + bonus));

    let categorie, couleur, emoji, action;
    if (scoreFinal >= 90) {
      categorie = "EXCELLENTE"; couleur = "#2E7D32"; emoji = "🟢"; action = "Aucune action nécessaire";
    } else if (scoreFinal >= 80) {
      categorie = "TRÈS BONNE"; couleur = "#4CAF50"; emoji = "🟢"; action = "Surveillance recommandée";
    } else if (scoreFinal >= 60) {
      categorie = "BONNE"; couleur = "#FF9800"; emoji = "🟡"; action = "Traitement léger conseillé";
    } else if (scoreFinal >= 40) {
      categorie = "MOYENNE"; couleur = "#FF5722"; emoji = "🟠"; action = "Traitement recommandé";
    } else if (scoreFinal >= 20) {
      categorie = "MÉDIOCRE"; couleur = "#D32F2F"; emoji = "🔴"; action = "Traitement urgent";
    } else {
      categorie = "DANGEREUSE"; couleur = "#B71C1C"; emoji = "🔴"; action = "Traitement obligatoire";
    }

    let dureteNiveau, dureteAlerte, dureteCouleur;
    if (avgConductivite < 200) {
      dureteNiveau = "Très douce"; dureteAlerte = "Risque de corrosion"; dureteCouleur = "#2196F3";
    } else if (avgConductivite <= 400) {
      dureteNiveau = "Douce"; dureteAlerte = "Légèrement corrosive"; dureteCouleur = "#4CAF50";
    } else if (avgConductivite <= 800) {
      dureteNiveau = "Moyennement dure"; dureteAlerte = "Dépôts calcaire modérés"; dureteCouleur = "#FF9800";
    } else if (avgConductivite <= 1100) {
      dureteNiveau = "Dure"; dureteAlerte = "Problèmes calcaire importants"; dureteCouleur = "#FF5722";
    } else {
      dureteNiveau = "Très dure"; dureteAlerte = "Calcaire excessif"; dureteCouleur = "#D32F2F";
    }

    let produitRecommande, objectif, collectionHandle;
    if (scoreFinal >= 90) {
      produitRecommande = "Carafe filtrante";
      objectif = "Améliorer le goût (éliminer chlore résiduel)";
      collectionHandle = "carafes-filtrantes";
    } else if (scoreFinal >= 80) {
      if (avgConductivite > 400) {
        produitRecommande = "Adoucisseur d'eau";
        objectif = "Protéger électroménager, améliorer confort";
        collectionHandle = "adoucisseurs";
      } else {
        produitRecommande = "Filtration charbon actif";
        objectif = "Améliorer goût et odeur";
        collectionHandle = "filtres-charbon";
      }
    } else if (scoreFinal >= 60) {
      produitRecommande = "Système préfiltration + filtration";
      objectif = "Éliminer chlore, sédiments, améliorer goût";
      collectionHandle = "systemes-complets";
    } else if (scoreFinal >= 40) {
      produitRecommande = "Système complet avec UV";
      objectif = "Sécurité sanitaire et qualité organoleptique";
      collectionHandle = "systemes-uv";
    } else {
      produitRecommande = "Osmoseur + reminéralisation";
      objectif = "Purification totale et reminéralisation";
      collectionHandle = "osmoseurs";
    }

    return {
      score: scoreFinal,
      categorie: categorie,
      couleur: couleur,
      emoji: emoji,
      action: action,
      durete: {
        niveau: dureteNiveau,
        valeur: avgConductivite,
        alerte: dureteAlerte,
        couleur: dureteCouleur
      },
      problemes: {
        bacteries: bacteriesDetected,
        turbidite: maxTurbidite > 2,
        chlore: maxChloreLibre > 0.3,
        aspect: aspectAnormal,
        polluants: polluantsDetected
      },
      recommandation: {
        produit: produitRecommande,
        objectif: objectif,
        collection: collectionHandle
      },
      parametres: {
        turbidite: maxTurbidite,
        conductivite: avgConductivite,
        chloreLibre: maxChloreLibre,
        chloreTotal: maxChloreTotal,
        ph: avgPH
      }
    };
  }

  // Generation du HTML des resultats (code existant conservé avec scoring)
  function generateResultsHtml(location, qualityResponse) {
    const props = location.properties;
    let html = '';

    const scoreData = calculateWaterScore(qualityResponse);

    html += '<div class="water-result water-result--location">';
    html += '<h3 class="water-result__title">📍 Adresse analysée</h3>';
    html += '<div class="water-result__content">';
    html += '<p><strong>' + utils.sanitizeHtml(props.label) + '</strong></p>';
    html += '<p>🏘️ ' + utils.sanitizeHtml(props.city) + ' (' + (props.postcode || 'N/A') + ')</p>';
    html += '<p>🆔 Code INSEE: ' + props.citycode + '</p>';
    if (props.context) {
      html += '<p>📍 ' + utils.sanitizeHtml(props.context) + '</p>';
    }
    html += '</div></div>';

    if (scoreData) {
      html += '<div class="water-result water-result--score">';
      html += '<h3 class="water-result__title">🎯 Score de Qualité</h3>';
      html += '<div class="water-result__content">';
      
      html += '<div style="display: inline-block; width: 120px; height: 120px; border: 8px solid ' + scoreData.couleur + '; border-radius: 50%; display: flex; flex-direction: column; align-items: center; justify-content: center; margin: 1rem auto;">';
      html += '<div style="font-size: 36px; font-weight: bold; color: ' + scoreData.couleur + ';">' + scoreData.score + '</div>';
      html += '<div style="font-size: 14px; color: #666;">/ 100</div>';
      html += '</div>';
      
      html += '<div style="background: ' + scoreData.couleur + '; color: white; padding: 10px 20px; border-radius: 25px; font-weight: bold; margin: 1rem auto; display: inline-block;">';
      html += scoreData.emoji + ' ' + scoreData.categorie;
      html += '</div>';
      
      html += '<p style="font-size: 1.1rem; margin: 1rem 0;"><strong>' + scoreData.action + '</strong></p>';
      html += '</div></div>';

      html += '<div class="water-result water-result--characteristics">';
      html += '<h3 class="water-result__title">💧 Caractéristiques de votre eau</h3>';
      html += '<div class="water-result__content">';
      
      html += '<div style="background: #f8f9fa; padding: 1rem; margin: 0.5rem 0; border-radius: 8px; border-left: 4px solid ' + scoreData.durete.couleur + ';">';
      html += '<p><strong>Dureté :</strong> <span style="color: ' + scoreData.durete.couleur + '; font-weight: bold;">' + scoreData.durete.niveau + '</span>';
      if (scoreData.durete.valeur > 0) {
        html += ' (' + scoreData.durete.valeur.toFixed(0) + ' µS/cm)';
      }
      html += '</p>';
      html += '<p style="font-size: 0.9rem; color: #666; margin: 0.5rem 0 0 0;">' + scoreData.durete.alerte + '</p>';
      html += '</div>';
      
      if (scoreData.parametres.ph > 0) {
        html += '<p>🔬 <strong>pH :</strong> ' + scoreData.parametres.ph.toFixed(1) + '</p>';
      }
      if (scoreData.parametres.turbidite > 0) {
        html += '<p>💎 <strong>Turbidité :</strong> ' + scoreData.parametres.turbidite.toFixed(2) + ' NFU</p>';
      }
      if (scoreData.parametres.chloreLibre > 0) {
        html += '<p>🧪 <strong>Chlore libre :</strong> ' + scoreData.parametres.chloreLibre.toFixed(2) + ' mg/L</p>';
      }
      
      html += '</div></div>';

      const hasProblems = scoreData.problemes.bacteries || scoreData.problemes.turbidite || scoreData.problemes.chlore || scoreData.problemes.aspect || scoreData.problemes.polluants;
      
      if (hasProblems) {
        html += '<div class="water-result water-result--problems">';
        html += '<h3 class="water-result__title">⚠️ Points d\'attention détectés</h3>';
        html += '<div class="water-result__content">';
        html += '<ul style="margin: 0; padding-left: 1.5rem;">';
        
        if (scoreData.problemes.bacteries) {
          html += '<li style="color: #dc2626; margin: 0.5rem 0;">Bactéries pathogènes détectées → Risque sanitaire</li>';
        }
        if (scoreData.problemes.turbidite) {
          html += '<li style="color: #dc2626; margin: 0.5rem 0;">Turbidité élevée (' + scoreData.parametres.turbidite.toFixed(1) + ' NFU) → Eau trouble</li>';
        }
        if (scoreData.problemes.chlore) {
          html += '<li style="color: #dc2626; margin: 0.5rem 0;">Chlore résiduel élevé (' + scoreData.parametres.chloreLibre.toFixed(2) + ' mg/L) → Goût/odeur altérés</li>';
        }
        if (scoreData.problemes.aspect) {
          html += '<li style="color: #dc2626; margin: 0.5rem 0;">Aspect anormal détecté → Qualité visuelle altérée</li>';
        }
        if (scoreData.problemes.polluants) {
          html += '<li style="color: #dc2626; margin: 0.5rem 0;">Traces de polluants chimiques → Surveillance recommandée</li>';
        }
        if (scoreData.durete.valeur > 400) {
          html += '<li style="color: #f59e0b; margin: 0.5rem 0;">' + scoreData.durete.niveau + ' → ' + scoreData.durete.alerte + '</li>';
        }
        
        html += '</ul>';
        html += '</div></div>';
      }

      html += '<div class="water-result water-result--recommendation">';
      html += '<h3 class="water-result__title">💡 Notre recommandation personnalisée</h3>';
      html += '<div class="water-result__content">';
      html += '<div style="background: white; padding: 1.5rem; border-radius: 8px; border: 1px solid #e5e7eb;">';
      html += '<h4 style="margin: 0 0 1rem 0; color: #1f2937;">' + scoreData.recommandation.produit + '</h4>';
      html += '<p style="margin: 0 0 1rem 0;"><strong>Objectif :</strong> ' + scoreData.recommandation.objectif + '</p>';
      
      html += '<a href="/collections/' + scoreData.recommandation.collection + '" style="display: inline-block; background: #3b82f6; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; font-weight: 600; transition: all 0.3s ease;">';
      html += '🛒 Découvrir nos solutions ' + scoreData.recommandation.produit.toLowerCase();
      html += '</a>';
      
      html += '</div>';
      html += '</div></div>';

      if (qualityResponse && qualityResponse.data && qualityResponse.data.length > 0) {
        const analyses = qualityResponse.data;
        const latest = analyses[0];
        const lastDate = utils.formatDate(latest.date_prelevement);

        html += '<div class="water-result water-result--info">';
        html += '<h3 class="water-result__title">📊 Informations techniques</h3>';
        html += '<div class="water-result__content">';
        html += '<p><strong>Dernière analyse :</strong> ' + lastDate + '</p>';
        html += '<p><strong>Total analyses :</strong> ' + analyses.length + ' sur ' + CONFIG.dateRangeYears + ' ans</p>';
        if (latest.nom_distributeur) {
          html += '<p><strong>Distributeur :</strong> ' + utils.sanitizeHtml(latest.nom_distributeur) + '</p>';
        }
        html += '</div></div>';
      }

    } else {
      html += '<div class="water-result water-result--warning">';
      html += '<h4 class="water-result__title">⚠️ Aucune analyse récente disponible</h4>';
      html += '<div class="water-result__content">';
      html += '<p>Aucune donnée d\'analyse trouvée pour <strong>' + utils.sanitizeHtml(props.city) + '</strong> sur les ' + CONFIG.dateRangeYears + ' dernières années.</p>';
      html += '<p>Cette commune peut être desservie par un réseau intercommunal ou les données peuvent ne pas être encore disponibles dans la base nationale.</p>';
      html += '<p>💡 Contactez votre mairie ou votre distributeur d\'eau pour plus d\'informations.</p>';
      html += '</div></div>';
    }

    if (userEmail) {
      html += '<div class="water-result water-result--email">';
      html += '<h4 class="water-result__title">📧 Rapport envoyé</h4>';
      html += '<div class="water-result__content">';
      html += '<p>Un rapport détaillé a été envoyé à <strong>' + utils.sanitizeHtml(userEmail) + '</strong></p>';
      html += '<p>Vérifiez votre boîte de réception (et vos spams) dans les prochaines minutes.</p>';
      html += '</div></div>';
    }

    return html;
  }

  // Fonction principale d analyse avec progression
  function analyzeWater(address) {
    if (!address || !address.trim()) {
      throw new Error('Veuillez saisir une adresse valide');
    }

    const cacheKey = utils.getCacheKey(address);
    
    if (cache.has(cacheKey)) {
      const cached = cache.get(cacheKey);
      if (Date.now() - cached.timestamp < CONFIG.cacheTimeout) {
        debug('Utilisation des donnees en cache');
        return Promise.resolve(cached.data);
      }
    }

    debug('Demarrage de l analyse pour: ' + address);

    // Étape 1: Géocodage
    progressManager.updateProgress(1, 'active', 'Recherche de l\'adresse...');
    debug('Geocodage en cours...');
    
    const addressUrl = 'https://api-adresse.data.gouv.fr/search/?q=' + encodeURIComponent(address) + '&limit=5';
    
    return fetchWithFallback(addressUrl).then(function(locationData) {
      if (!locationData || !locationData.features || !locationData.features.length) {
        progressManager.error(1, 'Adresse non trouvée');
        throw new Error('Adresse non trouvee. Essayez avec le code postal ou le nom de la ville.');
      }

      const location = locationData.features[0];
      const cityCode = location.properties.citycode;
      const cityName = location.properties.city;
      
      progressManager.updateProgress(1, 'completed', 'Adresse trouvée: ' + cityName);
      debug('Adresse trouvee: ' + cityName + ' (' + cityCode + ')');

      // Étape 2: Récupération des données de qualité
      progressManager.updateProgress(2, 'active', 'Récupération des analyses...');
      
      const dateLimit = new Date();
      dateLimit.setFullYear(dateLimit.getFullYear() - CONFIG.dateRangeYears);
      const dateLimitStr = dateLimit.toISOString().split('T')[0];

      const waterUrl = 'https://hubeau.eaufrance.fr/api/v1/qualite_eau_potable/resultats_dis?code_commune=' + cityCode + '&date_min_prelevement=' + dateLimitStr + '&size=200&format=json&sort=desc';
      
      debug('Recuperation des donnees qualite...');
      return fetchWithFallback(waterUrl).then(function(qualityData) {
        progressManager.updateProgress(2, 'completed', 'Données récupérées (' + (qualityData.data ? qualityData.data.length : 0) + ' analyses)');

        // Étape 3: Calcul du score
        progressManager.updateProgress(3, 'active', 'Calcul du score de qualité...');

        const result = {
          location: location,
          qualityData: qualityData,
          timestamp: Date.now()
        };

        // Mise en cache
        cache.set(cacheKey, {
          data: result,
          timestamp: Date.now()
        });

        progressManager.updateProgress(3, 'completed', 'Score calculé avec succès');

        // Étape 4: Envoi email (si activé)
        if (CONFIG.enableEmail && userEmail) {
          progressManager.updateProgress(4, 'active', 'Envoi du rapport par email...');
          
          // Simuler l'envoi d'email (remplacer par vraie logique)
          return new Promise(function(resolve) {
            setTimeout(function() {
              progressManager.updateProgress(4, 'completed', 'Rapport envoyé à ' + userEmail);
              resolve(result);
            }, 1500);
          });
        } else {
          return result;
        }
      });
    }).catch(function(error) {
      debug('Erreur lors de l analyse: ' + error.message, 'error');
      throw error;
    });
  }

  // Affichage d erreur
  function showError(message) {
    const html = '<div class="water-result water-result--error">' +
      '<h4 class="water-result__title">❌ Erreur</h4>' +
      '<div class="water-result__content">' +
      '<p>' + utils.sanitizeHtml(message) + '</p>' +
      '<p>💡 <strong>Suggestions :</strong></p>' +
      '<p>• Essayez avec un code postal (ex: 01000)</p>' +
      '<p>• Verifiez l orthographe de votre adresse</p>' +
      '<p>• Verifiez votre connexion internet</p>' +
      '</div></div>';
    ui.showResults(html);
  }

  // Gestionnaire principal du formulaire
  function handleFormSubmit(event) {
    event.preventDefault();
    
    const input = document.querySelector(selectors.input);
    const emailInput = document.querySelector(selectors.emailInput);
    const address = input ? input.value.trim() : '';
    
    if (!address) {
      showError('Veuillez saisir une adresse');
      return;
    }

    // Récupérer l'email si fourni
    userEmail = emailInput ? emailInput.value.trim() : null;
    if (userEmail && !userEmail.includes('@')) {
      userEmail = null; // Email invalide
    }

    ui.toggleButton(true, 'Analyse...');
    ui.showLoading();

    analyzeWater(address).then(function(result) {
      progressManager.complete();
      const html = generateResultsHtml(result.location, result.qualityData);
      ui.showResults(html);
    }).catch(function(error) {
      showError(error.message);
    }).finally(function() {
      setTimeout(function() {
        ui.hideLoading();
        ui.toggleButton(false, '{{ section.settings.button_text | default: "Analyser" }}');
      }, 1000);
    });
  }

  // Gestionnaire des exemples
  function handleExampleClick(event) {
    const example = event.target.dataset.example;
    const input = document.querySelector(selectors.input);
    
    if (input && example) {
      input.value = example;
      input.focus();
      
      event.target.style.transform = 'scale(0.95)';
      setTimeout(function() {
        event.target.style.transform = '';
      }, 150);
    }
  }

  // Initialisation
  function init() {
    debug('Initialisation de l analyseur d eau');

    const form = document.querySelector(selectors.form);
    if (form) {
      form.addEventListener('submit', handleFormSubmit);
    }

    const examples = document.querySelectorAll(selectors.examples);
    for (let i = 0; i < examples.length; i++) {
      examples[i].addEventListener('click', handleExampleClick);
    }

    const input = document.querySelector(selectors.input);
    if (input) {
      input.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
          e.preventDefault();
          handleFormSubmit(e);
        }
      });
    }

    if (CONFIG.enableMap) {
      const mapToggle = document.querySelector(selectors.mapToggle);
      const mapClose = document.querySelector(selectors.mapClose);
      const mapConfirm = document.querySelector(selectors.mapConfirm);

      if (mapToggle) {
        mapToggle.addEventListener('click', function() {
          mapManager.show();
          if (!map) {
            mapManager.init();
          }
        });
      }

      if (mapClose) {
        mapClose.addEventListener('click', mapManager.hide);
      }

      if (mapConfirm) {
        mapConfirm.addEventListener('click', mapManager.confirmAddress);
      }
    }

    debug('Analyseur initialise et pret');
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }

})();
</script>

{% schema %}
{
  "name": "Analyseur Eau Potable",
  "settings": [
    {
      "type": "header",
      "content": "📝 Configuration générale"
    },
    {
      "type": "text",
      "id": "title",
      "label": "Titre principal",
      "default": "Analyseur Qualite Eau Potable",
      "info": "Le titre affiché en haut de la section"
    },
    {
      "type": "text",
      "id": "subtitle",
      "label": "Sous-titre",
      "default": "Decouvrez la qualite de l eau a votre adresse",
      "info": "Description affichée sous le titre"
    },
    {
      "type": "text",
      "id": "search_title",
      "label": "Titre de la section recherche",
      "default": "Analysez votre eau",
      "info": "Titre de la zone de recherche"
    },
    {
      "type": "textarea",
      "id": "search_description",
      "label": "Description de la recherche",
      "default": "Saisissez votre adresse pour obtenir un rapport de qualite detaille",
      "info": "Texte explicatif pour la recherche"
    },
    {
      "type": "text",
      "id": "placeholder",
      "label": "Placeholder du champ adresse",
      "default": "01000 Bourg-en-Bresse",
      "info": "Texte d'exemple dans le champ de saisie"
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "Texte du bouton",
      "default": "Analyser",
      "info": "Texte affiché sur le bouton d'analyse"
    },
    {
      "type": "header",
      "content": "🎨 Couleurs principales"
    },
    {
      "type": "color",
      "id": "primary_color",
      "label": "Couleur primaire",
      "default": "#2563eb",
      "info": "Couleur principale (boutons, liens, accents)"
    },
    {
      "type": "color",
      "id": "secondary_color",
      "label": "Couleur secondaire",
      "default": "#1e40af",
      "info": "Couleur secondaire (hover, variations)"
    },
    {
      "type": "color",
      "id": "success_color",
      "label": "Couleur succès",
      "default": "#059669",
      "info": "Couleur pour les éléments positifs"
    },
    {
      "type": "color",
      "id": "warning_color",
      "label": "Couleur attention",
      "default": "#d97706",
      "info": "Couleur pour les avertissements"
    },
    {
      "type": "color",
      "id": "error_color",
      "label": "Couleur erreur",
      "default": "#dc2626",
      "info": "Couleur pour les erreurs"
    },
    {
      "type": "header",
      "content": "🎯 En-tête"
    },
    {
      "type": "color",
      "id": "header_background",
      "label": "Fond en-tête",
      "default": "#1e40af",
      "info": "Couleur de fond de l'en-tête"
    },
    {
      "type": "color",
      "id": "header_text_color",
      "label": "Texte en-tête",
      "default": "#ffffff",
      "info": "Couleur du texte de l'en-tête (titre + sous-titre)"
    },
    {
      "type": "header",
      "content": "📄 Contenu principal"
    },
    {
      "type": "color",
      "id": "content_background",
      "label": "Fond contenu",
      "default": "#ffffff",
      "info": "Couleur de fond du contenu principal"
    },
    {
      "type": "color",
      "id": "content_text_color",
      "label": "Texte contenu",
      "default": "#374151",
      "info": "Couleur du texte principal"
    },
    {
      "type": "header",
      "content": "🔍 Zone de recherche"
    },
    {
      "type": "color",
      "id": "search_background",
      "label": "Fond recherche",
      "default": "#3b82f6",
      "info": "Couleur de fond de la zone de recherche"
    },
    {
      "type": "color",
      "id": "search_text_color",
      "label": "Texte recherche",
      "default": "#ffffff",
      "info": "Couleur du texte dans la zone de recherche"
    },
    {
      "type": "header",
      "content": "🎭 Icônes et emojis"
    },
    {
      "type": "text",
      "id": "header_icon",
      "label": "Icône du header",
      "default": "🌊",
      "info": "Emoji affiché dans le titre principal"
    },
    {
      "type": "text",
      "id": "search_icon",
      "label": "Icône de recherche",
      "default": "🏠",
      "info": "Emoji affiché dans le titre de recherche"
    },
    {
      "type": "text",
      "id": "button_icon",
      "label": "Icône du bouton",
      "default": "🔍",
      "info": "Emoji affiché dans le bouton"
    },
    {
      "type": "text",
      "id": "loading_icon",
      "label": "Icône de chargement",
      "default": "🔍",
      "info": "Emoji affiché pendant le chargement"
    },
    {
      "type": "header",
      "content": "📐 Espacement et forme"
    },
    {
      "type": "range",
      "id": "border_radius",
      "label": "Arrondi des bords",
      "min": 0,
      "max": 30,
      "step": 2,
      "default": 16,
      "unit": "px",
      "info": "Arrondi des coins de la section"
    },
    {
      "type": "range",
      "id": "section_padding",
      "label": "Espacement interne",
      "min": 0.5,
      "max": 3,
      "step": 0.25,
      "default": 1.5,
      "unit": "rem",
      "info": "Espacement interne de la section"
    },
    {
      "type": "header",
      "content": "📧 Email (optionnel)"
    },
    {
      "type": "checkbox",
      "id": "enable_email",
      "label": "Activer la collecte d'email",
      "default": false,
      "info": "Permet aux utilisateurs de recevoir le rapport par email"
    },
    {
      "type": "text",
      "id": "email_title",
      "label": "Titre section email",
      "default": "Recevez votre rapport par email",
      "info": "Titre de la section email (si activée)"
    },
    {
      "type": "textarea",
      "id": "email_description",
      "label": "Description email",
      "default": "Optionnel : saisissez votre email pour recevoir un rapport detaille",
      "info": "Description de la section email"
    },
    {
      "type": "text",
      "id": "email_placeholder",
      "label": "Placeholder email",
      "default": "votre@email.com (optionnel)",
      "info": "Texte d'exemple dans le champ email"
    },
    {
      "type": "header",
      "content": "🗺️ Carte interactive"
    },
    {
      "type": "checkbox",
      "id": "enable_map",
      "label": "Activer la carte interactive",
      "default": false,
      "info": "Permet de sélectionner une adresse sur une carte"
    },
    {
      "type": "header",
      "content": "💡 Exemples et aide"
    },
    {
      "type": "checkbox",
      "id": "show_examples",
      "label": "Afficher les exemples",
      "default": true,
      "info": "Affiche les boutons d'exemples d'adresses"
    },
    {
      "type": "text",
      "id": "examples",
      "label": "Exemples d'adresses",
      "default": "01000,Gex,Bourg-en-Bresse",
      "info": "Liste d'exemples séparés par des virgules"
    },
    {
      "type": "header",
      "content": "🔧 Options avancées"
    },
    {
      "type": "checkbox",
      "id": "debug_mode",
      "label": "Mode debug",
      "default": false,
      "info": "Affiche les informations de debug (pour le développement)"
    }
  ],
  "presets": [
    {
      "name": "Analyseur Eau Potable"
    }
  ]
}
{% endschema %}