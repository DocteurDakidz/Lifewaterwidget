<!-- Analyseur Eau Potable - Version Simplifiée avec Formulaire + Analyse -->
<div class="water-analyzer" data-section-id="{{ section.id }}" style="
  --header-bg: {{ section.settings.header_background | default: '#4facfe' }};
  --header-text: {{ section.settings.header_text_color | default: '#ffffff' }};
  --content-bg: {{ section.settings.content_background | default: '#ffffff' }};
  --content-text: {{ section.settings.content_text_color | default: '#333333' }};
  --search-bg: {{ section.settings.search_background | default: '#f093fb' }};
  --search-text: {{ section.settings.search_text_color | default: '#ffffff' }};
  --button-bg: {{ section.settings.button_background | default: '#ff6b6b' }};
  --button-text: {{ section.settings.button_text_color | default: '#ffffff' }};
  --accent-color: {{ section.settings.accent_color | default: '#667eea' }};
  --success-color: {{ section.settings.success_color | default: '#28a745' }};
  --warning-color: {{ section.settings.warning_color | default: '#ffc107' }};
  --error-color: {{ section.settings.error_color | default: '#dc3545' }};
  --border-radius: {{ section.settings.border_radius | default: 20 }}px;
  --section-padding: {{ section.settings.section_padding | default: 2 }}rem;
">
  <!-- Header -->
  <header class="water-analyzer__header">
    <h2 class="water-analyzer__title">
      <span class="water-analyzer__icon">{{ section.settings.header_icon | default: '🌊' }}</span>
      {{ section.settings.title | default: 'Analyseur Qualité Eau Potable' }}
    </h2>
    <p class="water-analyzer__subtitle">
      {{ section.settings.subtitle | default: 'Découvrez la qualité de l eau à votre adresse' }}
    </p>
  </header>

  <!-- Main Content -->
  <div class="water-analyzer__content">
    
    <!-- Formulaire de Contact Initial -->
    <section class="water-analyzer__form-section" data-form-section>
      {% form 'contact', class: 'water-analyzer__contact-form' %}
        
        <div class="water-analyzer__search">
          <h3 class="water-analyzer__search-title">
            <span class="water-analyzer__icon">{{ section.settings.search_icon | default: '🏠' }}</span>
            {{ section.settings.search_title | default: 'Analysez votre eau' }}
          </h3>
          <p class="water-analyzer__search-description">
            {{ section.settings.search_description | default: 'Saisissez votre adresse pour obtenir un rapport de qualité détaillé' }}
          </p>

          <!-- Champs du formulaire -->
          <div class="water-analyzer__form-fields">
            
            <!-- Adresse (obligatoire) -->
            <div class="water-analyzer__field-group">
              <label for="contact_address" class="water-analyzer__label">
                🏠 Votre adresse *
              </label>
              <input 
                type="text" 
                id="contact_address"
                name="contact[address]"
                class="water-analyzer__input"
                placeholder="{{ section.settings.placeholder | default: '01000 Bourg-en-Bresse' }}"
                required
                value="{{ form.address }}"
              >
            </div>

            <!-- Email (obligatoire) -->
            <div class="water-analyzer__field-group">
              <label for="contact_email" class="water-analyzer__label">
                📧 Votre email *
              </label>
              <input 
                type="email" 
                id="contact_email"
                name="contact[email]"
                class="water-analyzer__input"
                placeholder="votre@email.com"
                required
                value="{{ form.email }}"
              >
            </div>

            <!-- Nom (optionnel) -->
            {% if section.settings.collect_name %}
            <div class="water-analyzer__field-group">
              <label for="contact_name" class="water-analyzer__label">
                👤 Votre nom
              </label>
              <input 
                type="text" 
                id="contact_name"
                name="contact[name]"
                class="water-analyzer__input"
                placeholder="Jean Dupont"
                value="{{ form.name }}"
              >
            </div>
            {% endif %}

            <!-- Option analyse approfondie -->
            <div class="water-analyzer__field-group water-analyzer__advanced-option">
              <label class="water-analyzer__checkbox-label">
                <input 
                  type="checkbox" 
                  name="contact[advanced_analysis]"
                  value="true"
                  class="water-analyzer__checkbox"
                  {% if form.advanced_analysis %}checked{% endif %}
                >
                <span class="water-analyzer__checkmark"></span>
                Je souhaite être contacté pour une analyse approfondie de mon eau
              </label>
            </div>

            <!-- Consentement RGPD -->
            <div class="water-analyzer__field-group water-analyzer__consent">
              <label class="water-analyzer__checkbox-label">
                <input 
                  type="checkbox" 
                  name="contact[consent]"
                  value="true"
                  required
                  class="water-analyzer__checkbox"
                  {% if form.consent %}checked{% endif %}
                >
                <span class="water-analyzer__checkmark"></span>
                J'accepte que mes données soient utilisées pour cette analyse et les recommandations associées *
              </label>
            </div>

          </div>

          <!-- Bouton de soumission -->
          <div class="water-analyzer__submit-section">
            <button 
              type="submit"
              class="water-analyzer__submit-button"
            >
              <span class="water-analyzer__button-icon">{{ section.settings.button_icon | default: '🔍' }}</span>
              <span class="water-analyzer__button-text">{{ section.settings.button_text | default: 'Demander l analyse' }}</span>
            </button>
          </div>

          <!-- Exemples d'adresses -->
          {% if section.settings.show_examples %}
          <div class="water-analyzer__examples">
            <span class="water-analyzer__examples-label">💡 Exemples :</span>
            {% assign examples = section.settings.examples | default: '01000,Gex,Bourg-en-Bresse' | split: ',' %}
            {% for example in examples %}
              <button 
                type="button" 
                class="water-analyzer__example"
                data-example="{{ example | strip }}"
              >
                {{ example | strip }}
              </button>
            {% endfor %}
          </div>
          {% endif %}

        </div>

        <!-- Champs cachés -->
        <input type="hidden" name="contact[tags]" value="water-analysis,{{ section.settings.contact_tags | default: 'lead' }}">
        <input type="hidden" name="contact[subject]" value="Demande d'analyse eau - {{ section.settings.title }}">
        
      {% endform %}
    </section>

    <!-- Message de remerciement (caché par défaut) -->
    <section class="water-analyzer__thank-you" data-thank-you style="display: none;">
      <div class="water-analyzer__thank-you-content">
        <h3>✅ Merci pour votre demande !</h3>
        <p>Nous avons bien reçu votre demande d'analyse pour <strong data-submitted-address></strong></p>
        <p>Vous recevrez les résultats détaillés par email sous 24h.</p>
        <div class="water-analyzer__continue">
          <p>En attendant, découvrez un aperçu de la qualité de l'eau dans votre région :</p>
          <button type="button" class="water-analyzer__continue-btn" data-continue-analysis>
            🔍 Voir l'analyse instantanée
          </button>
        </div>
      </div>
    </section>

    <!-- Section d'analyse avec carte -->
    <section class="water-analyzer__analysis-section" data-analysis-section style="display: none;">
      
      <!-- Toggle carte -->
      {% if section.settings.enable_map %}
      <div class="water-analyzer__map-toggle">
        <button type="button" class="water-analyzer__map-btn" data-map-toggle>
          <span class="water-analyzer__map-icon">🗺️</span>
          <span class="water-analyzer__map-text">Utiliser la carte</span>
        </button>
      </div>
      {% endif %}

      <!-- Carte interactive -->
      {% if section.settings.enable_map %}
      <div class="water-analyzer__map-container" data-map-container style="display: none;">
        <div class="water-analyzer__map-header">
          <h4>🗺️ Cliquez sur la carte pour sélectionner votre adresse</h4>
          <button type="button" class="water-analyzer__map-close" data-map-close>✕</button>
        </div>
        <div id="water-map-{{ section.id }}" class="water-analyzer__map" data-map></div>
        <div class="water-analyzer__map-info" data-map-info style="display: none;">
          <p><strong>Adresse sélectionnée:</strong> <span data-selected-address></span></p>
          <button type="button" class="water-analyzer__map-confirm" data-map-confirm>
            Analyser cette adresse
          </button>
        </div>
      </div>
      {% endif %}

      <!-- Formulaire d'analyse -->
      <div class="water-analyzer__analysis-form">
        <h3>🔬 Analyse instantanée</h3>
        <p>Obtenez un aperçu immédiat de la qualité de l'eau dans votre région</p>
        
        <div class="water-analyzer__input-group">
          <input 
            type="text" 
            id="analysis-input-{{ section.id }}" 
            class="water-analyzer__input"
            placeholder="{{ section.settings.placeholder | default: '01000 Bourg-en-Bresse' }}"
            data-analysis-input
          >
          <button 
            type="button"
            class="water-analyzer__button"
            data-analysis-button
          >
            <span class="water-analyzer__button-icon">🔍</span>
            <span class="water-analyzer__button-text">Analyser</span>
          </button>
        </div>
      </div>

      <!-- Barre de progression avancée -->
      <div class="water-analyzer__progress-container" data-progress-container style="display: none;">
        <div class="water-analyzer__progress-header">
          <h4 class="water-analyzer__progress-title">🔍 Analyse en cours...</h4>
          <div class="water-analyzer__progress-percentage" data-progress-percentage>0%</div>
        </div>
        
        <!-- Barre de progression principale -->
        <div class="water-analyzer__progress-bar">
          <div class="water-analyzer__progress-fill" data-progress-fill></div>
          <div class="water-analyzer__progress-shimmer"></div>
        </div>

        <!-- Étapes détaillées -->
        <div class="water-analyzer__progress-steps">
          <div class="water-analyzer__step" data-step="1">
            <div class="water-analyzer__step-icon">📍</div>
            <div class="water-analyzer__step-content">
              <div class="water-analyzer__step-title">Géolocalisation</div>
              <div class="water-analyzer__step-status" data-step-status="1">En attente...</div>
            </div>
            <div class="water-analyzer__step-indicator" data-step-indicator="1"></div>
          </div>

          <div class="water-analyzer__step" data-step="2">
            <div class="water-analyzer__step-icon">🌊</div>
            <div class="water-analyzer__step-content">
              <div class="water-analyzer__step-title">Données qualité</div>
              <div class="water-analyzer__step-status" data-step-status="2">En attente...</div>
            </div>
            <div class="water-analyzer__step-indicator" data-step-indicator="2"></div>
          </div>

          <div class="water-analyzer__step" data-step="3">
            <div class="water-analyzer__step-icon">🧮</div>
            <div class="water-analyzer__step-content">
              <div class="water-analyzer__step-title">Calcul du score</div>
              <div class="water-analyzer__step-status" data-step-status="3">En attente...</div>
            </div>
            <div class="water-analyzer__step-indicator" data-step-indicator="3"></div>
          </div>

          <div class="water-analyzer__step" data-step="4">
            <div class="water-analyzer__step-icon">📊</div>
            <div class="water-analyzer__step-content">
              <div class="water-analyzer__step-title">Génération rapport</div>
              <div class="water-analyzer__step-status" data-step-status="4">En attente...</div>
            </div>
            <div class="water-analyzer__step-indicator" data-step-indicator="4"></div>
          </div>
        </div>
      </div>

      <!-- Résultats -->
      <div class="water-analyzer__results" data-results style="display: none;">
        <!-- Résultats générés par JavaScript -->
      </div>

    </section>

  </div>
</div>

<style>
  .water-analyzer {
    font-family: var(--font-body-family, 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif);
    background: var(--content-bg);
    border-radius: var(--border-radius);
    overflow: hidden;
    box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15);
    margin: var(--section-padding) 0;
    color: var(--content-text);
    max-width: 100%;
    position: relative;
  }

  .water-analyzer__header {
    background: var(--header-bg);
    color: var(--header-text);
    padding: var(--section-padding) calc(var(--section-padding) * 0.75);
    text-align: center;
  }

  .water-analyzer__title {
    font-size: clamp(1.5rem, 4vw, 2rem);
    margin: 0 0 0.5rem 0;
    font-weight: 700;
    line-height: 1.2;
  }

  .water-analyzer__subtitle {
    margin: 0;
    opacity: 0.9;
    font-size: clamp(0.9rem, 2.5vw, 1.1rem);
  }

  .water-analyzer__icon {
    display: inline-block;
    margin-right: 0.5rem;
  }

  .water-analyzer__content {
    background: var(--content-bg);
    padding: var(--section-padding) calc(var(--section-padding) * 0.75);
  }

  /* Section de recherche */
  .water-analyzer__search {
    background: var(--search-bg);
    color: var(--search-text);
    padding: var(--section-padding);
    border-radius: calc(var(--border-radius) * 0.75);
    margin-bottom: var(--section-padding);
  }

  .water-analyzer__search-title {
    margin: 0 0 1rem 0;
    font-size: 1.3rem;
    font-weight: 600;
  }

  .water-analyzer__search-description {
    margin: 0 0 1.5rem 0;
    opacity: 0.95;
  }

  /* Champs de formulaire */
  .water-analyzer__form-fields {
    display: grid;
    gap: 1.25rem;
    margin-bottom: 1.5rem;
  }

  .water-analyzer__field-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .water-analyzer__label {
    font-weight: 600;
    font-size: 0.95rem;
    opacity: 0.95;
  }

  .water-analyzer__input {
    padding: 0.875rem 1.25rem;
    border: none;
    border-radius: 25px;
    font-size: 1rem;
    background: rgba(255, 255, 255, 0.95);
    outline: none;
    transition: all 0.3s ease;
    font-family: inherit;
    color: var(--content-text);
  }

  .water-analyzer__input:focus {
    background: white;
    box-shadow: 0 0 0 3px rgba(255, 255, 255, 0.3);
  }

  /* Cases à cocher */
  .water-analyzer__advanced-option,
  .water-analyzer__consent {
    margin-top: 0.5rem;
  }

  .water-analyzer__checkbox-label {
    display: flex;
    align-items: flex-start;
    gap: 0.75rem;
    cursor: pointer;
    font-size: 0.9rem;
    line-height: 1.4;
  }

  .water-analyzer__checkbox {
    appearance: none;
    width: 20px;
    height: 20px;
    border: 2px solid rgba(255, 255, 255, 0.7);
    border-radius: 4px;
    background: rgba(255, 255, 255, 0.1);
    cursor: pointer;
    position: relative;
    flex-shrink: 0;
    margin-top: 2px;
  }

  .water-analyzer__checkbox:checked {
    background: rgba(255, 255, 255, 0.9);
    border-color: rgba(255, 255, 255, 0.9);
  }

  .water-analyzer__checkbox:checked::after {
    content: '✓';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    color: var(--search-bg);
    font-weight: bold;
    font-size: 14px;
  }

  /* Bouton de soumission */
  .water-analyzer__submit-section {
    text-align: center;
    margin-bottom: 1.5rem;
  }

  .water-analyzer__submit-button {
    padding: 1rem 2rem;
    background: var(--button-bg);
    color: var(--button-text);
    border: none;
    border-radius: 30px;
    font-size: 1.1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    display: inline-flex;
    align-items: center;
    gap: 0.75rem;
    min-width: 200px;
    justify-content: center;
  }

  .water-analyzer__submit-button:hover:not(:disabled) {
    transform: translateY(-3px);
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
  }

  /* Exemples */
  .water-analyzer__examples {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: 0.5rem;
    opacity: 0.9;
    font-size: 0.9rem;
    margin-top: 1rem;
  }

  .water-analyzer__examples-label {
    font-weight: 600;
    margin-right: 0.5rem;
  }

  .water-analyzer__example {
    background: rgba(255, 255, 255, 0.2);
    color: var(--search-text);
    border: none;
    padding: 0.375rem 0.75rem;
    border-radius: 12px;
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 0.85rem;
  }

  .water-analyzer__example:hover {
    background: rgba(255, 255, 255, 0.3);
    transform: translateY(-1px);
  }

  /* Message de remerciement */
  .water-analyzer__thank-you {
    background: var(--success-color);
    color: white;
    padding: var(--section-padding);
    border-radius: calc(var(--border-radius) * 0.75);
    margin-bottom: var(--section-padding);
    text-align: center;
    animation: fadeInUp 0.6s ease-out;
  }

  .water-analyzer__thank-you h3 {
    margin: 0 0 1rem 0;
    font-size: 1.5rem;
  }

  .water-analyzer__thank-you p {
    margin: 0.5rem 0;
  }

  .water-analyzer__continue {
    margin-top: 1.5rem;
    padding-top: 1.5rem;
    border-top: 2px solid rgba(255, 255, 255, 0.2);
  }

  .water-analyzer__continue-btn {
    background: rgba(255, 255, 255, 0.2);
    color: white;
    border: 2px solid rgba(255, 255, 255, 0.3);
    padding: 0.875rem 1.5rem;
    border-radius: 25px;
    cursor: pointer;
    font-weight: 600;
    transition: all 0.3s ease;
    margin-top: 1rem;
    font-size: 1rem;
  }

  .water-analyzer__continue-btn:hover {
    background: rgba(255, 255, 255, 0.3);
    transform: translateY(-2px);
  }

  /* Section d'analyse */
  .water-analyzer__analysis-section {
    animation: fadeInUp 0.6s ease-out;
  }

  .water-analyzer__analysis-form {
    background: #f8f9fa;
    padding: 1.5rem;
    border-radius: calc(var(--border-radius) * 0.75);
    margin-bottom: 1.5rem;
    text-align: center;
  }

  .water-analyzer__analysis-form h3 {
    margin: 0 0 0.5rem 0;
    color: var(--content-text);
  }

  .water-analyzer__analysis-form p {
    margin: 0 0 1.5rem 0;
    color: #666;
  }

  .water-analyzer__input-group {
    display: flex;
    gap: 0.75rem;
    align-items: stretch;
    flex-wrap: wrap;
    justify-content: center;
  }

  .water-analyzer__input-group .water-analyzer__input {
    flex: 1;
    min-width: 250px;
    background: white;
    color: var(--content-text);
  }

  .water-analyzer__button {
    padding: 0.875rem 1.5rem;
    background: var(--button-bg);
    color: var(--button-text);
    border: none;
    border-radius: 25px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    white-space: nowrap;
  }

  .water-analyzer__button:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
  }

  /* Barre de progression avancée */
  .water-analyzer__progress-container {
    background: white;
    border-radius: calc(var(--border-radius) * 0.75);
    padding: 2rem;
    margin-bottom: 1.5rem;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
  }

  .water-analyzer__progress-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
  }

  .water-analyzer__progress-title {
    margin: 0;
    color: var(--content-text);
    font-size: 1.2rem;
  }

  .water-analyzer__progress-percentage {
    font-size: 1.1rem;
    font-weight: bold;
    color: var(--accent-color);
  }

  .water-analyzer__progress-bar {
    position: relative;
    height: 8px;
    background: #e5e7eb;
    border-radius: 4px;
    overflow: hidden;
    margin-bottom: 2rem;
  }

  .water-analyzer__progress-fill {
    height: 100%;
    background: linear-gradient(90deg, var(--accent-color), var(--success-color));
    border-radius: 4px;
    transition: width 0.8s cubic-bezier(0.4, 0, 0.2, 1);
    width: 0%;
  }

  .water-analyzer__progress-shimmer {
    position: absolute;
    top: 0;
    left: -100%;
    height: 100%;
    width: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
    animation: shimmer 2s infinite;
  }

  @keyframes shimmer {
    0% { left: -100%; }
    100% { left: 100%; }
  }

  .water-analyzer__progress-steps {
    display: grid;
    gap: 1rem;
  }

  .water-analyzer__step {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem;
    background: #f8fafc;
    border-radius: 8px;
    transition: all 0.3s ease;
  }

  .water-analyzer__step.active {
    background: #eff6ff;
    border-left: 4px solid var(--accent-color);
  }

  .water-analyzer__step.completed {
    background: #f0fdf4;
    border-left: 4px solid var(--success-color);
  }

  .water-analyzer__step.error {
    background: #fef2f2;
    border-left: 4px solid var(--error-color);
  }

  .water-analyzer__step-icon {
    font-size: 1.5rem;
    width: 40px;
    text-align: center;
  }

  .water-analyzer__step-content {
    flex: 1;
  }

  .water-analyzer__step-title {
    font-weight: 600;
    color: var(--content-text);
    margin-bottom: 0.25rem;
  }

  .water-analyzer__step-status {
    font-size: 0.9rem;
    color: #6b7280;
  }

  .water-analyzer__step-indicator {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: #d1d5db;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
  }

  .water-analyzer__step.active .water-analyzer__step-indicator {
    background: var(--accent-color);
    animation: pulse 2s infinite;
  }

  .water-analyzer__step.completed .water-analyzer__step-indicator {
    background: var(--success-color);
  }

  .water-analyzer__step.completed .water-analyzer__step-indicator::after {
    content: '✓';
    color: white;
    font-size: 12px;
    font-weight: bold;
  }

  .water-analyzer__step.error .water-analyzer__step-indicator {
    background: var(--error-color);
  }

  .water-analyzer__step.error .water-analyzer__step-indicator::after {
    content: '✕';
    color: white;
    font-size: 12px;
    font-weight: bold;
  }

  @keyframes pulse {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.1); }
  }

  /* Carte */
  .water-analyzer__map-toggle {
    text-align: center;
    margin-bottom: 1.5rem;
  }

  .water-analyzer__map-btn {
    background: rgba(102, 126, 234, 0.1);
    color: var(--accent-color);
    border: 2px solid var(--accent-color);
    padding: 0.75rem 1.5rem;
    border-radius: 25px;
    cursor: pointer;
    transition: all 0.3s ease;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    font-weight: 600;
  }

  .water-analyzer__map-btn:hover {
    background: var(--accent-color);
    color: white;
    transform: translateY(-2px);
  }

  .water-analyzer__map-container {
    background: white;
    border-radius: 15px;
    margin-bottom: 1.5rem;
    overflow: hidden;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
  }

  .water-analyzer__map-header {
    background: var(--accent-color);
    color: white;
    padding: 1rem 1.5rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .water-analyzer__map-header h4 {
    margin: 0;
    font-size: 1rem;
  }

  .water-analyzer__map-close {
    background: none;
    border: none;
    color: white;
    font-size: 1.5rem;
    cursor: pointer;
    padding: 0;
    width: 30px;
    height: 30px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background 0.2s ease;
  }

  .water-analyzer__map-close:hover {
    background: rgba(255, 255, 255, 0.2);
  }

  .water-analyzer__map {
    height: 400px;
    width: 100%;
    background: #f0f0f0;
  }

  .water-analyzer__map-info {
    padding: 1rem 1.5rem;
    background: #f8f9fa;
    border-top: 1px solid #e9ecef;
  }

  .water-analyzer__map-info p {
    margin: 0 0 1rem 0;
    color: #333;
  }

  .water-analyzer__map-confirm {
    background: var(--button-bg);
    color: var(--button-text);
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 25px;
    cursor: pointer;
    font-weight: 600;
    transition: all 0.3s ease;
  }

  .water-analyzer__map-confirm:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
  }

  /* Résultats */
  .water-analyzer__results {
    animation: fadeInUp 0.5s ease-out;
  }

  .water-result {
    border-radius: calc(var(--border-radius) * 0.6);
    padding: 1.5rem;
    margin: 1rem 0;
  }

  .water-result--location {
    background: #f8f9fa;
    border-left: 4px solid var(--accent-color);
  }

  .water-result--score {
    background: #f8fafc;
    text-align: center;
  }

  .water-result--characteristics {
    background: #f1f5f9;
    border-left: 4px solid #64748b;
  }

  .water-result--problems {
    background: #fffbeb;
    border-left: 4px solid var(--warning-color);
  }

  .water-result--recommendation {
    background: #f0f9ff;
    border-left: 4px solid #3b82f6;
  }

  .water-result--info {
    background: #f8fafc;
    border-left: 4px solid #64748b;
  }

  .water-result--email {
    background: #f0fdf4;
    border-left: 4px solid var(--success-color);
  }

  .water-result--quality {
    background: #f8f9fa;
    border-left: 4px solid var(--success-color);
  }

  .water-result--conformity {
    background: #f0fdf4;
  }

  .water-result--recommendations {
    background: #ffecd2;
  }

  .water-result--warning {
    background: #fff3cd;
    color: #856404;
    border-left: 4px solid var(--warning-color);
  }

  .water-result--error {
    background: #f8d7da;
    color: #721c24;
    border-left: 4px solid var(--error-color);
  }

  .water-result__title {
    margin: 0 0 1rem 0;
    font-size: 1.2rem;
    font-weight: 600;
  }

  .water-result__content p {
    margin: 0.5rem 0;
  }

  /* Styles pour le cercle de score */
  .score-circle {
    display: inline-flex !important;
    flex-direction: column !important;
    align-items: center !important;
    justify-content: center !important;
    margin: 1rem auto !important;
  }

  /* Animations */
  @keyframes fadeInUp {
    from { 
      opacity: 0; 
      transform: translateY(30px); 
    }
    to { 
      opacity: 1; 
      transform: translateY(0); 
    }
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .water-analyzer {
      margin: 1rem 0;
      border-radius: calc(var(--border-radius) * 0.75);
    }

    .water-analyzer__header {
      padding: 1.5rem 1rem;
    }

    .water-analyzer__content {
      padding: 1.5rem 1rem;
    }

    .water-analyzer__search {
      padding: 1.5rem;
    }

    .water-analyzer__input-group {
      flex-direction: column;
    }

    .water-analyzer__input-group .water-analyzer__input {
      min-width: auto;
    }

    .water-analyzer__examples {
      justify-content: center;
    }

    .water-analyzer__submit-button {
      width: 100%;
    }

    .water-analyzer__map {
      height: 300px;
    }

    .water-analyzer__progress-steps {
      gap: 0.75rem;
    }

    .water-analyzer__step {
      padding: 0.75rem;
    }

    .score-circle {
      width: 100px !important;
      height: 100px !important;
      border-width: 6px !important;
    }
    
    .score-circle div:first-child {
      font-size: 28px !important;
    }
  }

  @media (max-width: 480px) {
    .water-analyzer__examples {
      flex-direction: column;
      align-items: flex-start;
    }

    .water-analyzer__examples-label {
      margin-bottom: 0.5rem;
    }

    .water-analyzer__map-header {
      flex-direction: column;
      gap: 0.5rem;
      text-align: center;
    }

    .water-analyzer__progress-header {
      flex-direction: column;
      gap: 0.5rem;
      text-align: center;
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .water-analyzer {
      border: 2px solid #000;
    }

    .water-analyzer__submit-button,
    .water-analyzer__button {
      border: 2px solid #000;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .water-analyzer__submit-button:hover,
    .water-analyzer__button:hover,
    .water-analyzer__continue-btn:hover {
      transform: none;
    }

    .water-analyzer__example:hover {
      transform: none;
    }

    .water-analyzer__progress-shimmer {
      animation: none;
    }

    .water-analyzer__step.active .water-analyzer__step-indicator {
      animation: none;
    }

    .water-analyzer__thank-you,
    .water-analyzer__analysis-section,
    .water-analyzer__results {
      animation: none;
    }
  }
</style>

<!-- Leaflet CSS pour la carte -->
{% if section.settings.enable_map %}
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
{% endif %}

<script>
(function() {
  'use strict';
  
  // Configuration avec système de fallback CORS
  const CORS_METHODS = [
    {
      name: 'AllOrigins',
      proxy: 'https://api.allorigins.win/get?url=',
      parse: function(data) { return JSON.parse(data.contents); },
      timeout: 10000
    },
    {
      name: 'ProxyAnywhereHeroku', 
      proxy: 'https://cors-anywhere.herokuapp.com/',
      parse: function(data) { return data; },
      timeout: 8000
    },
    {
      name: 'ThingProxy',
      proxy: 'https://thingproxy.freeboard.io/fetch/',
      parse: function(data) { return data; },
      timeout: 8000
    },
    {
      name: 'ProxyCors',
      proxy: 'https://proxy.cors.sh/',
      parse: function(data) { return data; },
      timeout: 8000
    },
    {
      name: 'Direct',
      proxy: '',
      parse: function(data) { return data; },
      timeout: 5000
    }
  ];

  // Configuration
  const CONFIG = {
    sectionId: '{{ section.id }}',
    enableMap: {{ section.settings.enable_map | default: false }},
    maxRetries: 3,
    cacheTimeout: 300000,
    dateRangeYears: 2
  };

  // Variables globales
  let map = null;
  let marker = null;
  let selectedAddress = null;
  let submittedAddress = null;
  let userEmail = null;
  const cache = new Map();

  // Sélecteurs DOM
  const selectors = {
    formSection: '[data-form-section]',
    contactForm: '.water-analyzer__contact-form',
    thankYou: '[data-thank-you]',
    submittedAddress: '[data-submitted-address]',
    continueBtn: '[data-continue-analysis]',
    analysisSection: '[data-analysis-section]',
    analysisInput: '[data-analysis-input]',
    analysisButton: '[data-analysis-button]',
    progressContainer: '[data-progress-container]',
    progressFill: '[data-progress-fill]',
    progressPercentage: '[data-progress-percentage]',
    results: '[data-results]',
    examples: '[data-example]',
    mapToggle: '[data-map-toggle]',
    mapContainer: '[data-map-container]',
    mapElement: '[data-map]',
    mapClose: '[data-map-close]',
    mapInfo: '[data-map-info]',
    mapConfirm: '[data-map-confirm]',
    selectedAddressSpan: '[data-selected-address]'
  };

  // Utilitaires
  const utils = {
    sanitizeHtml: function(str) {
      const div = document.createElement('div');
      div.textContent = str;
      return div.innerHTML;
    },

    formatDate: function(dateString) {
      return new Date(dateString).toLocaleDateString('fr-FR', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
    },

    getCacheKey: function(address) {
      return 'water_analysis_' + address.toLowerCase().replace(/\s+/g, '_');
    }
  };

  // Gestion de la progression
  const progressManager = {
    steps: [
      { id: 1, duration: 25, message: 'Recherche de l\'adresse...' },
      { id: 2, duration: 35, message: 'Récupération des données qualité...' },
      { id: 3, duration: 25, message: 'Calcul du score de qualité...' },
      { id: 4, duration: 15, message: 'Génération du rapport...' }
    ],
    
    currentStep: 0,
    currentProgress: 0,

    start: function() {
      const container = document.querySelector(selectors.progressContainer);
      const results = document.querySelector(selectors.results);
      
      if (results) results.style.display = 'none';
      if (container) container.style.display = 'block';
      
      this.currentStep = 0;
      this.currentProgress = 0;
      this.updateProgress(0);
      this.resetSteps();
    },

    updateProgress: function(percentage) {
      const fill = document.querySelector(selectors.progressFill);
      const percentageEl = document.querySelector(selectors.progressPercentage);
      
      if (fill) fill.style.width = percentage + '%';
      if (percentageEl) percentageEl.textContent = Math.round(percentage) + '%';
      
      this.currentProgress = percentage;
    },

    setStepStatus: function(stepId, status, message) {
      const step = document.querySelector('[data-step="' + stepId + '"]');
      const statusEl = document.querySelector('[data-step-status="' + stepId + '"]');
      
      if (!step || !statusEl) return;
      
      // Nettoyer les classes précédentes
      step.classList.remove('active', 'completed', 'error');
      
      // Ajouter la nouvelle classe
      step.classList.add(status);
      
      // Mettre à jour le message
      statusEl.textContent = message;
    },

    nextStep: function(message) {
      if (this.currentStep > 0) {
        this.setStepStatus(this.currentStep, 'completed', '✓ Terminé');
      }
      
      this.currentStep++;
      
      if (this.currentStep <= this.steps.length) {
        const step = this.steps[this.currentStep - 1];
        this.setStepStatus(this.currentStep, 'active', message || step.message);
        
        // Calculer le pourcentage cumulé
        let cumulativeProgress = 0;
        for (let i = 0; i < this.currentStep - 1; i++) {
          cumulativeProgress += this.steps[i].duration;
        }
        
        this.updateProgress(cumulativeProgress);
        
        // Animer vers le pourcentage final de cette étape
        setTimeout(() => {
          const finalProgress = cumulativeProgress + step.duration;
          this.updateProgress(finalProgress);
        }, 200);
      }
    },

    complete: function() {
      if (this.currentStep > 0) {
        this.setStepStatus(this.currentStep, 'completed', '✓ Terminé');
      }
      
      this.updateProgress(100);
      
      setTimeout(() => {
        this.hide();
      }, 1000);
    },

    error: function(stepId, message) {
      this.setStepStatus(stepId || this.currentStep, 'error', message || '✕ Erreur');
    },

    hide: function() {
      const container = document.querySelector(selectors.progressContainer);
      if (container) container.style.display = 'none';
    },

    resetSteps: function() {
      for (let i = 1; i <= this.steps.length; i++) {
        this.setStepStatus(i, '', 'En attente...');
      }
    }
  };

  // Gestion de la carte
  const mapManager = {
    init: function() {
      if (!CONFIG.enableMap) return;
      
      if (typeof L === 'undefined') {
        const script = document.createElement('script');
        script.src = 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.js';
        script.onload = function() {
          mapManager.setupMap();
        };
        document.head.appendChild(script);
      } else {
        mapManager.setupMap();
      }
    },

    setupMap: function() {
      const mapElement = document.querySelector(selectors.mapElement);
      if (!mapElement) return;

      map = L.map(mapElement.id).setView([46.603354, 1.888334], 6);
      
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '© OpenStreetMap contributors'
      }).addTo(map);

      map.on('click', mapManager.onMapClick);
    },

    onMapClick: function(e) {
      const lat = e.latlng.lat;
      const lng = e.latlng.lng;
      
      if (marker) {
        map.removeLayer(marker);
      }
      
      marker = L.marker([lat, lng]).addTo(map);
      mapManager.reverseGeocode(lat, lng);
    },

    reverseGeocode: function(lat, lng) {
      const url = 'https://api-adresse.data.gouv.fr/reverse/?lon=' + lng + '&lat=' + lat;
      
      fetchWithFallback(url).then(function(data) {
        if (data && data.features && data.features.length > 0) {
          const address = data.features[0].properties.label;
          selectedAddress = address;
          
          const addressEl = document.querySelector(selectors.selectedAddressSpan);
          const mapInfo = document.querySelector(selectors.mapInfo);
          
          if (addressEl && mapInfo) {
            addressEl.textContent = address;
            mapInfo.style.display = 'block';
          }
        }
      }).catch(function(error) {
        console.warn('Erreur geocodage inverse:', error);
      });
    },

    show: function() {
      const container = document.querySelector(selectors.mapContainer);
      if (container) {
        container.style.display = 'block';
        
        setTimeout(function() {
          if (map) {
            map.invalidateSize();
          }
        }, 100);
      }
    },

    hide: function() {
      const container = document.querySelector(selectors.mapContainer);
      if (container) {
        container.style.display = 'none';
      }
      
      selectedAddress = null;
      const mapInfo = document.querySelector(selectors.mapInfo);
      if (mapInfo) {
        mapInfo.style.display = 'none';
      }
    },

    confirmAddress: function() {
      if (selectedAddress) {
        const input = document.querySelector(selectors.analysisInput);
        if (input) {
          input.value = selectedAddress;
        }
        mapManager.hide();
        
        setTimeout(function() {
          analyzeWater(selectedAddress);
        }, 300);
      }
    }
  };

  // Gestion de l'interface
  const ui = {
    toggleButton: function(disabled, text) {
      const button = document.querySelector(selectors.analysisButton);
      if (!button) return;

      button.disabled = disabled;
      
      if (text) {
        const buttonText = button.querySelector('.water-analyzer__button-text');
        const buttonIcon = button.querySelector('.water-analyzer__button-icon');
        
        if (buttonText) buttonText.textContent = text;
        if (buttonIcon) buttonIcon.textContent = disabled ? '🔄' : '🔍';
      }
    },

    showResults: function(html) {
      const results = document.querySelector(selectors.results);
      if (results) {
        results.innerHTML = html;
        results.style.display = 'block';
        
        setTimeout(function() {
          results.scrollIntoView({ 
            behavior: 'smooth', 
            block: 'start' 
          });
        }, 100);
      }
    },

    showThankYou: function(address, email) {
      const formSection = document.querySelector(selectors.formSection);
      const thankYou = document.querySelector(selectors.thankYou);
      const submittedAddressEl = document.querySelector(selectors.submittedAddress);
      
      if (formSection) formSection.style.display = 'none';
      if (thankYou) thankYou.style.display = 'block';
      if (submittedAddressEl) submittedAddressEl.textContent = address;
      
      submittedAddress = address;
      userEmail = email;
    },

    showAnalysisSection: function() {
      const analysisSection = document.querySelector(selectors.analysisSection);
      const analysisInput = document.querySelector(selectors.analysisInput);
      
      if (analysisSection) analysisSection.style.display = 'block';
      if (analysisInput && submittedAddress) {
        analysisInput.value = submittedAddress;
      }
    }
  };

  // Fonction de fetch avec timeout
  function fetchWithTimeout(url, options) {
    options = options || {};
    const timeout = options.timeout || 5000;
    const fetchOptions = Object.assign({}, options);
    delete fetchOptions.timeout;
    
    const controller = new AbortController();
    const timeoutId = setTimeout(function() {
      controller.abort();
    }, timeout);
    
    fetchOptions.signal = controller.signal;
    
    return fetch(url, fetchOptions).then(function(response) {
      clearTimeout(timeoutId);
      return response;
    }).catch(function(error) {
      clearTimeout(timeoutId);
      throw error;
    });
  }

  // Fonction de fetch avec fallback
  function fetchWithFallback(url, methodIndex, retryCount) {
    methodIndex = methodIndex || 0;
    retryCount = retryCount || 0;
    
    if (methodIndex >= CORS_METHODS.length) {
      throw new Error('Toutes les méthodes de connexion ont échoué. Vérifiez votre connexion internet.');
    }

    const method = CORS_METHODS[methodIndex];
    const proxyUrl = method.proxy ? method.proxy + encodeURIComponent(url) : url;
    
    return fetchWithTimeout(proxyUrl, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'User-Agent': 'WaterAnalyzer/1.0'
      },
      mode: 'cors',
      timeout: method.timeout
    }).then(function(response) {
      if (!response.ok) {
        throw new Error('HTTP ' + response.status + ': ' + response.statusText);
      }
      return response.json();
    }).then(function(data) {
      return method.parse(data);
    }).catch(function(error) {
      if (retryCount < CONFIG.maxRetries) {
        return new Promise(function(resolve) {
          setTimeout(resolve, 1000 * (retryCount + 1));
        }).then(function() {
          return fetchWithFallback(url, methodIndex, retryCount + 1);
        });
      }
      
      return fetchWithFallback(url, methodIndex + 1, 0);
    });
  }

  // Fonction de calcul de score
  function calculateWaterScore(qualityData) {
    if (!qualityData || !qualityData.data || !qualityData.data.length) {
      return null;
    }

    const analyses = qualityData.data;
    let scoreBase = 85;
    let penaliteBacterio = 0;
    let penaliteTurbidite = 0;
    let penaliteChimique = 0;
    let penaliteChlore = 0;
    let bonus = 0;

    // Analyser les données récentes (dernières analyses)
    const recentAnalyses = analyses.slice(0, 20); // Prendre les 20 plus récentes
    
    // Variables pour stocker les valeurs moyennes/max des paramètres critiques
    let maxTurbidite = 0;
    let avgConductivite = 0;
    let maxChloreLibre = 0;
    let maxChloreTotal = 0;
    let bacteriesDetected = false;
    let aspectAnormal = false;
    let avgPH = 7.5;
    let polluantsDetected = false;

    // Parcourir les analyses pour extraire les paramètres clés
    recentAnalyses.forEach(function(analyse) {
      const libelle = (analyse.libelle_parametre || '').toLowerCase();
      const valeur = parseFloat(analyse.resultat_numerique) || 0;
      const unite = analyse.libelle_unite || '';
      
      // Détecter les paramètres selon leur libellé
      if (libelle.includes('turbidité') || libelle.includes('turbidite')) {
        maxTurbidite = Math.max(maxTurbidite, valeur);
      }
      
      if (libelle.includes('conductivité') || libelle.includes('conductivite')) {
        avgConductivite = Math.max(avgConductivite, valeur);
      }
      
      if (libelle.includes('chlore libre')) {
        maxChloreLibre = Math.max(maxChloreLibre, valeur);
      }
      
      if (libelle.includes('chlore total')) {
        maxChloreTotal = Math.max(maxChloreTotal, valeur);
      }
      
      if (libelle.includes('ph')) {
        avgPH = valeur > 0 ? valeur : avgPH;
      }
      
      // Détecter les bactéries pathogènes
      if ((libelle.includes('coli') || libelle.includes('coliforme') || libelle.includes('enterocoque')) && valeur > 0) {
        bacteriesDetected = true;
      }
      
      // Détecter l'aspect anormal
      if (libelle.includes('aspect') && analyse.resultat_alphanumerique && analyse.resultat_alphanumerique.toLowerCase().includes('anormal')) {
        aspectAnormal = true;
      }
      
      // Détecter les polluants chimiques
      if ((libelle.includes('ammonium') || libelle.includes('nitrite') || libelle.includes('plomb') || libelle.includes('pesticide')) && valeur > 0) {
        polluantsDetected = true;
      }
    });

    // === CALCUL DES PÉNALITÉS SELON NOTRE ALGORITHME ===

    // 1. Pénalités bactériologiques (max -40)
    if (bacteriesDetected) {
      penaliteBacterio = 25; // E.coli ou coliformes détectés
    }

    // 2. Pénalités turbidité/aspect (max -25)
    if (maxTurbidite > 2) {
      penaliteTurbidite += 15;
    }
    if (aspectAnormal) {
      penaliteTurbidite += 10;
    }
    penaliteTurbidite = Math.min(penaliteTurbidite, 25);

    // 3. Pénalités chimiques (max -20)
    if (polluantsDetected) {
      penaliteChimique = 10;
    }

    // 4. Pénalités chlore (max -10)
    if (maxChloreLibre > 0.3) {
      penaliteChlore += 5;
    }
    if (maxChloreTotal > 0.5) {
      penaliteChlore += 10;
    } else if (maxChloreTotal > 0.3) {
      penaliteChlore += 5;
    }
    penaliteChlore = Math.min(penaliteChlore, 10);

    // === CALCUL DES BONUS ===
    if (maxTurbidite < 0.1) {
      bonus += 2;
    }
    if (maxChloreLibre <= 0.05) {
      bonus += 2;
    }
    if (avgPH >= 7.2 && avgPH <= 7.8) {
      bonus += 1;
    }
    bonus = Math.min(bonus, 5);

    // === SCORE FINAL ===
    const penaliteTotale = penaliteBacterio + penaliteTurbidite + penaliteChimique + penaliteChlore;
    const scoreFinal = Math.min(100, Math.max(0, scoreBase - penaliteTotale + bonus));

    // === CLASSIFICATION ===
    let categorie, couleur, emoji, action;
    if (scoreFinal >= 90) {
      categorie = "EXCELLENTE"; couleur = "#2E7D32"; emoji = "🟢"; action = "Aucune action nécessaire";
    } else if (scoreFinal >= 80) {
      categorie = "TRÈS BONNE"; couleur = "#4CAF50"; emoji = "🟢"; action = "Surveillance recommandée";
    } else if (scoreFinal >= 60) {
      categorie = "BONNE"; couleur = "#FF9800"; emoji = "🟡"; action = "Traitement léger conseillé";
    } else if (scoreFinal >= 40) {
      categorie = "MOYENNE"; couleur = "#FF5722"; emoji = "🟠"; action = "Traitement recommandé";
    } else if (scoreFinal >= 20) {
      categorie = "MÉDIOCRE"; couleur = "#D32F2F"; emoji = "🔴"; action = "Traitement urgent";
    } else {
      categorie = "DANGEREUSE"; couleur = "#B71C1C"; emoji = "🔴"; action = "Traitement obligatoire";
    }

    // === CLASSIFICATION DURETÉ ===
    let dureteNiveau, dureteAlerte, dureteCouleur;
    if (avgConductivite < 200) {
      dureteNiveau = "Très douce"; dureteAlerte = "Risque de corrosion"; dureteCouleur = "#2196F3";
    } else if (avgConductivite <= 400) {
      dureteNiveau = "Douce"; dureteAlerte = "Légèrement corrosive"; dureteCouleur = "#4CAF50";
    } else if (avgConductivite <= 800) {
      dureteNiveau = "Moyennement dure"; dureteAlerte = "Dépôts calcaire modérés"; dureteCouleur = "#FF9800";
    } else if (avgConductivite <= 1100) {
      dureteNiveau = "Dure"; dureteAlerte = "Problèmes calcaire importants"; dureteCouleur = "#FF5722";
    } else {
      dureteNiveau = "Très dure"; dureteAlerte = "Calcaire excessif"; dureteCouleur = "#D32F2F";
    }

    // === RECOMMANDATION PRODUIT ===
    let produitRecommande, objectif, collectionHandle;
    if (scoreFinal >= 90) {
      produitRecommande = "Carafe filtrante";
      objectif = "Améliorer le goût (éliminer chlore résiduel)";
      collectionHandle = "carafes-filtrantes";
    } else if (scoreFinal >= 80) {
      if (avgConductivite > 400) {
        produitRecommande = "Adoucisseur d'eau";
        objectif = "Protéger électroménager, améliorer confort";
        collectionHandle = "adoucisseurs";
      } else {
        produitRecommande = "Filtration charbon actif";
        objectif = "Améliorer goût et odeur";
        collectionHandle = "filtres-charbon";
      }
    } else if (scoreFinal >= 60) {
      produitRecommande = "Système préfiltration + filtration";
      objectif = "Éliminer chlore, sédiments, améliorer goût";
      collectionHandle = "systemes-complets";
    } else if (scoreFinal >= 40) {
      produitRecommande = "Système complet avec UV";
      objectif = "Sécurité sanitaire et qualité organoleptique";
      collectionHandle = "systemes-uv";
    } else {
      produitRecommande = "Osmoseur + reminéralisation";
      objectif = "Purification totale et reminéralisation";
      collectionHandle = "osmoseurs";
    }

    return {
      score: scoreFinal,
      categorie: categorie,
      couleur: couleur,
      emoji: emoji,
      action: action,
      durete: {
        niveau: dureteNiveau,
        valeur: avgConductivite,
        alerte: dureteAlerte,
        couleur: dureteCouleur
      },
      problemes: {
        bacteries: bacteriesDetected,
        turbidite: maxTurbidite > 2,
        chlore: maxChloreLibre > 0.3,
        aspect: aspectAnormal,
        polluants: polluantsDetected
      },
      recommandation: {
        produit: produitRecommande,
        objectif: objectif,
        collection: collectionHandle
      },
      parametres: {
        turbidite: maxTurbidite,
        conductivite: avgConductivite,
        chloreLibre: maxChloreLibre,
        chloreTotal: maxChloreTotal,
        ph: avgPH
      }
    };
  }

  // Fonction d'analyse
  function analyzeWater(address) {
    if (!address || !address.trim()) {
      throw new Error('Veuillez saisir une adresse valide');
    }

    const cacheKey = utils.getCacheKey(address);
    
    if (cache.has(cacheKey)) {
      const cached = cache.get(cacheKey);
      if (Date.now() - cached.timestamp < CONFIG.cacheTimeout) {
        return Promise.resolve(cached.data);
      }
    }

    progressManager.start();
    progressManager.nextStep('Recherche de l\'adresse...');
    
    const addressUrl = 'https://api-adresse.data.gouv.fr/search/?q=' + encodeURIComponent(address) + '&limit=5';
    
    return fetchWithFallback(addressUrl).then(function(locationData) {
      if (!locationData || !locationData.features || !locationData.features.length) {
        throw new Error('Adresse non trouvée. Essayez avec le code postal ou le nom de la ville.');
      }

      const location = locationData.features[0];
      const cityCode = location.properties.citycode;
      
      progressManager.nextStep('Récupération des données qualité...');
      
      const dateLimit = new Date();
      dateLimit.setFullYear(dateLimit.getFullYear() - CONFIG.dateRangeYears);
      const dateLimitStr = dateLimit.toISOString().split('T')[0];

      const waterUrl = 'https://hubeau.eaufrance.fr/api/v1/qualite_eau_potable/resultats_dis?code_commune=' + cityCode + '&date_min_prelevement=' + dateLimitStr + '&size=200&format=json&sort=desc';
      
      return fetchWithFallback(waterUrl).then(function(qualityData) {
        progressManager.nextStep('Calcul du score de qualité...');

        // Simuler le temps de calcul
        return new Promise(function(resolve) {
          setTimeout(function() {
            progressManager.nextStep('Génération du rapport...');
            
            setTimeout(function() {
              const result = {
                location: location,
                qualityData: qualityData,
                timestamp: Date.now()
              };

              cache.set(cacheKey, {
                data: result,
                timestamp: Date.now()
              });

              resolve(result);
            }, 800);
          }, 1000);
        });
      });
    });
  }

  // Génération du HTML des résultats
  function generateResultsHtml(location, qualityResponse) {
    const props = location.properties;
    let html = '';

    // Calculer le score
    const scoreData = calculateWaterScore(qualityResponse);

    // Informations sur l'adresse (garder l'existant)
    html += '<div class="water-result water-result--location">';
    html += '<h3 class="water-result__title">📍 Adresse analysée</h3>';
    html += '<div class="water-result__content">';
    html += '<p><strong>' + utils.sanitizeHtml(props.label) + '</strong></p>';
    html += '<p>🏘️ ' + utils.sanitizeHtml(props.city) + ' (' + (props.postcode || 'N/A') + ')</p>';
    html += '<p>🆔 Code INSEE: ' + props.citycode + '</p>';
    if (props.context) {
      html += '<p>📍 ' + utils.sanitizeHtml(props.context) + '</p>';
    }
    html += '</div></div>';

    if (scoreData) {
      // === NOUVEAU : AFFICHAGE DU SCORE PRINCIPAL ===
      html += '<div class="water-result water-result--score" style="text-align: center; background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%); border-left: 4px solid ' + scoreData.couleur + ';">';
      html += '<h3 class="water-result__title">🎯 Score de Qualité</h3>';
      html += '<div class="water-result__content">';
      
      // Cercle de score
      html += '<div style="display: inline-block; width: 120px; height: 120px; border: 8px solid ' + scoreData.couleur + '; border-radius: 50%; display: flex; flex-direction: column; align-items: center; justify-content: center; margin: 1rem auto;">';
      html += '<div style="font-size: 36px; font-weight: bold; color: ' + scoreData.couleur + ';">' + scoreData.score + '</div>';
      html += '<div style="font-size: 14px; color: #666;">/ 100</div>';
      html += '</div>';
      
      // Badge catégorie
      html += '<div style="background: ' + scoreData.couleur + '; color: white; padding: 10px 20px; border-radius: 25px; font-weight: bold; margin: 1rem auto; display: inline-block;">';
      html += scoreData.emoji + ' ' + scoreData.categorie;
      html += '</div>';
      
      html += '<p style="font-size: 1.1rem; margin: 1rem 0;"><strong>' + scoreData.action + '</strong></p>';
      html += '</div></div>';

      // === NOUVEAU : CARACTÉRISTIQUES DE L'EAU ===
      html += '<div class="water-result water-result--characteristics">';
      html += '<h3 class="water-result__title">💧 Caractéristiques de votre eau</h3>';
      html += '<div class="water-result__content">';
      
      // Dureté
      html += '<div style="background: #f8f9fa; padding: 1rem; margin: 0.5rem 0; border-radius: 8px; border-left: 4px solid ' + scoreData.durete.couleur + ';">';
      html += '<p><strong>Dureté :</strong> <span style="color: ' + scoreData.durete.couleur + '; font-weight: bold;">' + scoreData.durete.niveau + '</span>';
      if (scoreData.durete.valeur > 0) {
        html += ' (' + scoreData.durete.valeur.toFixed(0) + ' µS/cm)';
      }
      html += '</p>';
      html += '<p style="font-size: 0.9rem; color: #666; margin: 0.5rem 0 0 0;">' + scoreData.durete.alerte + '</p>';
      html += '</div>';
      
      // Paramètres détectés
      if (scoreData.parametres.ph > 0) {
        html += '<p>🔬 <strong>pH :</strong> ' + scoreData.parametres.ph.toFixed(1) + '</p>';
      }
      if (scoreData.parametres.turbidite > 0) {
        html += '<p>💎 <strong>Turbidité :</strong> ' + scoreData.parametres.turbidite.toFixed(2) + ' NFU</p>';
      }
      if (scoreData.parametres.chloreLibre > 0) {
        html += '<p>🧪 <strong>Chlore libre :</strong> ' + scoreData.parametres.chloreLibre.toFixed(2) + ' mg/L</p>';
      }
      
      html += '</div></div>';

      // === NOUVEAU : PROBLÈMES DÉTECTÉS ===
      const hasProblems = scoreData.problemes.bacteries || scoreData.problemes.turbidite || scoreData.problemes.chlore || scoreData.problemes.aspect || scoreData.problemes.polluants;
      
      if (hasProblems) {
        html += '<div class="water-result water-result--problems" style="background: #fffbeb; border-left: 4px solid #f59e0b;">';
        html += '<h3 class="water-result__title">⚠️ Points d\'attention détectés</h3>';
        html += '<div class="water-result__content">';
        html += '<ul style="margin: 0; padding-left: 1.5rem;">';
        
        if (scoreData.problemes.bacteries) {
          html += '<li style="color: #dc2626; margin: 0.5rem 0;">Bactéries pathogènes détectées → Risque sanitaire</li>';
        }
        if (scoreData.problemes.turbidite) {
          html += '<li style="color: #dc2626; margin: 0.5rem 0;">Turbidité élevée (' + scoreData.parametres.turbidite.toFixed(1) + ' NFU) → Eau trouble</li>';
        }
        if (scoreData.problemes.chlore) {
          html += '<li style="color: #dc2626; margin: 0.5rem 0;">Chlore résiduel élevé (' + scoreData.parametres.chloreLibre.toFixed(2) + ' mg/L) → Goût/odeur altérés</li>';
        }
        if (scoreData.problemes.aspect) {
          html += '<li style="color: #dc2626; margin: 0.5rem 0;">Aspect anormal détecté → Qualité visuelle altérée</li>';
        }
        if (scoreData.problemes.polluants) {
          html += '<li style="color: #dc2626; margin: 0.5rem 0;">Traces de polluants chimiques → Surveillance recommandée</li>';
        }
        if (scoreData.durete.valeur > 400) {
          html += '<li style="color: #f59e0b; margin: 0.5rem 0;">' + scoreData.durete.niveau + ' → ' + scoreData.durete.alerte + '</li>';
        }
        
        html += '</ul>';
        html += '</div></div>';
      }

      // === NOUVEAU : RECOMMANDATION PRODUIT ===
      html += '<div class="water-result water-result--recommendation" style="background: #f0f9ff; border-left: 4px solid #3b82f6;">';
      html += '<h3 class="water-result__title">💡 Notre recommandation personnalisée</h3>';
      html += '<div class="water-result__content">';
      html += '<div style="background: white; padding: 1.5rem; border-radius: 8px; border: 1px solid #e5e7eb;">';
      html += '<h4 style="margin: 0 0 1rem 0; color: #1f2937;">' + scoreData.recommandation.produit + '</h4>';
      html += '<p style="margin: 0 0 1rem 0;"><strong>Objectif :</strong> ' + scoreData.recommandation.objectif + '</p>';
      
      // Bouton CTA vers la collection
      html += '<a href="/collections/' + scoreData.recommandation.collection + '" style="display: inline-block; background: #3b82f6; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; font-weight: 600; transition: all 0.3s ease;">';
      html += '🛒 Découvrir nos solutions ' + scoreData.recommandation.produit.toLowerCase();
      html += '</a>';
      
      html += '</div>';
      html += '</div></div>';

      // Informations générales sur l'analyse (garder la partie existante)
      if (qualityResponse && qualityResponse.data && qualityResponse.data.length > 0) {
        const analyses = qualityResponse.data;
        const latest = analyses[0];
        const lastDate = utils.formatDate(latest.date_prelevement);

        html += '<div class="water-result water-result--info" style="background: #f8fafc; border-left: 4px solid #64748b;">';
        html += '<h3 class="water-result__title">📊 Informations techniques</h3>';
        html += '<div class="water-result__content">';
        html += '<p><strong>Dernière analyse :</strong> ' + lastDate + '</p>';
        html += '<p><strong>Total analyses :</strong> ' + analyses.length + ' sur ' + CONFIG.dateRangeYears + ' ans</p>';
        if (latest.nom_distributeur) {
          html += '<p><strong>Distributeur :</strong> ' + utils.sanitizeHtml(latest.nom_distributeur) + '</p>';
        }
        html += '</div></div>';
      }

    } else {
      // Cas où il n'y a pas de données (garder l'existant)
      html += '<div class="water-result water-result--warning">';
      html += '<h4 class="water-result__title">⚠️ Aucune analyse récente disponible</h4>';
      html += '<div class="water-result__content">';
      html += '<p>Aucune donnée d\'analyse trouvée pour <strong>' + utils.sanitizeHtml(props.city) + '</strong> sur les ' + CONFIG.dateRangeYears + ' dernières années.</p>';
      html += '<p>Cette commune peut être desservie par un réseau intercommunal ou les données peuvent ne pas être encore disponibles dans la base nationale.</p>';
      html += '<p>💡 Contactez votre mairie ou votre distributeur d\'eau pour plus d\'informations.</p>';
      html += '</div></div>';
    }

    // Information email (garder l'existant)
    if (userEmail) {
      html += '<div class="water-result water-result--email" style="background: #f0fdf4; border-left: 4px solid #10b981;">';
      html += '<h4 class="water-result__title">📧 Rapport envoyé</h4>';
      html += '<div class="water-result__content">';
      html += '<p>Un rapport détaillé a été envoyé à <strong>' + utils.sanitizeHtml(userEmail) + '</strong></p>';
      html += '<p>Vérifiez votre boîte de réception (et vos spams) dans les prochaines minutes.</p>';
      html += '</div></div>';
    }

    return html;
  }

  // Affichage d'erreur
  function showError(message) {
    const html = '<div class="water-result water-result--error">' +
      '<h4 class="water-result__title">❌ Erreur</h4>' +
      '<div class="water-result__content">' +
      '<p>' + utils.sanitizeHtml(message) + '</p>' +
      '<p>💡 <strong>Suggestions :</strong></p>' +
      '<p>• Essayez avec un code postal (ex: 01000)</p>' +
      '<p>• Vérifiez l\'orthographe de votre adresse</p>' +
      '<p>• Vérifiez votre connexion internet</p>' +
      '</div></div>';
    ui.showResults(html);
  }

  // Gestionnaire d'analyse
  function handleAnalysis() {
    const input = document.querySelector(selectors.analysisInput);
    const address = input ? input.value.trim() : '';
    
    if (!address) {
      showError('Veuillez saisir une adresse');
      return;
    }

    ui.toggleButton(true, 'Analyse...');

    analyzeWater(address).then(function(result) {
      progressManager.complete();
      
      setTimeout(function() {
        const html = generateResultsHtml(result.location, result.qualityData);
        ui.showResults(html);
      }, 1200);
    }).catch(function(error) {
      progressManager.error(null, '✕ ' + error.message);
      
      setTimeout(function() {
        progressManager.hide();
        showError(error.message);
      }, 2000);
    }).finally(function() {
      ui.toggleButton(false, 'Analyser');
    });
  }

  // Gestionnaire des exemples
  function setExample(address) {
    const input = document.querySelector('#contact_address');
    if (input) {
      input.value = address;
      input.focus();
    }
  }

  // Initialisation
  function init() {
    console.log('🌊 Water Analyzer (Simplified) initialized');

    // Gestionnaire du formulaire de contact
    const contactForm = document.querySelector(selectors.contactForm);
    if (contactForm) {
      contactForm.addEventListener('submit', function(e) {
        const addressInput = contactForm.querySelector('[name="contact[address]"]');
        const emailInput = contactForm.querySelector('[name="contact[email]"]');
        const consentInput = contactForm.querySelector('[name="contact[consent]"]');

        if (!addressInput?.value || !emailInput?.value) {
          e.preventDefault();
          alert('Veuillez remplir tous les champs obligatoires');
          return;
        }

        if (consentInput && !consentInput.checked) {
          e.preventDefault();
          alert('Veuillez accepter l\'utilisation de vos données');
          return;
        }

        // Simuler la soumission réussie (en réalité Shopify gère ça)
        e.preventDefault();
        const address = addressInput.value;
        const email = emailInput.value;
        ui.showThankYou(address, email);
      });
    }

    // Gestionnaire du bouton "continuer"
    const continueBtn = document.querySelector(selectors.continueBtn);
    if (continueBtn) {
      continueBtn.addEventListener('click', function() {
        ui.showAnalysisSection();
        
        setTimeout(function() {
          const analysisSection = document.querySelector(selectors.analysisSection);
          if (analysisSection) {
            analysisSection.scrollIntoView({ behavior: 'smooth' });
          }
        }, 100);
      });
    }

    // Gestionnaire du bouton d'analyse
    const analysisButton = document.querySelector(selectors.analysisButton);
    if (analysisButton) {
      analysisButton.addEventListener('click', handleAnalysis);
    }

    // Gestionnaire Enter sur l'input d'analyse
    const analysisInput = document.querySelector(selectors.analysisInput);
    if (analysisInput) {
      analysisInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
          e.preventDefault();
          handleAnalysis();
        }
      });
    }

    // Gestionnaires des exemples
    const examples = document.querySelectorAll(selectors.examples);
    examples.forEach(function(example) {
      example.addEventListener('click', function() {
        const address = this.dataset.example;
        setExample(address);
        
        this.style.transform = 'scale(0.95)';
        setTimeout(() => {
          this.style.transform = '';
        }, 150);
      });
    });

    // Gestionnaires de la carte
    if (CONFIG.enableMap) {
      const mapToggle = document.querySelector(selectors.mapToggle);
      const mapClose = document.querySelector(selectors.mapClose);
      const mapConfirm = document.querySelector(selectors.mapConfirm);

      if (mapToggle) {
        mapToggle.addEventListener('click', function() {
          mapManager.show();
          if (!map) {
            mapManager.init();
          }
        });
      }

      if (mapClose) {
        mapClose.addEventListener('click', mapManager.hide);
      }

      if (mapConfirm) {
        mapConfirm.addEventListener('click', mapManager.confirmAddress);
      }
    }
  }

  // Démarrage
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }

})();
</script>

{% schema %}
{
  "name": "Analyseur Eau",
  "settings": [
    {
      "type": "header",
      "content": "📝 Contenu et textes"
    },
    {
      "type": "text",
      "id": "title",
      "label": "Titre principal",
      "default": "Analyseur Qualité Eau Potable",
      "info": "Le titre affiché en haut de la section"
    },
    {
      "type": "text",
      "id": "subtitle",
      "label": "Sous-titre",
      "default": "Découvrez la qualité de l'eau à votre adresse",
      "info": "Description affichée sous le titre"
    },
    {
      "type": "text",
      "id": "search_title",
      "label": "Titre de la section recherche",
      "default": "Analysez votre eau",
      "info": "Titre de la zone de recherche"
    },
    {
      "type": "textarea",
      "id": "search_description",
      "label": "Description de la recherche",
      "default": "Saisissez votre adresse pour obtenir un rapport de qualité détaillé",
      "info": "Texte explicatif pour la recherche"
    },
    {
      "type": "text",
      "id": "placeholder",
      "label": "Placeholder du champ adresse",
      "default": "01000 Bourg-en-Bresse",
      "info": "Texte d'exemple dans le champ de saisie"
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "Texte du bouton",
      "default": "Demander l'analyse",
      "info": "Texte affiché sur le bouton de soumission"
    },
    {
      "type": "header",
      "content": "🎨 Couleurs - En-tête"
    },
    {
      "type": "color",
      "id": "header_background",
      "label": "Arrière-plan en-tête",
      "default": "#4facfe",
      "info": "Couleur de fond de l'en-tête"
    },
    {
      "type": "color",
      "id": "header_text_color",
      "label": "Texte en-tête",
      "default": "#ffffff",
      "info": "Couleur du titre et sous-titre"
    },
    {
      "type": "header",
      "content": "🎨 Couleurs - Contenu principal"
    },
    {
      "type": "color",
      "id": "content_background",
      "label": "Arrière-plan contenu",
      "default": "#ffffff",
      "info": "Couleur de fond du contenu principal"
    },
    {
      "type": "color",
      "id": "content_text_color",
      "label": "Texte contenu",
      "default": "#333333",
      "info": "Couleur du texte principal"
    },
    {
      "type": "header",
      "content": "🎨 Couleurs - Zone de recherche"
    },
    {
      "type": "color",
      "id": "search_background",
      "label": "Arrière-plan recherche",
      "default": "#f093fb",
      "info": "Couleur de fond de la zone de recherche"
    },
    {
      "type": "color",
      "id": "search_text_color",
      "label": "Texte recherche",
      "default": "#ffffff",
      "info": "Couleur du texte dans la zone de recherche"
    },
    {
      "type": "header",
      "content": "🎨 Couleurs - Boutons"
    },
    {
      "type": "color",
      "id": "button_background",
      "label": "Arrière-plan bouton",
      "default": "#ff6b6b",
      "info": "Couleur de fond des boutons principaux"
    },
    {
      "type": "color",
      "id": "button_text_color",
      "label": "Texte bouton",
      "default": "#ffffff",
      "info": "Couleur du texte des boutons"
    },
    {
      "type": "header",
      "content": "🎨 Couleurs - Système"
    },
    {
      "type": "color",
      "id": "accent_color",
      "label": "Couleur d'accent",
      "default": "#667eea",
      "info": "Couleur pour les éléments d'interface (cartes, progress)"
    },
    {
      "type": "color",
      "id": "success_color",
      "label": "Couleur de succès",
      "default": "#28a745",
      "info": "Couleur pour les messages de succès"
    },
    {
      "type": "color",
      "id": "warning_color",
      "label": "Couleur d'avertissement",
      "default": "#ffc107",
      "info": "Couleur pour les avertissements"
    },
    {
      "type": "color",
      "id": "error_color",
      "label": "Couleur d'erreur",
      "default": "#dc3545",
      "info": "Couleur pour les messages d'erreur"
    },
    {
      "type": "header",
      "content": "📐 Mise en forme"
    },
    {
      "type": "range",
      "id": "border_radius",
      "label": "Arrondi des bords",
      "min": 0,
      "max": 50,
      "step": 5,
      "default": 20,
      "unit": "px",
      "info": "Arrondi des coins de la section"
    },
    {
      "type": "range",
      "id": "section_padding",
      "label": "Espacement interne",
      "min": 1,
      "max": 5,
      "step": 1,
      "default": 2,
      "unit": "rem",
      "info": "Espacement interne de la section"
    },
    {
      "type": "header",
      "content": "⚙️ Fonctionnalités"
    },
    {
      "type": "checkbox",
      "id": "collect_name",
      "label": "Collecter le nom",
      "default": true,
      "info": "Ajouter un champ nom au formulaire"
    },
    {
      "type": "checkbox",
      "id": "show_examples",
      "label": "Afficher les exemples",
      "default": true,
      "info": "Affiche les boutons d'exemples d'adresses"
    },
    {
      "type": "text",
      "id": "examples",
      "label": "Exemples d'adresses",
      "default": "01000,Gex,Bourg-en-Bresse",
      "info": "Liste d'exemples séparés par des virgules"
    },
    {
      "type": "checkbox",
      "id": "enable_map",
      "label": "Activer la carte interactive",
      "default": true,
      "info": "Permet de sélectionner une adresse sur une carte"
    },
    {
      "type": "header",
      "content": "🎭 Icônes et emojis"
    },
    {
      "type": "text",
      "id": "header_icon",
      "label": "Icône du header",
      "default": "🌊",
      "info": "Emoji affiché dans le titre principal"
    },
    {
      "type": "text",
      "id": "search_icon",
      "label": "Icône de recherche",
      "default": "🏠",
      "info": "Emoji affiché dans le titre de recherche"
    },
    {
      "type": "text",
      "id": "button_icon",
      "label": "Icône du bouton",
      "default": "🔍",
      "info": "Emoji affiché dans le bouton"
    },
    {
      "type": "header",
      "content": "🔧 Configuration technique"
    },
    {
      "type": "text",
      "id": "contact_tags",
      "label": "Tags de contact",
      "default": "lead,water-analysis",
      "info": "Tags ajoutés aux contacts (séparés par des virgules)"
    }
  ],
  "presets": [
    {
      "name": "Analyseur Eau"
    }
  ]
}
{% endschema %}