<!-- Analyseur Eau Potable - Version Optimis√©e -->
<div class="water-analyzer" 
     data-section-id="{{ section.id }}" 
     data-debug="{{ section.settings.debug_mode | default: false }}"
     data-enable-map="{{ section.settings.enable_map | default: false }}"
     style="
       --wa-primary: {{ section.settings.primary_color | default: '#2563eb' }};
       --wa-secondary: {{ section.settings.secondary_color | default: '#1e40af' }};
       --wa-accent: {{ section.settings.accent_color | default: '#3b82f6' }};
       --wa-success: {{ section.settings.success_color | default: '#10b981' }};
       --wa-warning: {{ section.settings.warning_color | default: '#f59e0b' }};
       --wa-error: {{ section.settings.error_color | default: '#ef4444' }};
       --wa-text-primary: {{ section.settings.text_primary_color | default: '#1f2937' }};
       --wa-text-secondary: {{ section.settings.text_secondary_color | default: '#6b7280' }};
       --wa-background: {{ section.settings.background_color | default: '#ffffff' }};
       --wa-surface: {{ section.settings.surface_color | default: '#f9fafb' }};
       --wa-border: {{ section.settings.border_color | default: '#e5e7eb' }};
       --wa-shadow: {{ section.settings.shadow_color | default: 'rgba(0, 0, 0, 0.1)' }};
       --wa-header-bg: {{ section.settings.header_background_color | default: '#1e40af' }};
       --wa-header-text: {{ section.settings.header_text_color | default: '#ffffff' }};
       --wa-radius: {{ section.settings.border_radius | default: 16 }}px;
       --wa-spacing: {{ section.settings.section_padding | default: 1.5 }}rem;
     ">

  <!-- Header (conditionnel) -->
  {% if section.settings.show_header %}
  <header class="wa-header">
    {% if section.settings.show_header_icon %}
      <div class="wa-header__icon">{{ section.settings.header_icon | default: 'üåä' }}</div>
    {% endif %}
    <div class="wa-header__content">
      <h2 class="wa-header__title">{{ section.settings.title | default: 'Analyseur Qualit√© Eau' }}</h2>
      {% if section.settings.show_subtitle %}
        <p class="wa-header__subtitle">{{ section.settings.subtitle | default: 'D√©couvrez la qualit√© de l\'eau √† votre adresse' }}</p>
      {% endif %}
    </div>
  </header>
  {% endif %}

  <!-- Contenu principal -->
  <main class="wa-main">
    
    <!-- √âtape 1: Email -->
    <section class="wa-step wa-step--email" data-step="email">
      <div class="wa-step__header">
        <h3 class="wa-step__title">
          {% if section.settings.show_icons %}<span class="wa-icon">üìß</span>{% endif %}
          {{ section.settings.email_title | default: 'Votre adresse email' }}
        </h3>
        <p class="wa-step__description">{{ section.settings.email_description | default: 'Recevez votre rapport de qualit√© par email' }}</p>
      </div>

      <form class="wa-form" data-email-form novalidate>
        <div class="wa-input-group">
          <div class="wa-field">
            <input 
              type="email" 
              id="wa-email-{{ section.id }}" 
              class="wa-input"
              placeholder="{{ section.settings.email_placeholder | default: 'votre@email.com' }}"
              required
              autocomplete="email"
              aria-describedby="wa-email-error-{{ section.id }}"
            >
            <div class="wa-field__error" id="wa-email-error-{{ section.id }}" role="alert"></div>
          </div>
          <button type="submit" class="wa-button wa-button--primary" data-email-submit>
            {% if section.settings.show_icons %}<span class="wa-icon">‚úâÔ∏è</span>{% endif %}
            <span>{{ section.settings.email_button_text | default: 'Continuer' }}</span>
          </button>
        </div>

        {% if section.settings.show_privacy_notice %}
        <div class="wa-privacy">
          <small>{{ section.settings.privacy_notice | default: 'üîí Vos donn√©es sont prot√©g√©es et ne seront pas partag√©es' }}</small>
        </div>
        {% endif %}
      </form>
    </section>

    <!-- √âtape 2: Adresse -->
    <section class="wa-step wa-step--address" data-step="address" style="display: none;">
      <div class="wa-step__header">
        <h3 class="wa-step__title">
          {% if section.settings.show_icons %}<span class="wa-icon">üè†</span>{% endif %}
          {{ section.settings.search_title | default: 'Votre adresse' }}
        </h3>
        <p class="wa-step__description">{{ section.settings.search_description | default: 'Saisissez votre adresse pour analyser la qualit√© de l\'eau' }}</p>
      </div>

      <!-- Carte interactive (optionnelle) -->
      {% if section.settings.enable_map %}
      <div class="wa-map-section">
        <button type="button" class="wa-button wa-button--secondary" data-map-toggle>
          <span class="wa-icon">üó∫Ô∏è</span>
          <span>Utiliser la carte</span>
        </button>
        
        <div class="wa-map-container" data-map-container style="display: none;">
          <div class="wa-map-header">
            <h4>S√©lectionnez votre adresse sur la carte</h4>
            <button type="button" class="wa-map-close" data-map-close aria-label="Fermer la carte">√ó</button>
          </div>
          <div id="wa-map-{{ section.id }}" class="wa-map" data-map></div>
          <div class="wa-map-info" data-map-info style="display: none;">
            <p><strong>Adresse s√©lectionn√©e:</strong> <span data-selected-address></span></p>
            <button type="button" class="wa-button wa-button--primary" data-map-confirm>Analyser cette adresse</button>
          </div>
        </div>
      </div>
      {% endif %}

      <form class="wa-form" data-address-form novalidate>
        <div class="wa-input-group">
          <div class="wa-field">
            <input 
              type="text" 
              id="wa-address-{{ section.id }}" 
              class="wa-input"
              placeholder="{{ section.settings.address_placeholder | default: '01000 Bourg-en-Bresse' }}"
              required
              autocomplete="address-line1"
              aria-describedby="wa-address-error-{{ section.id }}"
            >
            <div class="wa-field__error" id="wa-address-error-{{ section.id }}" role="alert"></div>
          </div>
          <button type="submit" class="wa-button wa-button--primary" data-address-submit>
            {% if section.settings.show_icons %}<span class="wa-icon">üîç</span>{% endif %}
            <span>{{ section.settings.button_text | default: 'Analyser' }}</span>
          </button>
        </div>

        {% if section.settings.show_examples %}
        <div class="wa-examples">
          <span class="wa-examples__label">üí° Exemples :</span>
          {% assign examples = section.settings.examples | default: '01000,75001,69001' | split: ',' %}
          {% for example in examples %}
            <button type="button" class="wa-example" data-example="{{ example | strip }}">{{ example | strip }}</button>
          {% endfor %}
        </div>
        {% endif %}
      </form>
    </section>

    <!-- Loading avec animation -->
    <section class="wa-loading" data-loading style="display: none;">
      <div class="wa-loading__animation" data-animation="{{ section.settings.loading_animation | default: 'glass' }}">
        <!-- Animation sera inject√©e par JS -->
      </div>
      <div class="wa-loading__content">
        <h4 class="wa-loading__title">Analyse en cours...</h4>
        <div class="wa-progress">
          <div class="wa-progress__bar" data-progress-bar></div>
          <div class="wa-progress__text" data-progress-text>0%</div>
        </div>
        <p class="wa-loading__message" data-loading-message">Initialisation...</p>
      </div>
    </section>

    <!-- R√©sultats -->
    <section class="wa-results" data-results style="display: none;" role="region" aria-live="polite">
      <!-- Contenu g√©n√©r√© par JS -->
    </section>

    <!-- Debug (d√©veloppement) -->
    {% if section.settings.debug_mode %}
    <div class="wa-debug" data-debug style="display: none;">
      <strong>Debug:</strong> <span data-debug-text>En attente...</span>
    </div>
    {% endif %}
  </main>
</div>

<!-- Styles CSS optimis√©s -->
<style>
  /* Variables CSS et reset */
  .water-analyzer {
    --wa-font-family: system-ui, -apple-system, 'Segoe UI', Roboto, sans-serif;
    --wa-transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    --wa-shadow-sm: 0 1px 2px 0 var(--wa-shadow);
    --wa-shadow-md: 0 4px 6px -1px var(--wa-shadow);
    --wa-shadow-lg: 0 10px 15px -3px var(--wa-shadow);
    
    font-family: var(--wa-font-family);
    background: var(--wa-background);
    border: 1px solid var(--wa-border);
    border-radius: var(--wa-radius);
    box-shadow: var(--wa-shadow-lg);
    color: var(--wa-text-primary);
    margin: var(--wa-spacing) 0;
    overflow: hidden;
    position: relative;
  }

  /* Header */
  .wa-header {
    background: var(--wa-header-bg);
    color: var(--wa-header-text);
    padding: calc(var(--wa-spacing) * 1.5) var(--wa-spacing);
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .wa-header__icon {
    font-size: 2rem;
    flex-shrink: 0;
  }

  .wa-header__title {
    font-size: clamp(1.25rem, 3vw, 1.75rem);
    font-weight: 700;
    margin: 0 0 0.25rem 0;
    line-height: 1.2;
  }

  .wa-header__subtitle {
    font-size: 0.95rem;
    margin: 0;
    opacity: 0.9;
  }

  /* Main content */
  .wa-main {
    padding: var(--wa-spacing);
  }

  /* Steps */
  .wa-step {
    margin-bottom: calc(var(--wa-spacing) * 1.5);
  }

  .wa-step__header {
    margin-bottom: 1.5rem;
    text-align: center;
  }

  .wa-step__title {
    font-size: 1.25rem;
    font-weight: 600;
    margin: 0 0 0.5rem 0;
    color: var(--wa-text-primary);
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  .wa-step__description {
    color: var(--wa-text-secondary);
    margin: 0;
    font-size: 0.95rem;
  }

  /* Forms */
  .wa-form {
    max-width: 100%;
  }

  .wa-input-group {
    display: flex;
    gap: 0.75rem;
    margin-bottom: 1rem;
    flex-wrap: wrap;
  }

  .wa-field {
    flex: 1;
    min-width: 250px;
  }

  .wa-input {
    width: 100%;
    padding: 0.875rem 1rem;
    border: 2px solid var(--wa-border);
    border-radius: calc(var(--wa-radius) * 0.5);
    font-size: 1rem;
    background: var(--wa-background);
    color: var(--wa-text-primary);
    transition: var(--wa-transition);
    outline: none;
  }

  .wa-input:focus {
    border-color: var(--wa-primary);
    box-shadow: 0 0 0 3px color-mix(in srgb, var(--wa-primary) 20%, transparent);
  }

  .wa-input:invalid:not(:placeholder-shown) {
    border-color: var(--wa-error);
  }

  .wa-field__error {
    color: var(--wa-error);
    font-size: 0.875rem;
    margin-top: 0.25rem;
    min-height: 1.25rem;
  }

  /* Buttons */
  .wa-button {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.875rem 1.5rem;
    border: none;
    border-radius: calc(var(--wa-radius) * 0.5);
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: var(--wa-transition);
    text-decoration: none;
    white-space: nowrap;
    outline: none;
  }

  .wa-button:focus-visible {
    box-shadow: 0 0 0 3px color-mix(in srgb, var(--wa-primary) 30%, transparent);
  }

  .wa-button--primary {
    background: var(--wa-primary);
    color: white;
  }

  .wa-button--primary:hover:not(:disabled) {
    background: var(--wa-secondary);
    transform: translateY(-1px);
    box-shadow: var(--wa-shadow-md);
  }

  .wa-button--secondary {
    background: var(--wa-surface);
    color: var(--wa-text-primary);
    border: 1px solid var(--wa-border);
  }

  .wa-button--secondary:hover:not(:disabled) {
    background: var(--wa-border);
  }

  .wa-button:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none !important;
  }

  /* Examples */
  .wa-examples {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: 0.5rem;
    margin-top: 1rem;
    justify-content: center;
  }

  .wa-examples__label {
    font-weight: 600;
    color: var(--wa-text-secondary);
    font-size: 0.875rem;
  }

  .wa-example {
    background: var(--wa-surface);
    color: var(--wa-text-secondary);
    border: 1px solid var(--wa-border);
    padding: 0.375rem 0.75rem;
    border-radius: calc(var(--wa-radius) * 0.25);
    font-size: 0.875rem;
    cursor: pointer;
    transition: var(--wa-transition);
  }

  .wa-example:hover {
    background: var(--wa-accent);
    color: white;
    transform: translateY(-1px);
  }

  /* Privacy notice */
  .wa-privacy {
    text-align: center;
    margin-top: 1rem;
    color: var(--wa-text-secondary);
  }

  /* Map */
  .wa-map-section {
    margin-bottom: 1.5rem;
    text-align: center;
  }

  .wa-map-container {
    margin-top: 1rem;
    border: 1px solid var(--wa-border);
    border-radius: var(--wa-radius);
    overflow: hidden;
    background: var(--wa-background);
  }

  .wa-map-header {
    background: var(--wa-surface);
    padding: 1rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: 1px solid var(--wa-border);
  }

  .wa-map-header h4 {
    margin: 0;
    font-size: 1rem;
    color: var(--wa-text-primary);
  }

  .wa-map-close {
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    color: var(--wa-text-secondary);
    width: 32px;
    height: 32px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: var(--wa-transition);
  }

  .wa-map-close:hover {
    background: var(--wa-border);
    color: var(--wa-text-primary);
  }

  .wa-map {
    height: 350px;
    width: 100%;
    background: var(--wa-surface);
  }

  .wa-map-info {
    padding: 1rem;
    background: var(--wa-surface);
    border-top: 1px solid var(--wa-border);
    text-align: center;
  }

  .wa-map-info p {
    margin: 0 0 1rem 0;
    color: var(--wa-text-primary);
  }

  /* Loading animations */
  .wa-loading {
    text-align: center;
    padding: 3rem 1rem;
  }

  .wa-loading__animation {
    margin-bottom: 2rem;
    height: 80px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .wa-loading__title {
    font-size: 1.25rem;
    font-weight: 600;
    margin: 0 0 1rem 0;
    color: var(--wa-text-primary);
  }

  .wa-loading__message {
    color: var(--wa-text-secondary);
    margin: 0.5rem 0 0 0;
    font-size: 0.95rem;
  }

  /* Progress bar */
  .wa-progress {
    background: var(--wa-surface);
    border-radius: 50px;
    height: 8px;
    margin: 1rem 0;
    overflow: hidden;
    position: relative;
    border: 1px solid var(--wa-border);
  }

  .wa-progress__bar {
    background: linear-gradient(90deg, var(--wa-primary), var(--wa-accent));
    height: 100%;
    width: 0%;
    transition: width 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .wa-progress__bar::after {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
    animation: wa-shimmer 2s infinite;
  }

  .wa-progress__text {
    font-size: 0.875rem;
    font-weight: 600;
    color: var(--wa-text-primary);
    margin-top: 0.5rem;
  }

  /* Animations sp√©cifiques */
  .wa-animation--glass {
    width: 60px;
    height: 80px;
    border: 3px solid var(--wa-primary);
    border-radius: 0 0 30px 30px;
    position: relative;
    background: linear-gradient(to top, var(--wa-accent) 0%, transparent 100%);
    animation: wa-fill 3s ease-in-out infinite;
  }

  .wa-animation--glass::before {
    content: '';
    position: absolute;
    top: -5px;
    left: 50%;
    transform: translateX(-50%);
    width: 20px;
    height: 8px;
    background: var(--wa-primary);
    border-radius: 4px;
  }

  .wa-animation--wave {
    width: 80px;
    height: 20px;
    background: var(--wa-primary);
    border-radius: 10px;
    animation: wa-wave 2s ease-in-out infinite;
  }

  .wa-animation--dots {
    display: flex;
    gap: 8px;
  }

  .wa-animation--dots::before,
  .wa-animation--dots::after {
    content: '';
    width: 12px;
    height: 12px;
    background: var(--wa-primary);
    border-radius: 50%;
    animation: wa-bounce 1.4s ease-in-out infinite both;
  }

  .wa-animation--dots::before {
    animation-delay: -0.32s;
  }

  .wa-animation--dots::after {
    animation-delay: -0.16s;
  }

  /* Results */
  .wa-results {
    animation: wa-fade-in 0.5s ease-out;
  }

  .wa-result {
    background: var(--wa-surface);
    border: 1px solid var(--wa-border);
    border-radius: var(--wa-radius);
    padding: 1.5rem;
    margin: 1rem 0;
    border-left: 4px solid var(--wa-primary);
  }

  .wa-result--success {
    border-left-color: var(--wa-success);
    background: color-mix(in srgb, var(--wa-success) 5%, var(--wa-surface));
  }

  .wa-result--warning {
    border-left-color: var(--wa-warning);
    background: color-mix(in srgb, var(--wa-warning) 5%, var(--wa-surface));
  }

  .wa-result--error {
    border-left-color: var(--wa-error);
    background: color-mix(in srgb, var(--wa-error) 5%, var(--wa-surface));
  }

  .wa-result__title {
    font-size: 1.125rem;
    font-weight: 600;
    margin: 0 0 1rem 0;
    color: var(--wa-text-primary);
  }

  .wa-result__content p {
    margin: 0.5rem 0;
    line-height: 1.6;
  }

  .wa-result__content p:first-child {
    margin-top: 0;
  }

  .wa-result__content p:last-child {
    margin-bottom: 0;
  }

  /* Debug */
  .wa-debug {
    background: color-mix(in srgb, var(--wa-primary) 10%, var(--wa-surface));
    border: 1px solid var(--wa-primary);
    border-radius: calc(var(--wa-radius) * 0.5);
    padding: 1rem;
    margin-top: 1rem;
    font-family: 'Courier New', monospace;
    font-size: 0.875rem;
    color: var(--wa-text-primary);
  }

  /* Animations */
  @keyframes wa-shimmer {
    0% { left: -100%; }
    100% { left: 100%; }
  }

  @keyframes wa-fill {
    0%, 100% { background-size: 100% 20%; }
    50% { background-size: 100% 80%; }
  }

  @keyframes wa-wave {
    0%, 100% { transform: scaleX(1); }
    50% { transform: scaleX(1.2); }
  }

  @keyframes wa-bounce {
    0%, 80%, 100% { transform: scale(0); }
    40% { transform: scale(1); }
  }

  @keyframes wa-fade-in {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
  }

  /* Responsive */
  @media (max-width: 768px) {
    .wa-header {
      flex-direction: column;
      text-align: center;
      gap: 0.5rem;
    }

    .wa-input-group {
      flex-direction: column;
    }

    .wa-field {
      min-width: auto;
    }

    .wa-examples {
      justify-content: center;
    }

    .wa-map {
      height: 250px;
    }
  }

  @media (max-width: 480px) {
    .wa-main {
      padding: calc(var(--wa-spacing) * 0.75);
    }

    .wa-examples {
      flex-direction: column;
      align-items: center;
    }
  }

  /* Accessibilit√© */
  @media (prefers-reduced-motion: reduce) {
    .wa-button:hover {
      transform: none;
    }
    
    .wa-example:hover {
      transform: none;
    }
    
    * {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
    }
  }

  @media (prefers-contrast: high) {
    .water-analyzer {
      border-width: 2px;
    }
    
    .wa-button {
      border: 2px solid currentColor;
    }
  }
</style>

<!-- Leaflet CSS pour la carte -->
{% if section.settings.enable_map %}
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" 
      integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" 
      crossorigin="" />
{% endif %}

<script>
(function() {
  'use strict';
  
  // Configuration optimis√©e
  const CONFIG = {
    sectionId: '{{ section.id }}',
    debug: {{ section.settings.debug_mode | default: false }},
    enableMap: {{ section.settings.enable_map | default: false }},
    animation: '{{ section.settings.loading_animation | default: "glass" }}',
    corsRetries: 3,
    requestTimeout: 8000,
    cacheExpiry: 300000, // 5 minutes
    dateRangeYears: 2
  };

  // M√©thodes CORS optimis√©es
  const CORS_PROXIES = [
    { name: 'AllOrigins', url: 'https://api.allorigins.win/get?url=', parse: d => JSON.parse(d.contents) },
    { name: 'ProxyAnywhereHeroku', url: 'https://cors-anywhere.herokuapp.com/', parse: d => d },
    { name: 'ThingProxy', url: 'https://thingproxy.freeboard.io/fetch/', parse: d => d },
    { name: 'Direct', url: '', parse: d => d }
  ];

  // Cache et √©tat global
  const state = {
    cache: new Map(),
    currentStep: 'email',
    userEmail: '',
    selectedAddress: '',
    map: null,
    marker: null,
    isLoading: false
  };

  // S√©lecteurs DOM optimis√©s
  const $ = selector => document.querySelector(`[data-section-id="${CONFIG.sectionId}"] ${selector}`);
  const $$ = selector => document.querySelectorAll(`[data-section-id="${CONFIG.sectionId}"] ${selector}`);

  // Utilitaires
  const utils = {
    debounce(fn, delay) {
      let timeoutId;
      return (...args) => {
        clearTimeout(timeoutId);
        timeoutId = setTimeout(() => fn.apply(this, args), delay);
      };
    },

    sanitize(str) {
      const div = document.createElement('div');
      div.textContent = str;
      return div.innerHTML;
    },

    validateEmail(email) {
      return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
    },

    formatDate(dateStr) {
      return new Date(dateStr).toLocaleDateString('fr-FR', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
    },

    getCacheKey(address) {
      return `water_${address.toLowerCase().replace(/\s+/g, '_')}`;
    }
  };

  // Gestion des erreurs et debug
  const logger = {
    debug(message, data = null) {
      const timestamp = new Date().toLocaleTimeString('fr-FR');
      console.log(`[${timestamp}] üåä Water Analyzer:`, message, data || '');
      
      if (CONFIG.debug) {
        const debugEl = $('[data-debug]');
        const debugText = $('[data-debug-text]');
        if (debugEl && debugText) {
          debugEl.style.display = 'block';
          debugText.textContent = `${timestamp} - ${message}`;
        }
      }
    },

    error(message, error = null) {
      console.error('üåä Water Analyzer Error:', message, error);
      this.debug(`ERROR: ${message}`, error);
    }
  };

  // Gestion des animations de chargement
  const animations = {
    glass: () => '<div class="wa-animation--glass"></div>',
    
    progress: () => '<div class="wa-animation--progress"><div></div></div>',
    
    wave: () => '<div class="wa-animation--wave"></div>',
    
    dots: () => '<div class="wa-animation--dots"></div>'
  };

  // Gestion de l'interface utilisateur
  const ui = {
    showStep(stepName) {
      $$('[data-step]').forEach(step => {
        step.style.display = step.dataset.step === stepName ? 'block' : 'none';
      });
      state.currentStep = stepName;
      logger.debug(`Affichage √©tape: ${stepName}`);
    },

    showError(fieldId, message) {
      const errorEl = $(`#${fieldId}`);
      if (errorEl) {
        errorEl.textContent = message;
        errorEl.parentElement.querySelector('.wa-input').classList.add('wa-input--error');
      }
    },

    clearError(fieldId) {
      const errorEl = $(`#${fieldId}`);
      if (errorEl) {
        errorEl.textContent = '';
        errorEl.parentElement.querySelector('.wa-input').classList.remove('wa-input--error');
      }
    },

    showLoading(show = true) {
      const loadingEl = $('[data-loading]');
      const resultsEl = $('[data-results]');
      
      if (loadingEl) {
        loadingEl.style.display = show ? 'block' : 'none';
        
        if (show) {
          // Injecter l'animation
          const animationEl = $('[data-loading] .wa-loading__animation');
          if (animationEl && animations[CONFIG.animation]) {
            animationEl.innerHTML = animations[CONFIG.animation]();
          }
          
          // D√©marrer la progression
          this.updateProgress(0, 'Initialisation...');
        }
      }
      
      if (resultsEl && show) {
        resultsEl.style.display = 'none';
      }
      
      state.isLoading = show;
    },

    updateProgress(percent, message) {
      const progressBar = $('[data-progress-bar]');
      const progressText = $('[data-progress-text]');
      const messageEl = $('[data-loading-message]');
      
      if (progressBar) progressBar.style.width = `${percent}%`;
      if (progressText) progressText.textContent = `${Math.round(percent)}%`;
      if (messageEl) messageEl.textContent = message;
    },

    showResults(html) {
      const resultsEl = $('[data-results]');
      if (resultsEl) {
        resultsEl.innerHTML = html;
        resultsEl.style.display = 'block';
        
        // Scroll fluide
        setTimeout(() => {
          resultsEl.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }, 100);
      }
    },

    toggleButton(selector, disabled, text) {
      const btn = $(selector);
      if (btn) {
        btn.disabled = disabled;
        const textEl = btn.querySelector('span:last-child');
        if (textEl && text) textEl.textContent = text;
      }
    }
  };

  // Gestion de la carte
  const mapManager = {
    async init() {
      if (!CONFIG.enableMap) return;
      
      logger.debug('Initialisation de la carte');
      
      try {
        // Charger Leaflet si n√©cessaire
        if (typeof L === 'undefined') {
          await this.loadLeaflet();
        }
        
        this.setupMap();
      } catch (error) {
        logger.error('Erreur initialisation carte', error);
      }
    },

    loadLeaflet() {
      return new Promise((resolve, reject) => {
        const script = document.createElement('script');
        script.src = 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.js';
        script.integrity = 'sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=';
        script.crossOrigin = '';
        script.onload = resolve;
        script.onerror = reject;
        document.head.appendChild(script);
      });
    },

    setupMap() {
      const mapEl = $('[data-map]');
      if (!mapEl) return;

      // Initialiser la carte
      state.map = L.map(mapEl.id).setView([46.603354, 1.888334], 6);
      
      // Ajouter les tuiles
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '¬© OpenStreetMap contributors',
        maxZoom: 19
      }).addTo(state.map);

      // Gestionnaire de clic
      state.map.on('click', this.onMapClick.bind(this));
      
      logger.debug('Carte initialis√©e');
    },

    async onMapClick(e) {
      const { lat, lng } = e.latlng;
      logger.debug(`Clic carte: ${lat}, ${lng}`);
      
      // Supprimer marqueur pr√©c√©dent
      if (state.marker) {
        state.map.removeLayer(state.marker);
      }
      
      // Nouveau marqueur
      state.marker = L.marker([lat, lng]).addTo(state.map);
      
      try {
        // G√©ocodage inverse
        const address = await this.reverseGeocode(lat, lng);
        if (address) {
          state.selectedAddress = address;
          this.showSelectedAddress(address);
        }
      } catch (error) {
        logger.error('Erreur g√©ocodage inverse', error);
      }
    },

    async reverseGeocode(lat, lng) {
      const url = `https://api-adresse.data.gouv.fr/reverse/?lon=${lng}&lat=${lat}`;
      
      try {
        const data = await fetchWithFallback(url);
        if (data?.features?.length > 0) {
          return data.features[0].properties.label;
        }
      } catch (error) {
        logger.error('Erreur g√©ocodage inverse', error);
      }
      
      return null;
    },

    showSelectedAddress(address) {
      const addressEl = $('[data-selected-address]');
      const infoEl = $('[data-map-info]');
      
      if (addressEl && infoEl) {
        addressEl.textContent = address;
        infoEl.style.display = 'block';
      }
    },

    show() {
      const container = $('[data-map-container]');
      if (container) {
        container.style.display = 'block';
        
        // Redimensionner apr√®s affichage
        setTimeout(() => {
          if (state.map) state.map.invalidateSize();
        }, 100);
      }
    },

    hide() {
      const container = $('[data-map-container]');
      const infoEl = $('[data-map-info]');
      
      if (container) container.style.display = 'none';
      if (infoEl) infoEl.style.display = 'none';
      
      state.selectedAddress = '';
    },

    confirmAddress() {
      if (state.selectedAddress) {
        const input = $('#wa-address-{{ section.id }}');
        if (input) input.value = state.selectedAddress;
        
        this.hide();
        
        // Analyser automatiquement
        setTimeout(() => analyzeWater(state.selectedAddress), 300);
      }
    }
  };

  // Fetch avec fallback CORS optimis√©
  async function fetchWithFallback(url, proxyIndex = 0) {
    if (proxyIndex >= CORS_PROXIES.length) {
      throw new Error('Toutes les m√©thodes de connexion ont √©chou√©');
    }

    const proxy = CORS_PROXIES[proxyIndex];
    const proxyUrl = proxy.url ? `${proxy.url}${encodeURIComponent(url)}` : url;
    
    logger.debug(`Tentative ${proxyIndex + 1}/${CORS_PROXIES.length}: ${proxy.name}`);

    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), CONFIG.requestTimeout);
      
      const response = await fetch(proxyUrl, {
        method: 'GET',
        headers: { 'Accept': 'application/json' },
        signal: controller.signal,
        mode: 'cors'
      });
      
      clearTimeout(timeoutId);
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }
      
      const data = await response.json();
      return proxy.parse(data);
      
    } catch (error) {
      logger.debug(`${proxy.name} √©chou√©: ${error.message}`);
      
      // Retry avec proxy suivant
      if (proxyIndex < CORS_PROXIES.length - 1) {
        return fetchWithFallback(url, proxyIndex + 1);
      }
      
      throw error;
    }
  }

  // Analyse principale de l'eau
  async function analyzeWater(address) {
    if (!address?.trim()) {
      throw new Error('Adresse requise');
    }

    const cacheKey = utils.getCacheKey(address);
    
    // V√©rifier cache
    if (state.cache.has(cacheKey)) {
      const cached = state.cache.get(cacheKey);
      if (Date.now() - cached.timestamp < CONFIG.cacheExpiry) {
        logger.debug('Donn√©es en cache utilis√©es');
        return cached.data;
      }
    }

    logger.debug(`Analyse d√©marr√©e: ${address}`);
    
    try {
      // √âtape 1: G√©ocodage (20%)
      ui.updateProgress(20, 'Localisation de l\'adresse...');
      
      const addressUrl = `https://api-adresse.data.gouv.fr/search/?q=${encodeURIComponent(address)}&limit=5`;
      const locationData = await fetchWithFallback(addressUrl);
      
      if (!locationData?.features?.length) {
        throw new Error('Adresse non trouv√©e. Essayez avec le code postal.');
      }

      const location = locationData.features[0];
      const cityCode = location.properties.citycode;
      
      logger.debug(`Adresse trouv√©e: ${location.properties.city} (${cityCode})`);

      // √âtape 2: Donn√©es qualit√© (60%)
      ui.updateProgress(60, 'R√©cup√©ration des analyses...');
      
      const dateLimit = new Date();
      dateLimit.setFullYear(dateLimit.getFullYear() - CONFIG.dateRangeYears);
      const dateLimitStr = dateLimit.toISOString().split('T')[0];

      const waterUrl = `https://hubeau.eaufrance.fr/api/v1/qualite_eau_potable/resultats_dis?code_commune=${cityCode}&date_min_prelevement=${dateLimitStr}&size=200&format=json&sort=desc`;
      
      const qualityData = await fetchWithFallback(waterUrl);

      // √âtape 3: Analyse (80%)
      ui.updateProgress(80, 'Analyse des donn√©es...');
      
      // Recherche de communes proches si pas de donn√©es
      let finalQualityData = qualityData;
      let sourceInfo = null;
      
      if (!qualityData?.data?.length) {
        logger.debug('Recherche de sources proches...');
        ui.updateProgress(90, 'Recherche de sources proches...');
        
        const nearbyResult = await findNearbyWaterSources(location);
        if (nearbyResult) {
          finalQualityData = nearbyResult.data;
          sourceInfo = nearbyResult.source;
        }
      }

      // Finalisation (100%)
      ui.updateProgress(100, 'G√©n√©ration du rapport...');
      
      const result = {
        location,
        qualityData: finalQualityData,
        sourceInfo,
        timestamp: Date.now()
      };

      // Mise en cache
      state.cache.set(cacheKey, {
        data: result,
        timestamp: Date.now()
      });

      logger.debug('Analyse termin√©e avec succ√®s');
      return result;
      
    } catch (error) {
      logger.error('Erreur analyse', error);
      throw error;
    }
  }

  // Recherche de sources d'eau proches
  async function findNearbyWaterSources(location) {
    try {
      const [lon, lat] = location.geometry.coordinates;
      const radius = 20000; // 20km
      
      const nearbyUrl = `https://api-adresse.data.gouv.fr/search/?lon=${lon}&lat=${lat}&type=municipality&limit=10`;
      const nearbyData = await fetchWithFallback(nearbyUrl);
      
      if (!nearbyData?.features?.length) return null;
      
      // Tester les communes proches
      for (const feature of nearbyData.features.slice(1, 6)) { // Skip premi√®re (m√™me commune)
        const cityCode = feature.properties.citycode;
        const cityName = feature.properties.city;
        
        const dateLimit = new Date();
        dateLimit.setFullYear(dateLimit.getFullYear() - CONFIG.dateRangeYears);
        const dateLimitStr = dateLimit.toISOString().split('T')[0];
        
        const waterUrl = `https://hubeau.eaufrance.fr/api/v1/qualite_eau_potable/resultats_dis?code_commune=${cityCode}&date_min_prelevement=${dateLimitStr}&size=50&format=json&sort=desc`;
        
        try {
          const qualityData = await fetchWithFallback(waterUrl);
          
          if (qualityData?.data?.length > 0) {
            logger.debug(`Source trouv√©e: ${cityName}`);
            return {
              data: qualityData,
              source: {
                city: cityName,
                cityCode: cityCode,
                distance: Math.round(feature.properties.distance || 0)
              }
            };
          }
        } catch (error) {
          // Continuer avec la commune suivante
          continue;
        }
      }
      
      return null;
    } catch (error) {
      logger.error('Erreur recherche sources proches', error);
      return null;
    }
  }

  // G√©n√©ration HTML des r√©sultats
  function generateResultsHTML(result) {
    const { location, qualityData, sourceInfo } = result;
    const props = location.properties;
    let html = '';

    // Adresse analys√©e
    html += `
      <div class="wa-result">
        <h3 class="wa-result__title">üìç Adresse analys√©e</h3>
        <div class="wa-result__content">
          <p><strong>${utils.sanitize(props.label)}</strong></p>
          <p>üèòÔ∏è ${utils.sanitize(props.city)} (${props.postcode || 'N/A'})</p>
          <p>üÜî Code INSEE: ${props.citycode}</p>
          ${props.context ? `<p>üìç ${utils.sanitize(props.context)}</p>` : ''}
        </div>
      </div>
    `;

    if (qualityData?.data?.length > 0) {
      const analyses = qualityData.data;
      const latest = analyses[0];
      const lastDate = utils.formatDate(latest.date_prelevement);

      // Info source si diff√©rente
      if (sourceInfo) {
        html += `
          <div class="wa-result wa-result--warning">
            <h3 class="wa-result__title">‚ÑπÔ∏è Source des donn√©es</h3>
            <div class="wa-result__content">
              <p>Aucune donn√©e disponible pour ${utils.sanitize(props.city)}.</p>
              <p><strong>Donn√©es de la source la plus proche :</strong></p>
              <p>üìç ${utils.sanitize(sourceInfo.city)} (${sourceInfo.distance}m)</p>
              <p>Ces donn√©es peuvent √™tre repr√©sentatives de votre secteur.</p>
            </div>
          </div>
        `;
      }

      // Rapport qualit√©
      html += `
        <div class="wa-result wa-result--success">
          <h3 class="wa-result__title">üìä Rapport Qualit√©</h3>
          <div class="wa-result__content">
            <p><strong>Derni√®re analyse :</strong> ${lastDate}</p>
            <p><strong>Total analyses :</strong> ${analyses.length} sur ${CONFIG.dateRangeYears} ans</p>
            ${latest.nom_distributeur ? `<p><strong>Distributeur :</strong> ${utils.sanitize(latest.nom_distributeur)}</p>` : ''}
            ${latest.nom_installation ? `<p><strong>Installation :</strong> ${utils.sanitize(latest.nom_installation)}</p>` : ''}
          </div>
        </div>
      `;

      // Conformit√©
      const bactConform = analyses.filter(d => d.conformite_limites_bact_prelevement === 'C').length;
      const bactTotal = analyses.filter(d => d.conformite_limites_bact_prelevement).length;
      const physConform = analyses.filter(d => d.conformite_limites_pc_prelevement === 'C').length;
      const physTotal = analyses.filter(d => d.conformite_limites_pc_prelevement).length;

      if (bactTotal > 0 || physTotal > 0) {
        html += `
          <div class="wa-result wa-result--success">
            <h4 class="wa-result__title">‚úÖ Conformit√© R√©glementaire</h4>
            <div class="wa-result__content">
        `;

        if (bactTotal > 0) {
          const bactPercent = (bactConform / bactTotal) * 100;
          html += `<p>ü¶† Qualit√© bact√©riologique : <strong>${bactPercent.toFixed(1)}%</strong> conforme (${bactConform}/${bactTotal})</p>`;
        }

        if (physTotal > 0) {
          const physPercent = (physConform / physTotal) * 100;
          html += `<p>‚öóÔ∏è Param√®tres physico-chimiques : <strong>${physPercent.toFixed(1)}%</strong> conforme (${physConform}/${physTotal})</p>`;
        }

        html += `
            </div>
          </div>
        `;
      }

      // Recommandations
      html += `
        <div class="wa-result">
          <h4 class="wa-result__title">üí° Recommandations</h4>
          <div class="wa-result__content">
            <p>‚Ä¢ üî¨ Analyses conformes aux normes fran√ßaises</p>
            <p>‚Ä¢ üìû En cas de doute, contactez votre distributeur</p>
            <p>‚Ä¢ üíß Consommez 1,5 √† 2L d'eau par jour</p>
            <p>‚Ä¢ üå°Ô∏è Conservez l'eau au frais et consommez rapidement</p>
            <p>‚Ä¢ üìß Rapport envoy√© √† : <strong>${state.userEmail}</strong></p>
          </div>
        </div>
      `;

    } else {
      html += `
        <div class="wa-result wa-result--warning">
          <h4 class="wa-result__title">‚ö†Ô∏è Aucune analyse disponible</h4>
          <div class="wa-result__content">
            <p>Aucune donn√©e trouv√©e pour ${utils.sanitize(props.city)} et les communes environnantes.</p>
            <p>Cette zone peut √™tre desservie par un r√©seau intercommunal.</p>
            <p>üí° Contactez votre mairie pour plus d'informations.</p>
          </div>
        </div>
      `;
    }

    return html;
  }

  // Gestionnaires d'√©v√©nements
  function setupEventListeners() {
    // Formulaire email
    const emailForm = $('[data-email-form]');
    if (emailForm) {
      emailForm.addEventListener('submit', handleEmailSubmit);
    }

    // Formulaire adresse
    const addressForm = $('[data-address-form]');
    if (addressForm) {
      addressForm.addEventListener('submit', handleAddressSubmit);
    }

    // Exemples
    $$('[data-example]').forEach(btn => {
      btn.addEventListener('click', handleExampleClick);
    });

    // Carte
    if (CONFIG.enableMap) {
      const mapToggle = $('[data-map-toggle]');
      const mapClose = $('[data-map-close]');
      const mapConfirm = $('[data-map-confirm]');

      if (mapToggle) mapToggle.addEventListener('click', () => {
        mapManager.show();
        if (!state.map) mapManager.init();
      });

      if (mapClose) mapClose.addEventListener('click', () => mapManager.hide());
      if (mapConfirm) mapConfirm.addEventListener('click', () => mapManager.confirmAddress());
    }

    // Validation en temps r√©el
    const emailInput = $('#wa-email-{{ section.id }}');
    if (emailInput) {
      emailInput.addEventListener('input', utils.debounce(validateEmailInput, 300));
    }

    logger.debug('Event listeners configur√©s');
  }

  // Gestionnaire soumission email
  async function handleEmailSubmit(e) {
    e.preventDefault();
    
    const emailInput = $('#wa-email-{{ section.id }}');
    const email = emailInput?.value?.trim();
    
    ui.clearError('wa-email-error-{{ section.id }}');
    
    if (!email) {
      ui.showError('wa-email-error-{{ section.id }}', 'Email requis');
      return;
    }
    
    if (!utils.validateEmail(email)) {
      ui.showError('wa-email-error-{{ section.id }}', 'Format email invalide');
      return;
    }
    
    state.userEmail = email;
    ui.showStep('address');
    
    // Focus sur le champ adresse
    const addressInput = $('#wa-address-{{ section.id }}');
    if (addressInput) {
      setTimeout(() => addressInput.focus(), 100);
    }
    
    logger.debug(`Email valid√©: ${email}`);
  }

  // Gestionnaire soumission adresse
  async function handleAddressSubmit(e) {
    e.preventDefault();
    
    if (state.isLoading) return;
    
    const addressInput = $('#wa-address-{{ section.id }}');
    const address = addressInput?.value?.trim();
    
    ui.clearError('wa-address-error-{{ section.id }}');
    
    if (!address) {
      ui.showError('wa-address-error-{{ section.id }}', 'Adresse requise');
      return;
    }
    
    ui.toggleButton('[data-address-submit]', true, 'Analyse...');
    ui.showLoading(true);
    
    try {
      const result = await analyzeWater(address);
      const html = generateResultsHTML(result);
      ui.showResults(html);
      
      // Simuler envoi email (ici vous pourriez int√©grer un service d'email)
      logger.debug(`Rapport g√©n√©r√© pour ${state.userEmail}`);
      
    } catch (error) {
      const errorHtml = `
        <div class="wa-result wa-result--error">
          <h4 class="wa-result__title">‚ùå Erreur</h4>
          <div class="wa-result__content">
            <p>${utils.sanitize(error.message)}</p>
            <p><strong>Suggestions :</strong></p>
            <p>‚Ä¢ V√©rifiez l'orthographe de votre adresse</p>
            <p>‚Ä¢ Essayez avec un code postal (ex: 75001)</p>
            <p>‚Ä¢ V√©rifiez votre connexion internet</p>
          </div>
        </div>
      `;
      ui.showResults(errorHtml);
      
    } finally {
      ui.showLoading(false);
      ui.toggleButton('[data-address-submit]', false, '{{ section.settings.button_text | default: "Analyser" }}');
    }
  }

  // Validation email en temps r√©el
  function validateEmailInput(e) {
    const email = e.target.value.trim();
    const errorId = 'wa-email-error-{{ section.id }}';
    
    ui.clearError(errorId);
    
    if (email && !utils.validateEmail(email)) {
      ui.showError(errorId, 'Format email invalide');
    }
  }

  // Gestionnaire exemples
  function handleExampleClick(e) {
    const example = e.target.dataset.example;
    const addressInput = $('#wa-address-{{ section.id }}');
    
    if (addressInput && example) {
      addressInput.value = example;
      addressInput.focus();
      
      // Animation feedback
      e.target.style.transform = 'scale(0.95)';
      setTimeout(() => {
        e.target.style.transform = '';
      }, 150);
    }
  }

  // Initialisation
  function init() {
    logger.debug('Initialisation de l\'analyseur d\'eau');
    
    // Configuration initiale
    ui.showStep('email');
    
    // Event listeners
    setupEventListeners();
    
    // Initialiser la carte si activ√©e
    if (CONFIG.enableMap) {
      mapManager.init();
    }
    
    logger.debug('Analyseur initialis√© et pr√™t');
  }

  // D√©marrage
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }

})();
</script>

{% schema %}
{
  "name": "Analyseur Eau",
  "settings": [
    {
      "type": "header",
      "content": "Configuration g√©n√©rale"
    },
    {
      "type": "text",
      "id": "title",
      "label": "Titre principal",
      "default": "Analyseur Qualit√© Eau"
    },
    {
      "type": "text",
      "id": "subtitle",
      "label": "Sous-titre",
      "default": "D√©couvrez la qualit√© de l'eau √† votre adresse"
    },
    {
      "type": "checkbox",
      "id": "show_header",
      "label": "Afficher l'en-t√™te",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_subtitle",
      "label": "Afficher le sous-titre",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_header_icon",
      "label": "Afficher l'ic√¥ne d'en-t√™te",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_icons",
      "label": "Afficher les ic√¥nes",
      "default": true
    },
    {
      "type": "text",
      "id": "header_icon",
      "label": "Ic√¥ne d'en-t√™te",
      "default": "üåä"
    },
    {
      "type": "header",
      "content": "Configuration email"
    },
    {
      "type": "text",
      "id": "email_title",
      "label": "Titre section email",
      "default": "Votre adresse email"
    },
    {
      "type": "textarea",
      "id": "email_description",
      "label": "Description email",
      "default": "Recevez votre rapport de qualit√© par email"
    },
    {
      "type": "text",
      "id": "email_placeholder",
      "label": "Placeholder email",
      "default": "votre@email.com"
    },
    {
      "type": "text",
      "id": "email_button_text",
      "label": "Texte bouton email",
      "default": "Continuer"
    },
    {
      "type": "checkbox",
      "id": "show_privacy_notice",
      "label": "Afficher notice confidentialit√©",
      "default": true
    },
    {
      "type": "textarea",
      "id": "privacy_notice",
      "label": "Notice de confidentialit√©",
      "default": "üîí Vos donn√©es sont prot√©g√©es et ne seront pas partag√©es"
    },
    {
      "type": "header",
      "content": "Configuration recherche"
    },
    {
      "type": "text",
      "id": "search_title",
      "label": "Titre section recherche",
      "default": "Votre adresse"
    },
    {
      "type": "textarea",
      "id": "search_description",
      "label": "Description recherche",
      "default": "Saisissez votre adresse pour analyser la qualit√© de l'eau"
    },
    {
      "type": "text",
      "id": "address_placeholder",
      "label": "Placeholder adresse",
      "default": "01000 Bourg-en-Bresse"
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "Texte bouton analyse",
      "default": "Analyser"
    },
    {
      "type": "checkbox",
      "id": "show_examples",
      "label": "Afficher les exemples",
      "default": true
    },
    {
      "type": "text",
      "id": "examples",
      "label": "Exemples d'adresses",
      "default": "01000,75001,69001"
    },
    {
      "type": "header",
      "content": "Couleurs principales"
    },
    {
      "type": "color",
      "id": "primary_color",
      "label": "Couleur primaire",
      "default": "#2563eb"
    },
    {
      "type": "color",
      "id": "secondary_color",
      "label": "Couleur secondaire",
      "default": "#1e40af"
    },
    {
      "type": "color",
      "id": "accent_color",
      "label": "Couleur accent",
      "default": "#3b82f6"
    },
    {
      "type": "color",
      "id": "success_color",
      "label": "Couleur succ√®s",
      "default": "#10b981"
    },
    {
      "type": "color",
      "id": "warning_color",
      "label": "Couleur avertissement",
      "default": "#f59e0b"
    },
    {
      "type": "color",
      "id": "error_color",
      "label": "Couleur erreur",
      "default": "#ef4444"
    },
    {
      "type": "header",
      "content": "Couleurs texte et fond"
    },
    {
      "type": "color",
      "id": "text_primary_color",
      "label": "Texte principal",
      "default": "#1f2937"
    },
    {
      "type": "color",
      "id": "text_secondary_color",
      "label": "Texte secondaire",
      "default": "#6b7280"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Fond principal",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "surface_color",
      "label": "Fond surface",
      "default": "#f9fafb"
    },
    {
      "type": "color",
      "id": "border_color",
      "label": "Couleur bordures",
      "default": "#e5e7eb"
    },
    {
      "type": "color",
      "id": "shadow_color",
      "label": "Couleur ombres",
      "default": "rgba(0, 0, 0, 0.1)"
    },
    {
      "type": "header",
      "content": "Couleurs en-t√™te"
    },
    {
      "type": "color",
      "id": "header_background_color",
      "label": "Fond en-t√™te",
      "default": "#1e40af"
    },
    {
      "type": "color",
      "id": "header_text_color",
      "label": "Texte en-t√™te",
      "default": "#ffffff"
    },
    {
      "type": "header",
      "content": "Design et espacement"
    },
    {
      "type": "range",
      "id": "border_radius",
      "label": "Arrondi des bords",
      "min": 0,
      "max": 32,
      "step": 2,
      "default": 16,
      "unit": "px"
    },
    {
      "type": "range",
      "id": "section_padding",
      "label": "Espacement interne",
      "min": 0.5,
      "max": 4,
      "step": 0.25,
      "default": 1.5,
      "unit": "rem"
    },
    {
      "type": "header",
      "content": "Fonctionnalit√©s"
    },
    {
      "type": "checkbox",
      "id": "enable_map",
      "label": "Carte interactive",
      "default": false
    },
    {
      "type": "select",
      "id": "loading_animation",
      "label": "Animation de chargement",
      "options": [
        {
          "value": "glass",
          "label": "Verre qui se remplit"
        },
        {
          "value": "progress",
          "label": "Barre de progression"
        },
        {
          "value": "wave",
          "label": "Ondulation"
        },
        {
          "value": "dots",
          "label": "Points anim√©s"
        }
      ],
      "default": "glass"
    },
    {
      "type": "checkbox",
      "id": "debug_mode",
      "label": "Mode debug",
      "default": false
    }
  ],
  "presets": [
    {
      "name": "Analyseur Eau"
    }
  ]
}
{% endschema %}